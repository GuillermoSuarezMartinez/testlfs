<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orbita.Comunicaciones</name>
    </assembly>
    <members>
        <member name="T:Orbita.Comunicaciones.ODispositivoTCP">
            <summary>
            Dispositivo TCP de Orbita
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivo">
            <summary>
            Dispositivo.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.Disposed">
            <summary>
            Variable para el cierre de todos los objetos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.Salidas">
            <summary>
            Salidas del dispositivo.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.Wrapper">
            <summary>
            Logger de la clase.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.ObjSincronizacion">
            <summary>
            Objeto para bloquear las escrituras.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.EventoCommSg">
            <summary>
            Segundos del evento Comunicaciones.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivo.FechaUltimoEventoComm">
            <summary>
            Fecha del último evento de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ODispositivo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Dispose(System.Boolean)">
            <summary>
            Limpia la memoria.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Dispose">
            <summary>
            Llama al método para limpiar todos los objetos de memoria
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Finalize">
            <summary>
            Destructor del objeto.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Iniciar">
            <summary>
            Iniciar todas las comunicaciones del dispositivo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Escribir(System.String[],System.Object[])">
            <summary>
            Método de escritura de un dispositivo.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns>Resultado de la escritura.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Escribir(System.String[],System.Object[],System.String)">
            <summary>
            Método de escritura de un dispositivo.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.Leer(System.String[],System.Boolean)">
            <summary>
            Método de lectura de un dispositivo.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Establece si la lectura se realiza al instante.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.GetAlarmasActivas">
            <summary>
            Obtener las alarmas activas del dispositivo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.GetDatos">
            <summary>
            Obtener los datos del sistema y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.GetLecturas">
            <summary>
            Obtenerr las lecturas del sistema y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.GetAlarmas">
            <summary>
            Obtener las alarmas del sistema y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.OnCambioDato(Orbita.Utiles.OEventArgs)">
            <summary>
            El evento invoca el método que puede ser sobreescrito en la clase derivada.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.OnAlarma(Orbita.Utiles.OEventArgs)">
            <summary>
            El evento invoca el método que puede ser sobreescrito en la clase derivada.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivo.OnComm(Orbita.Utiles.OEventArgs)">
            <summary>
            El evento invoca el método que puede ser sobreescrito en la clase derivada.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.ODispositivo.OrbitaCambioDato">
            <summary>
            Evento de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.ODispositivo.OrbitaAlarma">
            <summary>
            Evento de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.ODispositivo.OrbitaComm">
            <summary>
            Evento de comunicaciones correctas.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Identificador">
            <summary>
            Identificador de dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Nombre">
            <summary>
            Nombre de dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Tipo">
            <summary>
            Tipo de dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Direccion">
            <summary>
            Dirección de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Puerto">
            <summary>
            Puerto de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Protocolo">
            <summary>
            Nombre del protocolo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivo.Local">
            <summary>
            Indica si se conecta al dispositivo de forma local o remota.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoTCP._tags">
            <summary>
            Atributo que indica las  colecciones
            de tags de datos, lecturas y alarmas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoTCP._hilos">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoTCP._configuracionDispositivo">
            <summary>
            Datos de configuración del canal
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoTCP._eventArgs">
            <summary>
            Argumentos para generar los eventos
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoTCP._inicioVariables">
            <summary>
            Indica si las variables han sido iniciadas
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.#ctor(Orbita.Comunicaciones.OTags,Orbita.Utiles.OHilos,Orbita.Comunicaciones.ODispositivo)">
            <summary>
            Inicializar una nueva instancia de la clase ODispositivoTCP.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.Iniciar">
            <summary>
            Inicializar grupos, punteros e items.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.IniciarValores">
            <summary>
            Inicia los valores por defecto en las variables del dispositivo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.Leer(System.String[],System.Boolean)">
            <summary>
            Leer el valor de las descripciones de variables de la colección
            a partir del valor de la colección de datos DB actualiza  en el
            proceso del hilo vida.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se ejecuta sobre el dispositivo</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.Escribir(System.String[],System.Object[])">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.Escribir(System.String[],System.Object[],System.String)">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.GetAlarmasActivas">
            <summary>
            Devuelva las alarmas alctivas del sistemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.GetDatos">
            <summary>
            Devuelve los datos del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.GetLecturas">
            <summary>
            Devuelve las lectuas del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.GetAlarmas">
            <summary>
            Devuelve las alarmas del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.Dispose(System.Boolean)">
            <summary>
            Limpia los objetos en memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.InicializarHiloVida">
            <summary>
            Inicializar hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoTCP.ProcesarHiloVida">
            <summary>
            Proceso del hilo de vida.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoTCP.Datos">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoTCP.AlarmasActivas">
            <summary>
            Colección de alarmas activas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.TiposVariables">
            <summary>
            Tipos de variables.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.X">
            <summary>
            Variable de tipo Bit.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.REAL">
            <summary>
            Variable de tipo Real.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.INT">
            <summary>
            Variable de tipo Int32.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.DINT">
            <summary>
            Variable de tipo Int64.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.W">
            <summary>
            Variable de tipo Word.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.DWORD">
            <summary>
            Variable de tipo Doble Word.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.CHAR">
            <summary>
            Variable de tipo Char.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.STRING">
            <summary>
            Variable de tipo String.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.B">
            <summary>
            Variable de tipo Byte.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.DT">
            <summary>
            Variable de tipo Dt.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.TiposVariables.OBJECT">
            <summary>
            Variable de tipo Object.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OInformacionPuerto">
            <summary>
            Clase que encapsula información de un puerto de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OInformacionPuerto.#ctor(System.Int32,System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="idPuerto">Identificador númerico del puerto de comunicaciones</param>
            <param name="tipoPuerto">Tipo del puerto de comunicaciones</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OInformacionPuerto.IdPuerto">
            <summary>
            Identificador númerico del puerto de comunicaciones.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInformacionPuerto.TipoPuerto">
            <summary>
            Identificador textual del puerto de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorManager">
            <summary>
            Proporciona algunas funciones que son utilizadas por los servidores.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorManager._ultimoIdentificador">
            <summary>
            Se utiliza para establecer un identificador auto incremential único a los clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorManager.GetIdentificadorAutoincremental">
            <summary>
            Obtener un número único como identificador de cliente.
            </summary>
            <returns>Identificador del cliente.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeEscritura">
            <summary>
            Este mensaje se utiliza para enviar/recibir un array de bytes como mensaje de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeEscrituraBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Mensaje">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IMensaje">
            <summary>
            Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IMensaje.IdMensaje">
            <summary>
            Identificador único para este mensaje. 
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IMensaje.IdMensajeRespuesta">
            <summary>
            Identificador único para este mensaje de respuesta. 
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Mensaje.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase Mensaje.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Mensaje.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase Mensaje.
            </summary>
            <param name="idMensajeRespuesta">Mensaje de respuesta a un mensaje.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Mensaje.ToString">
            <summary>
            Invalida el método ToString() para devolver una cadena que representa la instancia de objeto.
            </summary>
            <returns>Una cadena (string) que representa este objeto.</returns>
        </member>
        <member name="P:Orbita.Comunicaciones.Mensaje.IdMensaje">
            <summary>
            Identificador único para este mensaje.
            Valor predeterminado: Nuevo GUID.
            No establecer si no se quieren hacer cambios a más bajo nivel, como por ejemplo, telegramas personalizados.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Mensaje.IdMensajeRespuesta">
            <summary>
            Esta propiedad se utiliza para indicar que se trata de un mensaje de respuesta a un mensaje.
            Puede ser nulo (null) si no se trata de un mensaje de respuesta.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeBase.#ctor(System.Int32,System.String[])">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeBase.#ctor(System.Int32,System.String[],System.Object[])">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeBase.#ctor(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeBase.Dispositivo">
            <summary>
            Dispositivo de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeBase.Variables">
            <summary>
            Colección de variables.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeBase.Valores">
            <summary>
            Colección de valores.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeEscritura">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeBase">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensaje">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensaje.Dispositivo">
            <summary>
            Dispositivo de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeBase.Variables">
            <summary>
            Colección de variables del dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeBase.Valores">
            <summary>
            Colección de valores resultado de la colección de variables vinculada.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeEscritura.Respuesta">
            <summary>
            Resultado de la escritura en el dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeEscritura.Canal">
            <summary>
            Identificador del canal cliente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscrituraBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscrituraBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscrituraBase.#ctor(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscrituraBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal">Identificador del canal cliente.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscrituraBase.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscrituraBase.
            </summary>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeEscrituraBase.Respuesta">
            <summary>
            Resultado de la escritura en el dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeEscrituraBase.Canal">
            <summary>
            Identificador del canal cliente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscritura.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscritura.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscritura.#ctor(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscritura.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal">Identificador del canal cliente.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscritura.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscritura.
            </summary>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivoILBKPhoenix">
            <summary>
            Dispositivo entradas salidas ILBKPhoenix
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivoES">
            <summary>
            Clase base para los dispositivos de ES
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Tags">
            <summary>
            Atributo que indica las  colecciones de tags de datos, lecturas y alarmas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Hilos">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.ConfigDispositivo">
            <summary>
            Datos de configuración del canal.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Eventargs">
            <summary>
            Argumentos para generar los eventos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Winsock">
            <summary>
            Objeto para establecer el canal Tcp.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.ReConexionSg">
            <summary>
            Segundos para la reconexión con el dispositivo.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Entradas">
            <summary>
            Valor devuelto para las entradas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.Salidas">
            <summary>
            Byte de escrituras.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoES.LogErrorComunicacionSg">
            <summary>
            Tiempo que tarda en trazar un error de comunicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.#ctor(Orbita.Comunicaciones.OTags,Orbita.Utiles.OHilos,Orbita.Comunicaciones.ODispositivo)">
            <summary>
            Inicializar una nueva instancia de la clase ODispositivoES.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.Iniciar">
            <summary>
            Inicializar grupos, punteros e items.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.GetAlarmasActivas">
            <summary>
            Devuelva las alarmas activas del sistema.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.GetDatos">
            <summary>
            Devuelve los datos del dipositivo y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.GetLecturas">
            <summary>
            Devuelve las lectuas del dipositivo y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.GetAlarmas">
            <summary>
            Devuelve las alarmas del dipositivo y su valor.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.ProcesarHiloVida">
            <summary>
            Proceso del hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.Dispose(System.Boolean)">
            <summary>
            Limpia los objetos en memoria.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.Escribir(System.String[],System.Object[],System.String)">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoES.IniciarHiloVida">
            <summary>
            Inicia hilo de vida.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoES.Datos">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoES.Lecturas">
            <summary>
            Colección de lecturas.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoES.Alarmas">
            <summary>
            Colección de alarmas.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoES.AlarmasActivas">
            <summary>
            Colección de alarmas activas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._qEntradaSalida">
            <summary>
            Cola de recepción de tramas de datos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._eReset">
            <summary>
            Evento reset de recepción de tramas KeepAlive.
            Entrada/Salida.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._almacenLecturas">
            <summary>
            Colección para la búsqueda de lecturas. La clave es la dupla "dirección-bit".
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._almacenEscrituras">
            <summary>
            Colección para la búsqueda de escrituras. La clave es la dupla "dirección-bit".
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._numLecturas">
            <summary>
            Número de lecturas a realizar.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._numeroBytesEntradas">
            <summary>
            Número de bytes de entradas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._numeroBytesSalidas">
            <summary>
            Número de bytes de salidas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._lecturas">
            <summary>
            Valor de las lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._registroInicialEntradas">
            <summary>
            Valor inicial del registro de lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._registroInicialSalidas">
            <summary>
            Valor inicial del registro de escrituras.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._fechaErrorWrapperWinsock">
            <summary>
            Fecha del ultimo wrapper de error.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoILBKPhoenix._qEscrituras">
            <summary>
            Cola de recepción de tramas de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.#ctor(Orbita.Comunicaciones.OTags,Orbita.Utiles.OHilos,Orbita.Comunicaciones.ODispositivo)">
            <summary>
            Inicializar una nueva instancia de la clase ODispositivoILBKPhoenix.
            </summary>
            <param name="tags">variables</param>
            <param name="hilos">hilos del dispositivo</param>
            <param name="dispositivo">dispositivo</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.ProcesarHiloVida">
            <summary>
            Procesa las lecturas del dispositivo
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.Leer(System.String[],System.Boolean)">
            <summary>
            Leer el valor de las descripciones de variables de la colección
            a partir del valor de la colección de datos DB actualiza  en el
            proceso del hilo vida.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se ejecuta sobre el dispositivo</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.Escribir(System.String[],System.Object[])">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.CrearParametrosConexionTcp">
            <summary>
            Publica los eventos de socket
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.Conectar">
            <summary>
            Conecta con el dispositivo TCP
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.IniciarObjetos">
            <summary>
            Establece el valor inicial de los objetos
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.ProcesarMensajeRecibido(System.Byte[])">
            <summary>
            Procesa los mensajes recibidos en el data arrival
            </summary>
            <param name="mensaje"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.ProcesarByte(System.Byte,System.Int32,System.Int32)">
            <summary>
            Procesa los bits poniendo a 1 o 0 el bit correspondiente
            </summary>
            <param name="valor"></param>
            <param name="bit"></param>
            <param name="valorBit"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.Enviar(System.Object)">
            <summary>
            Enviar datos al dispositivo
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.ProcesarEscritura(System.String[],System.Object[])">
            <summary>
            Calcula el valor de las salidas para enviar al dispositivo.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsEncolar(System.Byte[])">
            <summary>
            Método que encola las lecturas para que se procesen.
            </summary>
            <param name="trama"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsDesencolar">
            <summary>
            Método que desencola las lecturas para ser procesadas.
            </summary>
            <returns>Objeto GateData</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsColaVariables">
            <summary>
            Hilo de proceso de ES
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsProcesar(System.Byte[],System.Byte[])">
            <summary>
            Procesa los bytes de entradas y salidas para actualizar los valores de las variables
            </summary>
            <param name="entradas">byte de entradas recibido</param>
            <param name="salidas">byte de salidas recibido</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsActualizarVariablesEntradas(System.Byte,System.Int32)">
            <summary>
            Actualiza los valores de las entradas y genera los eventos de cambio de dato y alarma
            </summary>
            <param name="valor">valor del byte</param>
            <param name="posicion">posición del byte</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix.EsActualizarVariablesSalidas(System.Byte,System.Int32)">
            <summary>
            Actualiza los valores de las salidas y genera los eventos de cambio de dato y alarma
            </summary>
            <param name="valor">valor del byte</param>
            <param name="posicion">posición del byte</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix._winsock_DataArrival(System.Object,Orbita.Winsock.WinsockDataArrivalEventArgs)">
            <summary>
            Evento de recepción de datos
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix._winsock_SendComplete(System.Object,Orbita.Winsock.WinsockSendEventArgs)">
            <summary>
            Indica que el objeto winsock ha enviado toda la información
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix._winsock_StateChanged(System.Object,Orbita.Winsock.WinsockStateChangedEventArgs)">
            <summary>
            Indica que el objeto winsock ha cambiado de estado. Trazabilidad del canal.
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoILBKPhoenix._winsock_ErrorReceived(System.Object,Orbita.Winsock.WinsockErrorReceivedEventArgs)">
            <summary>
            Evento de errores en la comunicación TCP
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeLectura)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.MensajeDatos">
            <summary>
            Este mensaje se utiliza para enviar/recibir un array de bytes como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeDatos.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase MensajeDatos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeDatos.#ctor(System.Byte[])">
            <summary>
            Inicializar una nueva instancia de la clase MensajeDatos.
            </summary>
            <param name="datos">Mensaje de datos que será transmitido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeDatos.#ctor(System.Byte[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeDatos.
            </summary>
            <param name="datos">Mensaje de datos que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeDatos.ToString">
            <summary>
            Invalida el método ToString() para devolver una cadena que representa la instancia de objeto.
            </summary>
            <returns>Una cadena (string) que representa este objeto.</returns>
        </member>
        <member name="P:Orbita.Comunicaciones.MensajeDatos.Datos">
            <summary>
            Los datos del mensaje que se está transmitiendo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1">
            <summary>
            Esta clase es un contenedor para IMessenger y se utiliza para sincronizar la operación de recepción de mensaje.
            Es una extensión de MensajeroPeticionRespuesta.
            Es adecuado su uso en aplicaciones donde se quiera recibir mensajes producidos por llamadas de métodos
            sincronizados, en vez de, eventos de mensajes de recepción asincronos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1">
            <summary>
            Esta clase añade EnviarMensajeEsperarRespuesta (...) y los métodos Enviar(...) y Recibir(...)
            mensajes a un IMensajero para peticiones/respuestas síncronas.
            Agrega procesamiento en cola de los mensajes entrantes.
            </summary>
            <typeparam name="T">El tipo de objeto IMensajero que utiliza la comunicación subyacente.</typeparam>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero">
            <summary>
            Representa un objeto que puede enviar y recibir mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje a la aplicación remota.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.IMensajero.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.TimeoutMsPredeterminado">
            <summary>
            Valor predeterminado del Timeout en milisegundos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1._mensajesEnEspera">
            <summary>
            Estos mensajes están a la espera de una respuesta.
            Clave: IdMensaje.
            Valor: instancia de MensajeEnEspera.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1._mensajesEntrantes">
            <summary>
            Este objeto se utiliza para procesar los mensajes entrantes de forma secuencial.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1._objSincronizacion">
            <summary>
            Este objeto sólo se utiliza para la sincronización de threads (bloqueo).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.#ctor(`0)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeroPeticionRespuesta.
            </summary>
            <param name="mensajero">Mensajero que se usa en la comunicación subyacente.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Iniciar">
            <summary>
            Iniciar el mensajero.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Parar">
            <summary>
            Parar el mensajero.
            Cancelar todos los hilos (threads) esperando en el método EnviarMensajeEsperarRespuesta y detener la cola de mensajes.
            El método EnviarMensajeEsperarRespuesta lanza una excepción si hay un hilo que está a la espera de mensaje de respuesta.
            También se detiene el procesamiento de mensajes entrantes y elimina todos los mensajes en la cola de entrada.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Dispose">
            <summary>
            Llamar al método Parar(...) en este método.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EnviarMensajeEsperarRespuesta(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Envíar un mensaje y esperar una respuesta para este mensaje.
            </summary>
            <remarks>
            El mensaje de respuesta se corresponde con la propiedad IdMensajeRespuesta, por lo que si
            cualquier otro mensaje se recibe (que no se responderá por mensaje enviado)
            de aplicación remota, no se considera como una respuesta y no se
            devuelve como valor de retorno de este método.
            
            El evento MensajeRecibido no se lanza para mensajes de respuesta.
            </remarks>
            <param name="mensaje">Mensaje a enviar.</param>
            <returns>Mensaje de respuesta.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EnviarMensajeEsperarRespuesta(Orbita.Comunicaciones.IMensaje,System.Int32)">
            <summary>
            Envíar un mensaje y esperar una respuesta para este mensaje.
            </summary>
            <remarks>
            El mensaje de respuesta se corresponde con la propiedad IdMensajeRespuesta, por lo que si
            cualquier otro mensaje se recibe (que no se responderá por mensaje enviado)
            de aplicación remota, no se considera como una respuesta y no se
            devuelve como valor de retorno de este método.
            
            El eventoMensajeRecibido no se lanza para mensajes de respuesta.
            </remarks>
            <param name="mensaje">Mensaje a enviar.</param>
            <param name="timeoutMs">Duración del Timeout en milisegundos.</param>
            <returns>Mensaje de respuesta.</returns>
            <exception cref="T:System.TimeoutException">Throws TimeoutException si no se ha podido recibir el mensaje de respuesta en tiempo.</exception>
            <exception cref="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion">Throws ExcepcionComunicacion si la comunicación falla antes del mensaje de respuesta.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Mensajero_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido del objeto mensajero.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Mensajero_MensajeEnviado(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido del objeto mensajero.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.OnMensajeEnviado(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviado.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje desde el mensajero subyacente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.Mensajero">
            <summary>
            Obtener el objeto IMensajero subyacente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.TimeoutMs">
            <summary>
            Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método EnviarMensajeEsperarRespuesta(...).
            Valor predeterminado: 60000 ms (1 minuto).
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnEspera">
            <summary>
            Esta clase se utiliza para almacenar mensajería en espera (contexto) para un mensaje de petición hasta que se recibe la respuesta.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnEspera.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase MensajeEnEspera.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnEspera.MensajeRespuesta">
            <summary>
            Mensaje de respuesta para el mensaje de petición.
            (Null si la respuesta aún no se ha recibido).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnEspera.EventoEspera">
            <summary>
            ManualResetEvent para bloquear el hilo (thread) hasta que se ha recibido la respuesta.
            (ManualResetEventSlim proporciona una versión reducida de ManualResetEvent).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.MensajeEnEspera.Estado">
            <summary>
            Estado del mensaje de solicitud.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EstadoMensajeEnEspera">
            <summary>
            Esta enumeración se utiliza para almacenar el estado de un mensaje en espera.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.EsperandoRespuesta">
            <summary>
            A la espera de respuesta.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.Cancelado">
            <summary>
            Se cancela el envio de mensajes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.RespuestaRecibida">
            <summary>
            La respuesta se recibió correctamente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1._colaMensajesRecibidos">
            <summary>
            Cola que se utiliza para almacenar mensajes recibidos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1._eventoEspera">
            <summary>
            Este objeto se utiliza para sincronizar esperas de hilos (threads).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1._iniciado">
            <summary>
            Flag para el control de funcionamiento de la clase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.#ctor(`0)">
            <summary>
             Inicializar una nueva instancia de la clase MensajeroSincronizado.
            </summary>
            <param name="mensajero">Mensajero que se utiliza para enviar/recibir mensajes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.#ctor(`0,System.Int32)">
            <summary>
             Inicializar una nueva instancia de la clase MensajeroSincronizado.
            </summary>
            <param name="mensajero">Mensajero que se utiliza para enviar/recibir mensajes.</param>
            <param name="tamañoColaMensajesEntrantes">Tamaño de la cola de entrada de mensajes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.Iniciar">
            <summary>
            Iniciar el mensajero.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.Parar">
            <summary>
            Parar el mensajero.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.RecibirMensaje">
            <summary>
            Este método se utiliza para recibir un mensaje de aplicación remota.
            Espera infinito hasta que se recibe un mensaje.
            </summary>
            <returns>Mensaje recibido.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.RecibirMensaje(System.Int32)">
            <summary>
            Este método se utiliza para recibir un mensaje de aplicación remota.
            Espera hasta que se recibe un mensaje o se produce el tiempo de espera.
            </summary>
            <param name="timeout">
            Valor de tiempo de espera que espera hasta recibir un mensaje.
            Utilizar -1 para esperar indefinidamente.
            </param>
            <returns>Mensaje recibido.</returns>
            <exception cref="T:System.TimeoutException">Throws TimeoutException; si ha sobrepasado el tiempo de espera (timeout).</exception>
            <exception cref="T:System.Exception">Throws Exception; si la clase MensajeroSincronizado termina antes que el mensaje se ha recibido.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.RecibirMensaje``1">
            <summary>
            Este método se utiliza para recibir un tipo específico de mensaje de aplicación remota.
            Espera infinito hasta que se recibe un mensaje.
            </summary>
            <returns>Mensaje recibido.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.RecibirMensaje``1(System.Int32)">
            <summary>
            Este método se utiliza para recibir un tipo específico de mensaje de aplicación remota.
            Espera hasta que se recibe un mensaje o se produce el tiempo de espera.
            </summary>
            <param name="timeout">
            Valor de tiempo de espera que espera hasta recibir un mensaje.
            Utilizar -1 para esperar indefinidamente.
            </param>
            <returns>Mensaje recibido.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Mensajeros.MensajeroSincronizado`1.TamañoColaMensajesEntrantes">
            <summary>
             Obtener/establecer el tamaño de la cola de entrada de mensajes.
             No se recibe ningún mensaje de la aplicación remota si el número de mensajes en la cola interna excede este valor.
             Valor predeterminado: int.MaxValue (2147483647).
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpHelper">
            <summary>
            Esta clase se utiliza para simplificar las operaciones del socket Tcp.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpHelper.ConectarAlServidor(System.Net.EndPoint,System.Int32)">
            <summary>
            Este código se utiliza para conectarse a un socket Tcp con el parámetro tiempo de espera en milisegundos.
            </summary>
            <param name="endPointRemoto">IP endpoint del servidor remoto.</param>
            <param name="timeoutMs">Timeout de espera hasta conectar.</param>
            <returns>Objeto socket conectado al servidor.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Throws SocketException si no puede conectar.</exception>
            <exception cref="T:System.TimeoutException">Throws TimeoutException si no puede conectar dentro del timeoutMs especificado.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpHelper.ConectarAlServidor(System.Net.EndPoint,System.Net.EndPoint,System.Int32)">
            <summary>
            Este código se utiliza para conectarse a un socket Tcp con el parámetro tiempo de espera en milisegundos.
            </summary>
            <param name="endPointRemoto">Endpoint del servidor.</param>
            <param name="endPointLocal">Endpoint del cliente.</param>
            <param name="timeoutMs">Timeout de espera hasta conectar.</param>
            <returns>Objeto socket conectado al servidor.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">Throws SocketException si no puede conectar.</exception>
            <exception cref="T:System.TimeoutException">Throws TimeoutException si no puede conectar dentro del timeoutMs especificado.</exception>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeLecturaAlarmasActivas)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeAlarmasActivasEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OInfoDato">
            <summary>
            Clase para todos las variables del servidor de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoDato.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OInfoDato.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Identificador">
            <summary>
            Identificador.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.IdLectura">
            <summary>
            Identificador de lectura.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Conexion">
            <summary>
            Conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.DB">
            <summary>
            DB.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Direccion">
            <summary>
            Direccion.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Bit">
            <summary>
            Bit.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Texto">
            <summary>
            Texto.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Descripcion">
            <summary>
            Descripción.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Enlace">
            <summary>
            Enlace.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Tipo">
            <summary>
            Tipo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Valor">
            <summary>
            Valor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.ValorDefecto">
            <summary>
            Valor por defecto de la variable.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.UltimoValor">
            <summary>
            Último valor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Error">
            <summary>
            Error.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Calidad">
            <summary>
            Calidad.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.ESAlarma">
            <summary>
            Alarma.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.ESLectura">
            <summary>
            Lectura.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.ESVisualizacion">
            <summary>
            Visualización.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.Dispositivo">
            <summary>
            Dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.EsEntrada">
            <summary>
            Indica si la variable es una entrada.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoDato.CanalCambioDato">
            <summary>
            Canal que ejecuta el cambio de valor.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OTags">
            <summary>
            Colecciones de tags.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._datos">
            <summary>
            Colección de tags de datos.
            Key = Identificador numérico de la variable.
            Object = InfoDato.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._db">
            <summary>
            Colección de tags DB.
            Key = Texto de la variable.
            Object = InfoDato.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._lecturas">
            <summary>
            Colección de tags de lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._alarmas">
            <summary>
            Colección de tags de alarmas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._alarmasActivas">
            <summary>
            Colección de alarmas activas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OTags.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTags._disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetDatos">
            <summary>
            Obtener la colección de datos, lecturas y alarmas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetDatos(System.Object)">
            <summary>
            Obtener el objeto i-esimo de la colección.
            </summary>
            <param name="clave">Clave de la colección.</param>
            <returns>Objeto de tipo InfoDatos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetDatos(Orbita.Utiles.OHashtable)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas.
            </summary>
            <param name="datos">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetDatos(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas asociado por identificador.
            </summary>
            <param name="infoDato">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetDB">
            <summary>
            Obtener la colección de datos, lecturas y alarmas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetDB(System.Object)">
            <summary>
            Obtener el objeto i-esimo de la colección.
            </summary>
            <param name="clave">Clave de la colección.</param>
            <returns>Objeto de tipo InfoDatos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetDB(System.Object)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas.
            </summary>
            <param name="db">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetDB(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas asociado por nombre.
            </summary>
            <param name="infoDato">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetLecturas">
            <summary>
            Obtener la colección de lecturas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetLecturas(System.Object)">
            <summary>
            Obtener el objeto i-esimo de la colección.
            </summary>
            <param name="clave">Clave de la colección.</param>
            <returns>Objeto de tipo InfoDatos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetLecturas(Orbita.Utiles.OHashtable)">
            <summary>
            Asignar la colección de lecturas.
            </summary>
            <param name="lecturas">Colección de lecturas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetLecturas(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas asociado por identificador.
            </summary>
            <param name="infoDato">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetAlarmas">
            <summary>
            Obtener la colección de alarmas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetAlarmas(System.Object)">
            <summary>
            Obtener el objeto i-esimo de la colección.
            </summary>
            <param name="clave">Clave de la colección.</param>
            <returns>Objeto de tipo InfoDatos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetAlarmas(Orbita.Utiles.OHashtable)">
            <summary>
            Asignar la colección de alarmas.
            </summary>
            <param name="alarmas">Colección de alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetAlarmas(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Asignar la colección de datos, lecturas y alarmas asociado por identificador.
            </summary>
            <param name="infoDato">Colección de datos, lecturas y alarmas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetVida">
            <summary>
            Obtener la colección de colecciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetVida(Orbita.Comunicaciones.OInfoOPCvida)">
            <summary>
            Asignar la colección de alarmas.
            </summary>
            <param name="vida">Colección de colecciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetAlarmasActivas">
            <summary>
            Obtener la colección de alarmas activas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.GetAlarmasActivas(System.Int32)">
            <summary>
            Obtener el objeto i-esimo de la colección.
            </summary>
            <param name="indice">Clave de la colección.</param>
            <returns>Objeto de tipo InfoDatos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTags.SetAlarmasActivas(System.Collections.ArrayList)">
            <summary>
            Asignar la colección de alarmas activas.
            </summary>
            <param name="alarmasActivas">Colección de alarmas activas.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OTags.HtVida">
            <summary>
            Object = InfoOPCvida.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OTags.Config">
            <summary>
            Configuración.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegramaFactory">
            <summary>
             Define una clase Factory que se utiliza para crear objectos de tipo telegrama.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegramaFactory.CrearTelegrama">
            <summary>
            Crear un nuevo objeto de tipo telegrama.
            </summary>
            <returns>Telegrama.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorErrorEventArgs">
            <summary>
            Almacena información del error que será utilizada por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorErrorEventArgs.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint,System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase ServidorErrorEventArgs.
            </summary>
            <param name="endPoint">Dirección endpoint del servidor para escuchar las conexiones entrantes.</param>
            <param name="ex">Representa los errores que se producen durante la ejecución de una aplicación.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorErrorEventArgs.EndPoint">
            <summary>
            Dirección endpoint del servidor para escuchar las conexiones entrantes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorErrorEventArgs.Excepcion">
            <summary>
            Representa los errores que se producen durante la ejecución de una aplicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion">
            <summary>
            Representa los errores que se producen ante un estado inesperado de comunicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion">
            <summary>
            Representa los errores que se producen durante la ejecución de una comunicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionComunicacion.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionComunicacion con datos serializados.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionComunicacion con un mensaje
            de error especificado.
            </summary>
            <param name="message">Mensaje de error que explica la razón de la excepción.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion.#ctor(System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionComunicacion con una referencia a la excepción 
            interna que representa la causa de esta excepción.
            </summary>
            <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula
            (null) si no se especifica ninguna excepción interna.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion.#ctor(System.String,System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionComunicacion con un mensaje
            de error especificado y una referencia a la excepción interna que representa
            la causa de esta excepción.
            </summary>
            <param name="message">Mensaje de error que explica la razón de la excepción.</param>
            <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula
            (null) si no se especifica ninguna excepción interna.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionEstadoComunicacion.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializar una nueva instancia de la clase ExcepcionEstadoComunicacion con datos serializados.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion.#ctor(System.String)">
            <summary>
            Inicializa una nueva instancia de la clase ExcepcionEstadoComunicacion con un mensaje
            de error especificado.
            </summary>
            <param name="message">Mensaje de error que explica la razón de la excepción.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion.#ctor(System.String,System.Exception)">
            <summary>
            Inicializa una nueva instancia de la clase ExcepcionEstadoComunicacion con un mensaje
            de error especificado y una referencia a la excepción interna que representa
            la causa de esta excepción.
            </summary>
            <param name="message">Mensaje de error que explica la razón de la excepción.</param>
            <param name="innerException">La excepción que es la causa de la excepción actual o una referencia nula
            (null) si no se especifica ninguna excepción interna.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpCliente">
            <summary>
            Esta clase se utiliza para comunicarse con el servidor a través del protocolo Tcp / IP.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases de clientes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ICliente">
            <summary>
            Representa un cliente para conectarse al servidor.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable">
            <summary>
            Representa un cliente conectable a servidores.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.Conectar">
            <summary>
            Conectar al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.Desconectar">
            <summary>
            Desconectar del servidor.
            No hace nada si ya se encuentra desconectado.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.TimeoutConexionMs">
            <summary>
            Timeout para la conexión a un servidor (en milisegundos).
            Valor predeterminado: 15 segundos (15000 ms).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.EndPointLocal">
            <summary>
            Endpoint del cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.EstadoComunicacion">
            <summary>
            Obtener el estado actual de comunicación.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ICliente.EndPointRemoto">
            <summary>
            Endpoint del servidor.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.TimeoutConexionMsPredeterminado">
            <summary>
            Valor timeout predeterminado para la conexión a un servidor en milisegundos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase._canalComunicacion">
            <summary>
            Canal de comunicación que se utiliza por el cliente para enviar y recibir mensajes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase._timerPing">
            <summary>
            Temporizador (timer) que se utiliza para enviar Ping (KeepAlive) al servidor periódicamente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase._telegrama">
            <summary>
            Telegrama de comunicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ClienteBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Conectar">
            <summary>
            Conectar al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Desconectar">
            <summary>
            Desconectar del servidor.
            No hace nada si ya está desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Dispose">
            <summary>
            Dispose de este objeto y cierre de la conexión subyacente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje al servidor.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
            <exception cref="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionEstadoComunicacion">Throws ExcepcionEstadoComunicacion si el cliente no está conectado al servidor.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.CrearCanalComunicacion">
            <summary>
            Este método es implementado por las clases derivadas para crear el canal de comunicación apropiado.
            </summary>
            <returns>Canal de comunicación.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.CanalComunicacion_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.CanalComunicacion_MensajeEnviado(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeEnviado del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.CanalComunicacion_Desconectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Desconectado del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.PingTimer_Elapsed(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Elapsed del objeto _timerPing.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.OnConectado">
            <summary>
            Elevar el evento Conectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.OnDesconectado">
            <summary>
            Elevar el evento Desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.OnMensajeEnviado(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviado.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.EndPointRemoto">
            <summary>
            Endpoint del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.EndPointLocal">
            <summary>
            Endpoint del cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.TimeoutConexionMs">
            <summary>
            Timeout para la conexión a un servidor (en milisegundos).
            Valor predeterminado: 15 segundos (15000 ms).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.EstadoComunicacion">
            <summary>
            Obtener el estado de comunicación del cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteBase.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpCliente.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint)">
            <summary>
            Inicializar una nueva instancia de la clase TcpCliente.
            </summary>
            <param name="endPointRemoto">La dirección endpoint del servidor.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.TcpCliente.CrearCanalComunicacion">
            <summary>
            Crear un canal de comunicación utilizando dirección Ip y puerto del servidor.
            </summary>
            <returns>Canal de comunicación preparado para comunicar.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OConfigDispositivo">
            <summary>
            Configuración del dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OConfigDispositivo.TiempoEsperaLectura">
            <summary>
            Tiempo de espera lectura (segundos).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OConfigDispositivo.TiempoEsperaEscritura">
            <summary>
            Tiempo de espera escritura (segundos).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OConfigDispositivo.TiempoVida">
            <summary>
            Tiempo vida (segundos).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OConfigDispositivo.SegEventoComs">
            <summary>
            Segundos de envío de evento de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeLecturaDatos">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeLecturaDatos.Datos">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsClienteConectable">
            <summary>
            Esta clase proporciona la funcionalidad básica para el cliente conectado al listener.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsClienteConectable">
            <summary>
            Esta clase proporciona la funcionalidad básica para el cliente conectado al listener.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsClienteConectable.Iniciar">
            <summary>
            Iniciar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsClienteConectable.Terminar">
            <summary>
            Terminar los mensajeros.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsClienteConectable.Error">
            <summary>
            Este evento se produce cuando se produce en algunos de los eventos de solicitud.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsClienteConectable._lecturas">
            <summary>
            Colección de mensajes producidos por el cliente a petición de lecturas de variables.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsClienteConectable._escrituras">
            <summary>
            Colección de mensajes producidos por el cliente a petición de escrituras de variables.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsClienteConectable._datos">
            <summary>
            Colección de mensajes producidos por el cliente a petición de lectura de datos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsClienteConectable._alarmasActivas">
            <summary>
            Colección de mensajes producidos por el cliente a petición de lectura de alarmas activas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsClienteConectable._dispositivos">
            <summary>
            Colección de mensajes producidos por el cliente a petición de lectura de dispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsClienteConectable.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.#ctor(Orbita.Utiles.OHashtable)">
            <summary>
            Inicializar una nueva instancia de la clase OcsClienteConectable.
            </summary>
            <param name="dispositivos">Colección de dispositivos conectados.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.Iniciar">
            <summary>
            Iniciar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.Terminar">
            <summary>
            Terminar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnLecturas(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeLectura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje de tipo solicitud de lectura.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnDatos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeLecturaDatos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje de tipo solicitud de datos.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnAlarmasActivas(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeLecturaAlarmasActivas.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje de tipo solicitud de alarmas activas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnDispositivos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeLecturaDispositivos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje de tipo solicitud de alarmas activas.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnEscrituras(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeEscritura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje de tipo solicitud de escritura.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteConectable.OnError(System.Exception)">
            <summary>
            Elevar el evento Error.
            </summary>
            <param name="ex">Representa los errores que se producen durante la ejecución de una aplicación.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsClienteConectable.Error">
            <summary>
            Este evento se produce cuando se produce en algunos de los eventos de solicitud.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsClienteConectable.Dispositivos">
            <summary>
            Colección de dispositivos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivoClienteOPC">
            <summary>
            OLE for Process Control de Siemens.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.MAXREINTENTOSERRORCOMM">
            <summary>
            Máximo número de reintentos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.LOCALE_ID">
            <summary>
            Local para inglés.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC._hilos">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC._sincronizacion">
            <summary>
            Atributo de sincronización en las
            lecturas y escrituras asíncronas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC._tags">
            <summary>
            Atributo que indica las  colecciones
            de tags de datos, lecturas y alarmas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC._enlaces">
            <summary>
            Enlaces
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.pIOPCServer">
            <summary>
            OPC.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.pIOPCAsyncIO2Datos">
            <summary>
            Puntero para IO asincrono de datos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.pIConnectionPointContainerLecturas">
            <summary>
            Puntero para IO asincrono de lecturas.
            </summary>      
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoClienteOPC.pIConnectionPointContainerAlarmas">
            <summary>
            Puntero para IO asincrono de alarmas.
            </summary>            
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.#ctor(Orbita.Comunicaciones.OTags,Orbita.Utiles.OHilos,Orbita.Comunicaciones.ODispositivo)">
            <summary>
            Inicializar una nueva instancia de la clase SiemensOPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Iniciar">
            <summary>
            Inicializar grupos, punteros e items.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Leer(System.String[],System.Boolean)">
            <summary>
            Leer el valor de las descripciones de variables de la colección bajo demanda.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica que la demanda de datos leidos es directa.</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Escribir(System.String[],System.Object[])">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Escribir(System.String[],System.Object[],System.String)">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.GetAlarmasActivas">
            <summary>
            Devuelva las alarmas alctivas del sistemas
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.GetDatos">
            <summary>
            Devuelve los datos del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.GetLecturas">
            <summary>
            Devuelve las lectuas del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.GetAlarmas">
            <summary>
            Devuelve las alarmas del dipositivo y su valor
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Dispose(System.Boolean)">
            <summary>
            Elimina los elementos de memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicGrupoDatosOPC">
            <summary>
            Inicialización de grupo de datos OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicGrupoLecturasOPC">
            <summary>
            Inicialización de grupo de lecturas OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicGrupoAlarmasOPC">
            <summary>
            Inicialización de grupo de alarmas OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicReqIOInterfacesDatos">
            <summary>
            Inicialización del puntero de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicReqIOInterfacesLecturas">
            <summary>
            Inicialización del puntero de lecturas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicReqIOInterfacesAlarmas">
            <summary>
            Inicialización del puntero de alarmas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.SetItemsDatos">
            <summary>
            Asignar items de datos al grupo de datos OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.SetItemsLecturas">
            <summary>
            Asignar items de lecturas al grupo de lecturas OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.SetItemsAlarmas">
            <summary>
            Asignar items de alarmas al grupo de alarmas OPC.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicHiloVida">
            <summary>
            Inicialización del hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.InicTareasEstado">
            <summary>
            Inicialización del hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.ProcesarHiloVida">
            <summary>
            Proceso del hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.ProcesarHiloEstado">
            <summary>
            Proceso del hilo de vida.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.ActualizarCalidadVariables">
            <summary>
            Pone a cero la calidad de todas las variables. Se llama desde los catch de las lecturas y escrituras
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Read(System.Int32[],System.Int32)">
            <summary>
            Lecturas asíncronas.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="trans">Id de transacción.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Write(System.Int32[],System.Object[])">
            <summary>
            Escritura asíncrona.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Leer(System.Int32[])">
            <summary>
            Leer el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.Leer(System.String[])">
            <summary>
            Leer el valor de las descripciones de variables de la colección
            a partir del valor de la colección de datos DB actualiza  en el
            proceso del hilo vida.
            </summary>
            <param name="variables">Colección de variables.</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.IniciaStringsLocales">
            <summary>
            inicializa los string locales
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.ActualizarAlarmas">
            <summary>
            Actualizar de la colección de datos los tipo alarmas.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.GetQuality(System.Int64)">
            <summary>
            Obtener calidad.
            </summary>
            <param name="wQuality">Calidad.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.OnDataChange(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Object[],System.Int16[],OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            Callback IOPCDataCallback OnDataChange   implementación del
            manejador de evento. Este evento es llamado por el servidor
            OPC cuando un dato cambio de valor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.OnReadComplete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Object[],System.Int16[],OpcRcw.Da.FILETIME[],System.Int32[])">
            <summary>
            Callback IOPCDataCallback OnReadComplete implementación del
            manejador de evento. Este evento es llamado por el servidor
            OPC cuando se completa la lectura asíncrona.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.OnWriteComplete(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Callback IOPCDataCallback OnWriteComplete implementación del
            manejador de evento. Este evento es llamado por el servidor
            OPC cuando se completa la escritura asincrona.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoClienteOPC.OnCancelComplete(System.Int32,System.Int32)">
            <summary>
            Callback IOPCDataCallback OnCancelComplete implementación del
            manejador de evento.
            </summary>
            <param name="dwTransid"></param>
            <param name="hGroup"></param>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoClienteOPC.Datos">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoClienteOPC.Lecturas">
            <summary>
            Colección de lecturas.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoClienteOPC.Alarmas">
            <summary>
            Colección de alarmas.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.ODispositivoClienteOPC.AlarmasActivas">
            <summary>
            Colección de alarmas activas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.TelegramaManager">
            <summary>
            Esta clase se utiliza para obtener los telegramas predeterminados.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.TelegramaManager.GetTelegramaFactoryPredeterminado">
            <summary>
            Crear un telegrama predeterminado que se utilizará en la comunicación de las solicitudes.
            </summary>
            <returns>Nueva instancia de telegrama predeterminada.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.TelegramaManager.GetTelegramaPredeterminado">
            <summary>
            Crear un telegrama predeterminado que se utilizará en la comunicación de las solicitudes.
            </summary>
            <returns>Nueva instancia de telegrama predeterminada.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.TcpServidor">
            <summary>
            Esta clase se utiliza para crear un servidor Tcp.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases servidor.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor">
            <summary>
            Representa un servidor que se utiliza para aceptar y gestionar las conexiones de clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.Iniciar">
            <summary>
            Iniciar el servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.Parar">
            <summary>
            Parar el servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.Conectado">
            <summary>
            Este evento se produce cuando se establece la escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.Desconectado">
            <summary>
            Este evento se produce cuando se cierra el agente de escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.ClienteConectado">
            <summary>
            Este evento se produce cuando un nuevo cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.ClienteDesconectado">
            <summary>
            Este evento se produce cuando un cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.ErrorConexion">
            <summary>
            Este evento se produce cuando un cliente no puede conectar al servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.TelegramaFactory">
            <summary>
            Obtener/establecer el TelegramaFactory para crear objectos ITelegrama.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.Clientes">
            <summary>
            Colección de clientes que están conectados al servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.ReConexion">
            <summary>
            Flag que permite establecer la reconexión de escuchas si se produce una excepción en el proceso de escucha.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor.EndPoint">
            <summary>
            Dirección endpoint del servidor para escuchar las conexiones entrantes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase._listener">
            <summary>
            Este objeto se utiliza para escuchar (listener) conexiones entrantes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ServidorBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Iniciar">
            <summary>
            Iniciar el servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Parar">
            <summary>
            Parar el servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Broadcast(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje a todos los clientes conectados.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.CrearListener">
            <summary>
            Este método es implementado por las clases derivadas para crear un oyente (listener) 
            que escucha las solicitudes de petición de conexiones entrantes.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Listener_Escuchando(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Escuchando.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Listener_NoEscuchando(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento NoEscuchando.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Listener_ErrorConexion(System.Object,System.IO.ErrorEventArgs)">
            <summary>
            Manejador del evento ErrorConexion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Listener_CanalComunicacionConectado(System.Object,Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionEventArgs)">
            <summary>
            Manejador del evento CanalComunicacionConectado.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">CanalComunicacionEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Cliente_Conectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Conectado para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Cliente_Desconectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Desconectado para todos los clientes conectados.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.OnConectado">
            <summary>
            Elevar el evento Conectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.OnDesconectado">
            <summary>
            Elevar el evento Desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.OnClienteConectado(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente)">
            <summary>
            Elevar el evento ClienteConectado.
            </summary>
            <param name="cliente">Cliente conectado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.OnClienteDesconectado(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente)">
            <summary>
            Elevar el evento ClienteDesconectado.
            </summary>
            <param name="cliente">Cliente desconectado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.OnErrorConexion(System.Exception)">
            <summary>
            Elevar el evento ErrorConexion.
            </summary>
            <param name="ex">Representa los errores que se producen durante la ejecución de una aplicación.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Conectado">
            <summary>
            Este evento se produce cuando se establece la escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Desconectado">
            <summary>
            Este evento se produce cuando se cierra el agente de escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.ClienteConectado">
            <summary>
            Este evento se produce cuando se conecta un nuevo cliente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.ClienteDesconectado">
            <summary>
            Este evento se produce cuando un cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.ErrorConexion">
            <summary>
            Este evento se produce cuando un cliente no puede conectar al servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.TelegramaFactory">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.Clientes">
            <summary>
            Colección de clientes que están conectados al servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.ReConexion">
            <summary>
            Flag que permite establecer la reconexión de escuchas si se produce una excepción en el proceso de escucha.
            Establecer el valor previo a Iniciar(...) el servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorBase.EndPoint">
            <summary>
            Dirección endpoint del servidor para escuchar las conexiones entrantes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.TcpServidor.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint)">
            <summary>
            Inicializar una nueva instancia de la clase TcpServidor.
            </summary>
            <param name="endPoint">Dirección endpoint del servidor para escuchar las conexiones entrantes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.TcpServidor.CrearListener">
            <summary>
            Crear un listener Tcp.
            </summary>
            <returns>TcpListener.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeInfoDato">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeInfoDato.InfoDato">
            <summary>
            Información de dato del servidor de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsServidor">
            <summary>
            Esta clase proporciona la funcionalidad básica para el cliente conectado al listener.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsServidor">
            <summary>
            Representa un servidor que se utiliza para aceptar y gestionar las conexiones de clientes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeroServidor">
            <summary>
            Representa un objeto que puede enviar y recibir mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroServidor.CambioDato(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Enviar un mensaje de tipo cambio de dato a la aplicación remota.
            </summary>
            <param name="infoDato">Información del dato que se está transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroServidor.Alarma(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Enviar un mensaje de tipo alarma a la aplicación remota.
            </summary>
            <param name="infoDato">Información del dato que se está transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroServidor.Comunicaciones(Orbita.Comunicaciones.OEstadoComms)">
            <summary>
            Enviar un mensaje de tipo estado de las comunicaciones a la aplicación remota.
            </summary>
            <param name="estadoComm">Información del estado de las comunicaciones que se están transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsServidor.Iniciar">
            <summary>
            Iniciar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsServidor.Terminar">
            <summary>
            Terminar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsServidor.Añadir(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor)">
            <summary>
            Añadir un listener a la colección.
            </summary>
            <param name="listener">Listener que se utiliza para aceptar y gestionar las conexiones de clientes.</param>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsServidor._listeners">
            <summary>
            Colección de listeners.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsServidor._cambioDato">
            <summary>
            Colección de datos producidos en el evento cambioDato.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsServidor._alarmas">
            <summary>
            Colección de datos producidos en el evento alarma.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsServidor._comunicaciones">
            <summary>
            Colección de datos producidos en el evento comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsServidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.#ctor(System.Data.DataTable)">
            <summary>
            Inicializar una nueva instancia de la clase OcsServidor.
            </summary>
            <param name="variables">Colección de variables.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.Iniciar">
            <summary>
            Iniciar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.Terminar">
            <summary>
            Terminar los mensajeros.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.Añadir(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidor)">
            <summary>
            Añadir un listener a la colección.
            </summary>
            <param name="listener">Listener que se utiliza para aceptar y gestionar las conexiones de clientes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.CambioDato(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Enviar un mensaje de tipo cambio de dato a la aplicación remota.
            </summary>
            <param name="infoDato">Información del dato que se está transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.Alarma(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Enviar un mensaje de tipo alarma a la aplicación remota.
            </summary>
            <param name="infoDato">Información del dato que se está transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.Comunicaciones(Orbita.Comunicaciones.OEstadoComms)">
            <summary>
            Enviar un mensaje de tipo estado de las comunicaciones a la aplicación remota.
            </summary>
            <param name="estadoComm">Información del estado de las comunicaciones que se están transmitiendo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.OnCambioDato(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeCambioDato.
            </summary>
            <param name="infoDato">Contiene información del dato que provocó el evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.OnAlarmas(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeAlarma.
            </summary>
            <param name="infoDato">Contiene información del dato que provocó el evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsServidor.OnComunicaciones(Orbita.Comunicaciones.OEstadoComms)">
            <summary>
            Evento producido por el manejador MensajeRecibido para mensajes de tipo OcsMensajeComunicaciones.
            </summary>
            <param name="estadoComm">Contiene información del estado de comunicaciones que provocó el evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsServidor.Variables">
            <summary>
            Colección de variables.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.DispositivoEscrituras">
            <summary>
            Dispositivo de escrituras.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.DispositivoEscrituras.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase DispositivoEscrituras.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.DispositivoEscrituras.#ctor(System.String[],System.Object[])">
            <summary>
            Inicializar una nueva instancia de la clase DispositivoEscrituras.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.DispositivoEscrituras.Variables">
            <summary>
            Colección de variables.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.DispositivoEscrituras.Valores">
            <summary>
            Colección de valores.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.MensajeTexto">
            <summary>
            Este mensaje se utiliza para enviar/recibir una cadena de texto como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeTexto.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase MensajeTexto.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeTexto.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeTexto.
            </summary>
            <param name="texto">Mensaje de texto que será transmitido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeTexto.#ctor(System.String,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeTexto.
            </summary>
            <param name="texto">Mensaje de texto que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeTexto.ToString">
            <summary>
            Invalida el método ToString() para devolver una cadena que representa la instancia de objeto.
            </summary>
            <returns>Una cadena (string) que representa este objeto.</returns>
        </member>
        <member name="P:Orbita.Comunicaciones.MensajeTexto.Texto">
            <summary>
            El texto del mensaje que se está transmitiendo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeroSincronizado">
            <summary>
            Representa un objeto que puede enviar y recibir mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroSincronizado.Leer(System.Int32,System.String[],System.Boolean,System.Int32)">
            <summary>
            Leer la colección de valores de variables demandadas en el dispositivo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroSincronizado.LeerDatos(System.Int32,System.Int32)">
            <summary>
            Leer la colección de datos del dispositivo especificado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroSincronizado.LeerAlarmasActivas(System.Int32,System.Int32)">
            <summary>
            Leer la colección de alarmas activas del dispositivo especificado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroSincronizado.LeerDispositivos(System.Int32)">
            <summary>
            Leer la colección de dispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajeroSincronizado.Escribir(System.Int32,System.String[],System.Object[],System.String,System.Int32)">
            <summary>
            Escribir la colección de valores de variables en el dispositivo identificando el canal.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeEnviadoLectura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeEnviadoLecturaDatos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeEnviadoLecturaAlarmasActivas">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de alarmas activas.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeEnviadoLecturaDispositivos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de dispositivos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeEnviadoEscritura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de escritura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeRecibidoCambioDato">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeRecibidoAlarma">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajeroSincronizado.MensajeRecibidoComunicaciones">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion">
            <summary>
            Esta clase se utiliza para escuchar (listener) y aceptar peticiones de conexiones entrantes de clientes, en un puerto Tcp.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases de escucha (listener) de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener">
            <summary>
            Representa una escucha de comunicaciones.
            Una conexión oyente (listener) se utiliza para aceptar peticiones de conexión entrantes de clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.Iniciar">
            <summary>
            Iniciar la escucha de peticiones de conexiones entrantes de clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.Terminar">
            <summary>
            Terminar la escucha de peticiones de conexiones entrantes de clientes.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.Escuchando">
            <summary>
            Este evento se produce cuando se establece la escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.NoEscuchando">
            <summary>
            Este evento se produce cuando se cierra el agente de escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.ErrorConexion">
            <summary>
            Este evento se produce cuando se produce un error de conexión.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.CanalComunicacionConectado">
            <summary>
            Este evento se produce cuando se conecta un nuevo canal de comunicación. Es decir,
            cuando un nuevo cliente acepta una comunicación de escucha.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.IListener.ReConexion">
            <summary>
            Flag que permite establecer la reconexión de escuchas si se produce una excepción en el proceso de escucha.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.Iniciar">
            <summary>
            Iniciar la escucha de peticiones de conexiones entrantes de clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.Terminar">
            <summary>
            Terminar la escucha de peticiones de conexiones entrantes de clientes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.OnEscuchando">
            <summary>
            Elevar el evento Escuchando.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.OnNoEscuchando">
            <summary>
            Elevar el evento NoEscuchando.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.OnErrorConexion(System.Exception)">
            <summary>
            Elevar el evento ErrorConexion.
            </summary>
            <param name="ex">Representa los errores que se producen durante la ejecución de una aplicación.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.OnCanalComunicacionConectado(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion)">
            <summary>
            Elevar el evento CanalComunicacionConectado.
            </summary>
            <param name="cliente">Cliente que establece el canal de comunicación.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.Escuchando">
            <summary>
            Este evento se produce cuando se establece la escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.NoEscuchando">
            <summary>
            Este evento se produce cuando se cierra el agente de escucha de conexiones entrantes con éxito.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.ErrorConexion">
            <summary>
            Este evento se produce cuando se produce un error de conexión.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.CanalComunicacionConectado">
            <summary>
            Este evento se produce cuando se conecta un nuevo canal de comunicación. Es decir,
            cuando un nuevo cliente acepta una comunicación de escucha.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.ListenerBase.ReConexion">
            <summary>
            Flag que permite establecer la reconexión de escuchas si se produce una excepción en el proceso de escucha.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion._endPoint">
            <summary>
            La dirección endpoint del servidor para escuchar las peticiones de conexiones entrantes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion._socketListener">
            <summary>
            Socket del lado del servidor (TcpListener) para escuchar peticiones de conexiones entrantes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion._thread">
            <summary>
            Hilo (thread) del proceso de escucha.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion._iniciado">
            <summary>
            Flag para el control de funcionamiento del hilo (thread).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint)">
            <summary>
            Inicializar una nueva instancia de la clase TcpListenerConexion.
            </summary>
            <param name="endPoint">La dirección endpoint del servidor para escuchar las conexiones entrantes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.Iniciar">
            <summary>
            Iniciar el proceso (thread) de escucha de peticiones de conexiones entrantes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.Terminar">
            <summary>
            Terminar la escucha de peticiones de conexiones entrantes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.Escuchar">
            <summary>
            Iniciar la escucha de peticiones de conexiones entrantes (new TcpListener).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.NoEscuchar">
            <summary>
            Cerrar el agente de escucha.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Listener.TcpListenerConexion.ProcesoEscucha">
            <summary>
            Proceso de entrada del hilo (thread).
            Este método es utilizado por el hilo (thread) para escuchar peticiones de conexiones entrantes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeLectura">
            <summary>
            Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeLectura.Demanda">
            <summary>
            Indica si la lectura se realiza bajo demanda al dispositivo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeComunicaciones">
            <summary>
            Este mensaje se utiliza para enviar/recibir un objeto de tipo OEstadoComms como mensaje de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeComunicaciones">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeComunicaciones.InfoComm">
            <summary>
            Información del estado del servidor de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeComunicaciones.#ctor(Orbita.Comunicaciones.OEstadoComms)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeComunicaciones.
            </summary>
            <param name="infoComm">Información del estado de comunicaciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeComunicaciones.#ctor(Orbita.Comunicaciones.OEstadoComms,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeComunicaciones.
            </summary>
            <param name="infoComm">Información del estado de comunicaciones.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeComunicaciones.InfoComm">
            <summary>
            Información del estado de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivoMCUSB">
            <summary>
            Dispositivo de ES de MCC
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._qEntradaSalida">
            <summary>
            Cola de recepción de tramas de datos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._eReset">
            <summary>
            Evento reset de recepción de tramas KeepAlive.
            Entrada/Salida.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._almacenLecturas">
            <summary>
            Colección para la búsqueda de lecturas. La clave es la dupla "dirección-bit"
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._numLecturas">
            <summary>
            Número de lecturas a realizar
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._numeroBytesEntradas">
            <summary>
            Número de bytes de entradas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._numeroBytesSalidas">
            <summary>
            Número de bytes de salidas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._lecturas">
            <summary>
            Valor de las lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._lecturasContinuas">
            <summary>
            Valor de las lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._registroInicialSalidas">
            <summary>
            Valor inicial del registro de escrituras
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoMCUSB._daqBoard">
            <summary>
            tarjeta ES
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.#ctor(Orbita.Comunicaciones.OTags,Orbita.Utiles.OHilos,Orbita.Comunicaciones.ODispositivo)">
            <summary>
            Inicializar una nueva instancia de la clase ODispositivoMCUSB.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.ProcesarHiloVida">
            <summary>
            Procesa las lecturas del dispositivo
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.Leer(System.String[],System.Boolean)">
            <summary>
            Leer el valor de las descripciones de variables de la colección
            a partir del valor de la colección de datos DB actualiza  en el
            proceso del hilo vida.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se ejecuta sobre el dispositivo</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.Escribir(System.String[],System.Object[])">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.IniciarObjetos">
            <summary>
            Establece el valor inicial de los objetos
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.ProcesarByte(System.Byte,System.Int32,System.Int32)">
            <summary>
            Procesa los bits poniendo a 1 o 0 el bit correspondiente
            </summary>
            <param name="valor"></param>
            <param name="bit"></param>
            <param name="valorBit"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.EsEncolar(System.Byte[])">
            <summary>
            Método que encola trama GateData.
            </summary>
            <param name="trama"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.EsDesencolar">
            <summary>
            Método que desencola trama GateData.
            </summary>
            <returns>Objeto GateData</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.EsProcesarHilo">
            <summary>
            Hilo de proceso de ES
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.EsProcesar(System.Byte[])">
            <summary>
            Procesa los bytes de entradas y salidas para actualizar los valores de las variables
            </summary>
            <param name="mensaje">byte de entradas recibido</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoMCUSB.EsActualizarVariables(System.Byte,System.Int32)">
            <summary>
            Actualiza los valores de las entradas y genera los eventos de cambio de dato y alarma
            </summary>
            <param name="valor">valor del byte</param>
            <param name="posicion">posición del byte</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeInfoDatoEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeInfoDatoEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeInfoDato)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeInfoDatoEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeInfoDatoEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDatosEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDatosEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeLecturaDatos)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeDatosEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaDatosEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting">
            <summary>
            Interfaz para la generación de comunicaciones remotas
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaConectar(System.String,System.Boolean)">
            <summary>
            Método de conexión entre procesos.
            </summary>
            <param name="ip">Dirección Ip de conexión.</param>
            <param name="estado">Estado de la máquina; conectado, desconectado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaEscribir(System.Int32,System.String[],System.Object[])">
            <summary>
            Método de escritura de valores.
            </summary>
            <param name="dispositivo">Identificador de dispositivo de escritura.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <returns>Estado correcto o incorrecto de escritura.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaEscribir(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Método de escritura de valores.
            </summary>
            <param name="dispositivo">Identificador de dispositivo de escritura.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns>Estado correcto o incorrecto de escritura.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaLeer(System.Int32,System.String[],System.Boolean)">
            <summary>
            Método de lectura de variables.
            </summary>
            <param name="dispositivo">Identificador de dispositivo de lectura.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
            <returns>Colección de resultados.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetDatos(System.Int32)">
            <summary>
            Obtener la colección de datos, lecturas y alarmas.
            </summary>
            <returns>Colección de datos, lecturas y alarmas.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetLecturas(System.Int32)">
            <summary>
            Obtener la colección de lecturas.
            </summary>
            <returns>Colección de lecturas.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetAlarmas(System.Int32)">
            <summary>
            Obtener la colección de alarmas.
            </summary>
            <returns>Colección de alarmas.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetAlarmasActivas(System.Int32)">
            <summary>
            Obtener la colección de alarmas.
            </summary>
            <returns>Colección de alarmas.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetDispositivos">
            <summary>
            Obtener los dispositivos del servicio
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.IOCommRemoting.OrbitaGetDispositivosXML">
            <summary>
            Obtener los dispositivos del servicio
            </summary>
            <returns></returns>
        </member>
        <member name="E:Orbita.Comunicaciones.IOCommRemoting.OrbitaCambioDato">
            <summary>
            Evento de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOCommRemoting.OrbitaAlarma">
            <summary>
            Evento de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOCommRemoting.OrbitaComm">
            <summary>
            Evento de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting1">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting2">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting3">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting4">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting5">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting6">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting7">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting8">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting9">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting10">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting11">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting12">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting13">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting14">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting15">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOCommRemoting16">
            <summary>
            Interfaz para la generación de comunicaciones remotas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente">
            <summary>
            Representa un cliente desde la perspectiva de un servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.Desconectar">
            <summary>
            Desconectar del servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.IdentificadorAutoincremental">
            <summary>
            Identificador único para este cliente en el servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.EndPointRemoto">
            <summary>
             Obtener el endpoint del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente.EstadoComunicacion">
            <summary>
            Obtener el estado de la comunicación actual.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolo">
            <summary>
            Clase base para los protocolos
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolo.Disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolo.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolo.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolo.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloTCPPhoenixES">
            <summary>
            Protocolo para los dispositivos phoenix
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloTCPPhoenixES._registroInicialEntradas">
            <summary>
            Valor inicial del registro de lecturas
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloTCPPhoenixES._registroInicialSalidas">
            <summary>
            Valor inicial del registro de escrituras
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloTCPPhoenixES._tamanyoEntradas">
            <summary>
            Número de lecturas a realizar
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloTCPPhoenixES._tamanyoSalidas">
            <summary>
            Número de escrituras a realizar
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructor para el protocolo phoenix
            </summary>
            <param name="regIniEntradas"></param>
            <param name="byteEntradas"></param>
            <param name="regIniSalidas"></param>
            <param name="byteSalidas"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.Finalize">
            <summary>
            Destructor de clase
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.KeepAliveEnviar">
            <summary>
            Prepara el mensaje KeepAlive de respuesta.
            </summary>
            <returns>mensaje de respuesta</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.KeepAliveProcesar(System.Byte[],System.Byte[]@)">
            <summary>
            Procesa el mensaje KeepAlive del dispositivo.
            </summary>
            <param name="valor">valor recibido por el dispositivo</param>
            <param name="lecturas">lecturas procesadas</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.ESprocesar(System.Byte[],System.Byte[]@,System.Byte[]@)">
            <summary>
            Procesa el mensaje de ES del PLC
            </summary>
            <param name="valor"></param>
            <param name="entradas"></param>
            <param name="salidas"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.SalidasEnviar(System.Byte[])">
            <summary>
            Prepara el mensaje KeepAlive de respuesta.
            </summary>
            <returns>mensaje de respuesta</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloTCPPhoenixES.Dispose(System.Boolean)">
            <summary>
            Limpia objetos de memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLectura">
            <summary>
            Este mensaje se utiliza para enviar/recibir un array de bytes como mensaje de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaBase.#ctor(System.Int32,System.String[],System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaBase.#ctor(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaBase.Demanda">
            <summary>
            Indica si la lectura se realiza bajo demanda al dispositivo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLectura.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLectura.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLectura.#ctor(System.Int32,System.String[],System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLectura.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLectura.#ctor(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLectura.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeErrorEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeErrorEventArgs.#ctor(Orbita.Comunicaciones.IMensaje,System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeErrorEventArgs.
            </summary>
            <param name="mensaje">Mensaje que ha producido el error.</param>
            <param name="error">Representa el error que se produce durante la ejecución de una aplicación.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeErrorEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeLecturaAlarmasActivas">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeLecturaAlarmasActivas.Datos">
            <summary>
            Colección de datos de alarmas activas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasBase.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaAlarmasActivasBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasBase.#ctor(System.Int32,System.Collections.ArrayList,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaAlarmasActivasBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos que contienen las alarmas activas.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasBase.Dispositivo">
            <summary>
            Dispositivo de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivasBase.Datos">
            <summary>
            Colección de datos que contienen las alarmas activas.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OBroadcastEventWrapper">
            <summary>
            Elemento para la generación de eventos por remoting
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OBroadcastEventWrapper.OnCambioDato(Orbita.Utiles.OEventArgs)">
            <summary>
            Evento de cambio de dato.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OBroadcastEventWrapper.OnAlarma(Orbita.Utiles.OEventArgs)">
            <summary>
            Evento de alarma.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OBroadcastEventWrapper.OnComm(Orbita.Utiles.OEventArgs)">
            <summary>
            Evento de comunicaciones.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OBroadcastEventWrapper.OrbitaCambioDato">
            <summary>
            Evento de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OBroadcastEventWrapper.OrbitaAlarma">
            <summary>
            Evento de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OBroadcastEventWrapper.OrbitaComm">
            <summary>
            Evento de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajero">
            <summary>
            Representa un objeto que puede enviar y recibir mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajero.Leer(System.Int32,System.String[],System.Boolean)">
            <summary>
            Leer la colección de valores de variables.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajero.LeerDatos(System.Int32)">
            <summary>
            Leer la colección de datos del dispositivo especificado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajero.LeerAlarmasActivas(System.Int32)">
            <summary>
            Leer la colección de alarmas activas del dispositivo especificado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajero.LeerDispositivos">
            <summary>
            Leer la colección de dispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsMensajero.Escribir(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Escribir la colección de valores de variables en el dispositivo identificando el canal.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeEnviadoLectura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeEnviadoLecturaDatos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeEnviadoLecturaAlarmasActivas">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura alarmas activas.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeEnviadoLecturaDispositivos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de dispositivos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeEnviadoEscritura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de escritura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoCambioDato">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoAlarma">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoComunicaciones">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de comunicaciones.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoLectura">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoLecturaDatos">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoLecturaAlarmasActivas">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de alarmas activas.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoLecturaDispositivos">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de dispositivos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsMensajero.MensajeRecibidoEscritura">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de escritura de variables.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsCliente">
            <summary>
            Representa un cliente para conectarse al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsCliente.Conectar">
            <summary>
            Conectar al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsCliente.Desconectar">
            <summary>
            Desconectar del servidor.
            No hace nada si ya se encuentra desconectado.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsCliente.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsCliente.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsCliente.EstadoComunicacion">
            <summary>
            Obtener el estado actual de comunicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsCliente">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases de clientes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsCliente._cliente">
            <summary>
            Representa un cliente para conectarse a un servidor.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsCliente._periodoReConexionMs">
            <summary>
            Período de reconexión del cliente (opcional, en milisegundos).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsCliente.MensajesEntrantesCambioDato">
            <summary>
            Estructura que procesa los mensajes recibidos de cambio de dato de forma secuencial.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsCliente.MensajesEntrantesAlarma">
            <summary>
            Estructura que procesa los mensajes recibidos de alarma de forma secuencial.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsCliente.MensajesEntrantesComunicaciones">
            <summary>
            Estructura que procesa los mensajes recibidos de comunicaciones de forma secuencial.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsCliente con la dirección Ip local (127.0.0.1)
            del servidor.
            </summary>
            <param name="puertoTcpRemoto">Puerto Tcp de escucha del servidor remoto.</param>
            <param name="periodoReConexionMs">Período de reconexión del cliente (opcional, en milisegundos).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsCliente.
            </summary>
            <param name="direccionIpRemoto">Dirección IP del servidor remoto.</param>
            <param name="puertoTcpRemoto">Puerto Tcp de escucha del servidor remoto.</param>
            <param name="periodoReConexionMs">Período de reconexión del cliente (opcional, en milisegundos).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Conectar">
            <summary>
            Conectar al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Desconectar">
            <summary>
            Desconectar del servidor.
            No hace nada si ya se encuentra desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.LeerDatos(System.Int32)">
            <summary>
            Leer la colección de datos del dispositivo especificado.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Leer(System.Int32,System.String[],System.Boolean)">
            <summary>
            Leer la colección de valores de variables demandadas en el dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.LeerAlarmasActivas(System.Int32)">
            <summary>
            Leer la colección de alarmas activas del dispositivo especificado.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.LeerDispositivos">
            <summary>
            Leer la colección de dispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Escribir(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Escribir el valor indicado de las variables en el dispositivo asociado indicando el canal.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal">Identificador de canal.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Cliente_Conectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Conectado para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Cliente_Desconectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Desconectado para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Cliente_MensajeEnviado(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeEnviado para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.Cliente_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnConectado">
            <summary>
            Elevar el evento Conectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnDesconectado">
            <summary>
            Elevar el evento Desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeEnviadoLectura(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviadoLectura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeEnviadoLecturaDatos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviadoLecturaDatos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeEnviadoLecturaAlarmasActivas(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviadoLecturaAlarmasActivas.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeEnviadoLecturaDispositivos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviadoLecturaDispositivos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeEnviadoEscritura(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviadoEscritura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoCambioDato(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoCambioDato.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoAlarma(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoAlarma.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoComunicaciones(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoComunicaciones.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoLectura(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoLectura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoLecturaDatos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoLecturaDatos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoLecturaAlarmasActivas(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoLecturaAlarmasActivas.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoLecturaDispositivos(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoLecturaDispositivos.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsCliente.OnMensajeRecibidoEscritura(System.Object,Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibidoEscritura.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeEnviadoLectura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeEnviadoEscritura">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de escritura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeEnviadoLecturaDatos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeEnviadoLecturaAlarmasActivas">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de alarmas activas.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeEnviadoLecturaDispositivos">
            <summary>
            Este evento se produce cuando se envia un nuevo mensaje de lectura de dispositivos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoCambioDato">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de cambio de dato.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoAlarma">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de alarma.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoComunicaciones">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de comunicaciones.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoLectura">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoEscritura">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de escritura de variables.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoLecturaDatos">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoLecturaAlarmasActivas">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de alarmas activas.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsCliente.MensajeRecibidoLecturaDispositivos">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje de lectura de dispositivos.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsCliente.Cliente">
            <summary>
            Representa un cliente para conectarse al servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsCliente.EstadoComunicacion">
            <summary>
            Estados de la comunicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OConfiguracionPuertoRS">
            <summary>
            Clase que encapsula la configuraciñon del puerto serie RS232.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OConfiguracionPuerto">
            <summary>
            Implementa una clase abstacta con la configuración de un puerto de comunicaciones.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.NumeroPuerto">
            <summary>
            Identificador de puerto
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.Velocidad">
            <summary>
            Velocidad del puerto en baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.BitsDatos">
            <summary>
            Bits de datos para la comunicación serie
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.Paridad">
            <summary>
            Paridad para la comunicación serie
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.BitsStop">
            <summary>
            Bits de stop para la comunicación serie
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OConfiguracionPuertoRS.Handshake">
            <summary>
            Handshake para la comunicación serie
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OConfiguracionPuertoRS.#ctor">
            <summary>
            Constructor con la configuración por defecto
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OConfiguracionPuertoRS.#ctor(System.Int32,System.Int32,System.Int32,Orbita.Comunicaciones.OParidades,Orbita.Comunicaciones.OBitsStop,Orbita.Comunicaciones.OHandShakes)">
            <summary>
            Constructor con la configuración pasada por argumento
            </summary>
            <param name="numeroPuerto">Número de puertto</param>
            <param name="velocidad">Velocidad del puerto</param>
            <param name="bitsDatos">Número de bits de datos del puerto</param>
            <param name="paridad">Paridad del puerto</param>
            <param name="bitsStop">Número de bits de parada del puerto</param>
            <param name="handShakes">Control de flujo del puerto</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OVelocidad">
            <summary>
            Enumera las posibles velocidades para el puerto serie RS232.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds110">
            <summary>
            110 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds300">
            <summary>
            300 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds1200">
            <summary>
            1200 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds2400">
            <summary>
            2400 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds4800">
            <summary>
            4800 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds9600">
            <summary>
            9600 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds19200">
            <summary>
            19200 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds38400">
            <summary>
            38400 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds57600">
            <summary>
            57600 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds115200">
            <summary>
            115200 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds230400">
            <summary>
            230400 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds460800">
            <summary>
            460800 baudios
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OVelocidad.bds921600">
            <summary>
            921600 baudios
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OBitsDatos">
            <summary>
            Enumera las posibles opciones de bits de datos para el puerto serie RS232.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsDatos.b5">
            <summary>
            5 bits
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsDatos.b6">
            <summary>
            6 bits
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsDatos.b7">
            <summary>
            7 bits
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsDatos.b8">
            <summary>
            8 bits
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OParidades">
            <summary>
            Enumera las posibles paridades para el puerto serie RS232.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OParidades.Ninguna">
            <summary>
            Ninguna
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OParidades.Par">
            <summary>
            Par
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OParidades.Impar">
            <summary>
            Impar
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OParidades.Marca">
            <summary>
            Marca
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OParidades.Espacio">
            <summary>
            Espacio
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OBitsStop">
            <summary>
            Enumera las posibles opciones de bits de parada para el puerto serie RS232.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsStop.Uno">
            <summary>
            Uno
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsStop.UnoYMedio">
            <summary>
            Uno y medio
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OBitsStop.Dos">
            <summary>
            Dos
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OHandShakes">
            <summary>
            Enumera las posibles opciones del control de flujo de parada para el puerto serie RS232.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OHandShakes.Ninguno">
            <summary>
            Ninguno
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OHandShakes.XonXoff">
            <summary>
            Ninguno
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OHandShakes.CtsRts">
            <summary>
            CtsRts
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OHandShakes.DsrDtr">
            <summary>
            DsrDtr
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegrama">
            <summary>
            Representa un protocolo de comunicación a nivel de bytes entre aplicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegrama.GetBytes(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Serializa un mensaje a una matriz de bytes para enviar a la aplicación remota.
            Este método está sincronizado. Por lo tanto, sólo un hilo lo puede llamar al mismo tiempo.
            </summary>
            <param name="mensaje">Mensaje que será serializado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegrama.CrearMensajes(System.Byte[])">
            <summary>
            Genera mensajes de una matriz de bytes que se recibe de la aplicación remota.
            La matriz de bytes puede contener sólo una parte de un mensaje, el protocolo debe 
            acumular bytes para construir mensajes.
            Este método está sincronizado. Por lo tanto, sólo un hilo lo puede llamar al mismo tiempo.
            </summary>
            <param name="bytesRecibidos">Bytes recibidos desde aplicaciones remotas.</param>
            <returns>
            Colección de mensajes.
            Protocolo puede generar más de un mensaje de una matriz de bytes.
            Además, si los bytes recibidos no son suficientes para construir un mensaje, el protocolo 
            puede devolver una lista vacía (y guardar bytes para combinar con la próxima llamada al método).
            </returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.ITelegrama.Resetear">
            <summary>
            Este método se llama cuando se restablece la conexión con la aplicación remota (se está reseteando la conexión, o es la primera conexión).
            Por lo tanto, el telegrama debe resetearse.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente">
            <summary>
            Esta clase representa a un cliente en el servidor.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente._canalComunicacion">
            <summary>
            El canal de comunicación que se utiliza por el cliente para enviar y recibir mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion)">
            <summary>
            Inicializar una nueva instancia de la clase ServidorCliente.
            </summary>
            <param name="canalComunicacion">El canal de comunicación que se utiliza por el cliente para enviar y recibir mensajes.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.Desconectar">
            <summary>
            Desconectar del cliente y cerrar el canal de comunicación subyacente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Envíar un mensaje al cliente.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.CanalComunicacion_Conectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Conectado del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.CanalComunicacion_Desconectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Desconectado del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.CanalComunicacion_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.CanalComunicacion_MensajeEnviado(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeEnviado del objeto _canalComunicacion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.OnConectado">
            <summary>
            Elevar el evento Conectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.OnDesconectado">
            <summary>
            Elevar el evento Desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.OnMensajeEnviado(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviado.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.IdentificadorAutoincremental">
            <summary>
            Identificador único para este cliente en el servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.EstadoComunicacion">
            <summary>
            Obtener el estado de comunicación del cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.EndPointRemoto">
            <summary>
             Obtener el endpoint del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorCliente.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteFactory">
            <summary>
            Esta clase se utiliza para crear clientes para conectarse a un servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteFactory.Crear(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint)">
            <summary>
            Crear un nuevo cliente para conectarse a un servidor utilizando un endpoint.
            </summary>
            <param name="endPointRemoto">Endpoint del servidor a conectarse.</param>
            <returns>Cliente Tcp.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteFactory.Crear(System.String)">
            <summary>
            Crear un nuevo cliente para conectarse a un servidor utilizando un endpoint.
            </summary>
            <param name="direccionEndpoint">Dirección endpoint del servidor a conectarse.</param>
            <returns>Cliente Tcp.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion">
            <summary>
            Representa un canal de comunicación.
            Un canal de comunicación se utiliza para comunicar (enviar/recibir mensajes) con una aplicación remota.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.Iniciar">
            <summary>
            Iniciar la comunicación con la aplicación remota.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.Desconectar">
            <summary>
            Desconectar mensajero.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.Conectado">
            <summary>
            Este evento se produce cuando se conecta el canal de comunicación con el cliente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.Desconectado">
            <summary>
            Este evento se produce cuando se cierra el canal de comunicación con el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.EndPointRemoto">
            <summary>
             Obtener el endpoint de la aplicación remota.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion.EstadoComunicacion">
            <summary>
            Obtener el estado actual de la comunicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OOPCEnlaces">
            <summary>
            oOPCEnlaces.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OOPCEnlaces.#ctor(System.String)">
            <summary>
            OOPCEnlaces.
            </summary>
            <param name="nombre"></param>
        </member>
        <member name="P:Orbita.Comunicaciones.OOPCEnlaces.Nombre">
            <summary>
            Nombre.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OOPCEnlaces.Reintento">
            <summary>
            Reintento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.ODispositivoWinCC">
            <summary>
            Protocolo pra comunicar con WinCC. Es necesario que este dispositivo esté en la misma máquina que WinCC.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoWinCC._oDataManager">
            <summary>
            Objeto para comunicar con WinCC.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoWinCC._mCurVarType">
            <summary>
            Tipo de variable para escribir.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ODispositivoWinCC._logger">
            <summary>
            Logger del sistema.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.#ctor(Orbita.Trazabilidad.ILogger)">
            <summary>
            Constructor de clase
            </summary>
            <param name="logger">Log de la clase</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.#ctor">
            <summary>
            Constructor de clase
            </summary>
            <param name="logger">Log de la clase</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Finalize">
            <summary>
            Destruye el objeto
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Iniciar">
            <summary>
            Inicia el dispositivo
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Dispose(System.Boolean)">
            <summary>
            limpia los objetos en memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Leer(System.String[],System.Boolean)">
            <summary>
            Leer las variables de WinCC. El método de lectura es variable a variable.
            </summary>
            <param name="variables">nombre de las variables</param>
            <param name="demanda">indica que la llamada al dispositivo se hace de forma inmediata</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Escribir(System.String[],System.Object[])">
            <summary>
            Escribe las variables en WinCC. El método de escritura es variable a variable
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Escribir(System.String[],System.Object[],System.String)">
            <summary>
            Escribir el valor de los identificadores de variables de la colección.
            </summary>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Leer(System.String,System.Object@)">
            <summary>
            Lee la variable de wincc
            </summary>
            <param name="variable">Variable que se quiere leer</param>
            <param name="valor">Valor leído</param>
            <returns>Verdadero si se lee y falso si no se lee</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ODispositivoWinCC.Escribir(System.String,System.Object)">
            <summary>
            Escribe en la variable de wincc
            </summary>
            <param name="variable">Variable que se quiere escribir</param>
            <param name="valor">Valor que se quiere escribir</param>
            <returns>Verdadero si se escribe y falso si no se escribe</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer">
            <summary>
            Esta clase es un temporizador (timer) que realiza periódicamente algunas tareas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer._timerTareas">
            <summary>
            Este temporizador se utiliza para realizar tareas en intervalos especificados.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer._iniciado">
            <summary>
            Indica si el temporizador está en marcha o parado.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer._tareasRealizadas">
            <summary>
            Indica que si la realización de la tarea o _taskTimer está en modo de suspensión.
            Este campo se utiliza para esperar la ejecución de tareas cuando se detiene Timer.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase Timer.
            </summary>
            <param name="periodo">Período de la tarea del temporizador (en milisegundos).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase Timer.
            </summary>
            <param name="periodo">Período de la tarea del temporizador (en milisegundos).</param>
            <param name="arrancarAlIniciar">Indica si el temporizador provoca el evento Elapsed en el método de inicio del temporizador.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.Iniciar">
            <summary>
            Iniciar el temporizador.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.Parar">
            <summary>
            Parar el temporizador.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.EsperarParaTerminar">
            <summary>
            Espera a que el servicio se detenga.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.TimerCallBack(System.Object)">
            <summary>
            Este método es llamado por _timerTareas.
            </summary>
            <param name="state">Argumento sin uso.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.Elapsed">
            <summary>
            Este evento se produce periódicamente en función del período del temporizador (timer).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.Periodo">
            <summary>
            Período de la tarea del temporizador (en milisegundos).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Threading.Timer.ArrancarAlIniciar">
            <summary>
            Indica si el temporizador provoca el evento Elapsed en el método de inicio del temporizador.
            Valor predeterminado: False.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorClienteEventArgs">
            <summary>
            Almacena información del cliente que será utilizada por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorClienteEventArgs.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.IServidorCliente)">
            <summary>
            Inicializar una nueva instancia de la clase ServidorClienteEventArgs.
            </summary>
            <param name="cliente">Cliente que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorClienteEventArgs.Cliente">
            <summary>
            Cliente que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion">
            <summary>
            Esta clase se utiliza para comunicarse con una aplicación remotamente (canl de comunicación) a través de Tcp / IP.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases de los canales de comunicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase CanalComunicacionBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.Desconectar">
            <summary>
            Desconectar de la aplicación remota y cerrar este canal.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.Iniciar">
            <summary>
            Iniciar la comunicación con aplicaciones remotas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar mensaje a las aplicaciones remotas.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException; si mensaje es nulo (null).</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.IniciarCanalComunicacion">
            <summary>
            Iniciar la comunicación con aplicaciones remotas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.EnviarMensajePorCanalComunicacion(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Envíar un mensaje a la aplicación remota.
            Este método será sobreescrito por las clases derivadas para enviar realmente el mensaje.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.OnConectado">
            <summary>
            Elevar el evento Conectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.OnDesconectado">
            <summary>
            Elevar el evento Desconectado.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.OnMensajeEnviado(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviado.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.Conectado">
            <summary>
            Este evento se produce cuando se conecta el canal de comunicación con el cliente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.Desconectado">
            <summary>
            Este evento se produce cuando se cierra el canal de comunicación con el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.EndPointRemoto">
            <summary>
             Obtener endpoint de la aplicación remota.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.EstadoComunicacion">
            <summary>
            Obtener el estado actual de la comunicación.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionBase.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza en este canal.
            Esta propiedad se debe definir antes de la primera comunicación.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.TamañoBufferRecepcion">
            <summary>
            Tamaño del búfer que se utiliza para recibir bytes del socket Tcp.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion._bufferRecepcion">
            <summary>
            Búfer para recibir bytes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion._socketCliente">
            <summary>
            Socket para enviar/recibir mensajes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion._iniciado">
            <summary>
            Flag para el control de funcionamiento del hilo (thread).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion._objSincronizacion">
            <summary>
            Este objeto sólo se utiliza para la sincronización de threads (bloqueo).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion._endPointRemoto">
            <summary>
            Endpoint de la aplicación remota.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Inicializar una nueva instancia de la clase TcpCanalComunicacion.
            </summary>
            <param name="socketCliente">Un objeto socket conectado que se utiliza para comunicarse a través de la red.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.Desconectar">
            <summary>
            Desconectar de la aplicación remota y cerrar el canal.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.IniciarCanalComunicacion">
            <summary>
            Iniciar el hilo (thread/callback) para enviar/recibir mensajes de socket.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.EnviarMensajePorCanalComunicacion(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje a la aplicación remota.
            </summary>
            <param name="mensaje">Mensaje que se enviará.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.RecepcionMensajes(System.IAsyncResult)">
            <summary>
            Este método se utiliza como método de devolución de llamada (callback) en el método BeginReceive de _socketCliente.
            </summary>
            <param name="resultadoAsincrono">Representa el estado de una operación asíncrona.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.TcpCanalComunicacion.EndPointRemoto">
            <summary>
             Obtener el endpoint de la aplicación remota.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OManejadorEventoComm">
            <summary>
            Delegado asociado al evento de adición.
            </summary>
            <param name="e">Argumento que puede ser utilizado en el manejador de evento.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2">
            <summary>
            Esta clase se utiliza para procesar elementos de forma secuencial en procesos multihilo (multithread).
            </summary>
            <typeparam name="TSender"></typeparam>
            <typeparam name="TElemento">Tipo de elemento.</typeparam>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._metodo">
            <summary>
            El método delegado que se llama para procesar elementos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._cola">
            <summary>
            Cola de elementos. Se utiliza para procesar elementos secuencialmente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._tareaActual">
            <summary>
            Una referencia a la tarea actual que se está procesando un elemento en el método ProcesarElemento.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._estaProcesando">
            <summary>
            Indica el estado del procesamiento de elementos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._estaIniciado">
            <summary>
            Un valor booleano para controlar el funcionamiento de la clase.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2._objSincronizacion">
            <summary>
            Este objeto sólo se utiliza para la sincronización de threads (bloqueo).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2.#ctor(System.Action{`0,`1})">
            <summary>
            Inicializar una nueva instancia de la clase ProcesadorElementosSecuenciales.
            </summary>
            <param name="metodo">El método delegado que se llama para procesar elementos.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2.EncolarMensaje(`0,`1)">
            <summary>
            Añadir un elemento a la cola y procesarlo.
            </summary>
            <param name="sender"></param>
            <param name="elemento">Elemento que se añade a la cola.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2.Iniciar">
            <summary>
            Iniciar el procesamiento de elementos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2.Terminar">
            <summary>
            Terminar el procesamiento de elementos y esperar la detención del elemento actual.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuencialesT2`2.ProcesarElemento(`0)">
            <summary>
            Este método se ejecuta en un nuevo hilo (thread) para procesar elementos de la cola.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint">
            <summary>
            Representa un endpoint Tcp.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint">
            <summary>
             Representa un endpoint del lado del servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint.CrearEndPoint(System.String)">
            <summary>
            Crear endPoint de un string.
            La dirección debe tener el formato: protocolo://dirección
            Ejemplo: tcp://10.37.2.30:8000 uno de los extremos Tcp con
            dirección IP 10.37.2.30 y puerto 8000.
            </summary>
            <param name="direccionEndPoint">Dirección endpoint.</param>
            <returns>Endpoint.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint.CrearServidor">
            <summary>
            Crear un servidor que utiliza este endpoint para escuchar las conexiones entrantes.
            </summary>
            <returns>Servidor.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint.CrearCliente">
            <summary>
            Crear un cliente que utiliza este endpoint para conectar al servidor.
            </summary>
            <returns>Cliente.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase TcpEndPoint.
            </summary>
            <param name="puertoTcp">Puerto de escucha Tcp para solicitudes de conexión entrantes en el servidor.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.#ctor(System.String,System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase TcpEndPoint.
            </summary>
            <param name="direccionIp">Dirección IP del servidor.</param>
            <param name="puertoTcp">Puerto de escucha Tcp para solicitudes de conexión entrantes en el servidor.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase TcpEndPoint.
            Formato de dirección debe ser como Dirección IP: puerto (por ejemplo: 127.0.0.1:8001).
            </summary>
            <param name="direccionIp">Dirección endpoint Tcp.</param>
            <returns>TcpEndpoint.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.CrearServidor">
            <summary>
            Crear un servidor que utiliza este endpoint para escuchar las conexiones entrantes.
            </summary>
            <returns>TcpServidor.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.CrearCliente">
            <summary>
            Crear un cliente que utiliza este endpoint para conectarse al servidor.
            </summary>
            <returns>TcpCliente.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.ToString">
            <summary>
            Invalida el método ToString() para devolver una cadena que representa la instancia de objeto.
            </summary>
            <returns>Una cadena (string) que representa este objeto.</returns>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.DireccionIp">
            <summary>
             Dirección IP del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.TcpEndPoint.PuertoTcp">
            <summary>
             Puerto de escucha Tcp para solicitudes de conexión entrantes en el servidor.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeInfoDatoBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeInfoDatoBase.#ctor(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeInfoDatoBase.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeInfoDatoBase.#ctor(Orbita.Comunicaciones.OInfoDato,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeInfoDatoBase.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeInfoDatoBase.InfoDato">
            <summary>
            Información del dato que se está transmitiendo.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeLecturaDispositivos">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeLecturaDispositivos.Dispositivos">
            <summary>
            Colección de dispositivos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDispositivos">
            <summary>
            Este mensaje se utiliza para enviar/recibir un array de int como mensaje de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosBase.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDispositivosBase.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosBase.#ctor(System.Int32[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDispositivosBase.
            </summary>
            <param name="dispositivos">Colección de dispositivos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosBase.Dispositivos">
            <summary>
            Colección de dispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDispositivos.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDispositivos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDispositivos.#ctor(System.Int32[],System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDispositivos.
            </summary>
            <param name="dispositivos">Colección de dispositivos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloNTP">
            <summary>
            Clase para la sincronización NTP
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.Dispose(System.Boolean)">
            <summary>
            Limpia objetos de memoria.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloNTP._LeapIndicator">
            <summary>
            Leap indicator field values
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._LeapIndicator.NoWarning">
            <summary>
            0 - No warning.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._LeapIndicator.LastMinute61">
            <summary>
            1 - Last minute has 61 seconds.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._LeapIndicator.LastMinute59">
            <summary>
            2 - Last minute has 59 seconds.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._LeapIndicator.Alarm">
            <summary>
            3 - Alarm condition (clock not synchronized).
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloNTP._Mode">
            <summary>
            Mode field values
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.SymmetricActive">
            <summary>
            1 - Symmetric active.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.SymmetricPassive">
            <summary>
            2 - Symmetric pasive.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.Client">
            <summary>
            3 - Client.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.Server">
            <summary>
            4 - Server.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.Broadcast">
            <summary>
            5 - Broadcast.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Mode.Unknown">
            <summary>
            0, 6, 7 - Reserved.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloNTP._Stratum">
            <summary>
            Stratum field values
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Stratum.Unspecified">
            <summary>
            0 - unspecified or unavailable.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Stratum.PrimaryReference">
            <summary>
            1 - primary reference (e.g. radio-clock).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Stratum.SecondaryReference">
            <summary>
            2-15 - secondary reference (via NTP or SNTP).
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP._Stratum.Reserved">
            <summary>
            16-255 - reserved.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient">
             <summary>
             NTPClient is a C# class designed to connect to time servers on the Internet.
             The implementation of the protocol is based on the RFC 2030.
             
             Public class members:
            
             LeapIndicator - Warns of an impending leap second to be inserted/deleted in the last
             minute of the current day. (See the _LeapIndicator enum)
             
             VersionNumber - Version number of the protocol (3 or 4).
             
             Mode - Returns mode. (See the _Mode enum)
             
             Stratum - Stratum of the clock. (See the _Stratum enum)
             
             PollInterval - Maximum interval between successive messages.
             
             Precision - Precision of the clock.
             
             RootDelay - Round trip time to the primary reference source.
             
             RootDispersion - Nominal error relative to the primary reference source.
             
             ReferenceID - Reference identifier (either a 4 character string or an IP address).
             
             ReferenceTimestamp - The time at which the clock was last set or corrected.
             
             OriginateTimestamp - The time at which the request departed the client for the server.
             
             ReceiveTimestamp - The time at which the request arrived at the server.
             
             Transmit Timestamp - The time at which the reply departed the server for client.
             
             RoundTripDelay - The time between the departure of request and arrival of reply.
             
             LocalClockOffset - The offset of the local clock relative to the primary reference
             source.
             
             Initialize - Sets up data structure and prepares for connection.
             
             Connect - Connects to the time server and populates the data structure.
            	It can also set the system time.
             
             IsResponseValid - Returns true if received data is valid and if comes from
             a NTP-compliant time server.
             
             ToString - Returns a string representation of the object.
             
             -----------------------------------------------------------------------------
             Structure of the standard NTP header (as described in RFC 2030)
                                   1                   2                   3
               0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |LI | VN  |Mode |    Stratum    |     Poll      |   Precision   |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                          Root Delay                           |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                       Root Dispersion                         |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                     Reference Identifier                      |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Reference Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                   Originate Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Receive Timestamp (64)                     |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                    Transmit Timestamp (64)                    |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                 Key Identifier (optional) (32)                |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
              |                                                               |
              |                                                               |
              |                 Message Digest (optional) (128)               |
              |                                                               |
              |                                                               |
              +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             -----------------------------------------------------------------------------
             
             NTP Timestamp Format (as described in RFC 2030)
                                     1                   2                   3
                 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                           Seconds                             |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             |                  Seconds Fraction (0-padded)                  |
             +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
             
             </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.ReceptionTimestamp">
            <summary>
            Reception Timestamp.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.#ctor(System.String)">
            <summary>
            Cliente NTP.
            </summary>
            <param name="host">IP o dirección del servidor NTP</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.Connect(System.Boolean,System.Boolean)">
            <summary>
            Connect to the time server and update system time.
            </summary>
            <param name="UpdateSystemTime">variable para la actualización de la hora local del equipo</param>
            <param name="usarUTC">actualiza a hora UTC</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.IsResponseValid">
            <summary>
            Check if the response from server is valid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.ToString">
            <summary>
            Converts the object to string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.Dispose(System.Boolean)">
            <summary>
            Limpia objetos de memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.LeapIndicator">
            <summary>
            Leap Indicator.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.VersionNumber">
            <summary>
            Version Number.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.Mode">
            <summary>
            Mode.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.Stratum">
            <summary>
            Stratum.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.PollInterval">
            <summary>
            Poll Interval.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.Precision">
            <summary>
            Precision (in milliseconds).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.RootDelay">
            <summary>
            Root Delay (in milliseconds).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.RootDispersion">
            <summary>
            Root Dispersion (in milliseconds).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.ReferenceID">
            <summary>
            Reference Identifier.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.ReferenceTimestamp">
            <summary>
            Reference Timestamp.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.OriginateTimestamp">
            <summary>
            Originate Timestamp.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.ReceiveTimestamp">
            <summary>
            Receive Timestamp.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.TransmitTimestamp">
            <summary>
            Transmit Timestamp.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.RoundTripDelay">
            <summary>
            Round trip delay (in milliseconds).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloNTP.OProtocoloNTPClient.LocalClockOffset">
            <summary>
            Local clock offset (in milliseconds).
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EstadoComunicacion">
            <summary>
            Estados de la comunicación.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EstadoComunicacion.Conectado">
            <summary>
            Conectado.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EstadoComunicacion.Desconectado">
            <summary>
            Desconectado.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OPuertoComunicaciones">
            <summary>
            Implementa una clase abstacta de un puerto de comunicaciones
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OPuertoComunicaciones.Dispositivos">
            <summary>
            Contiene los dispositivos asociados a este puerto
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.#ctor(Orbita.Comunicaciones.OConfiguracionPuerto)">
            <summary>
            Inicializar una nueva instancia de la clase OPuertoComunicaciones.
            </summary>
            <param name="configuracionPuerto">Configuración del puerto de comunicaciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.#ctor(Orbita.Comunicaciones.OConfiguracionPuerto,Orbita.Comunicaciones.OInformacionPuerto)">
            <summary>
            Inicializar una nueva instancia de la clase OPuertoComunicaciones.
            </summary>
            <param name="configuracionPuerto">Configuración del puerto de comunicaciones.</param>
            <param name="info">Información básica del puerto de comunicaciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.#ctor(Orbita.Comunicaciones.OConfiguracionPuerto,System.Int32,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OPuertoComunicaciones.
            </summary>
            <param name="configuracionPuerto">Configuración del puerto de comunicaciones.</param>
            <param name="idNumerico">Identificador númerico del puerto de comunicaciones.</param>
            <param name="tipoPuerto">Tipo del puerto de comunicaciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.ConfigurarPuerto(Orbita.Comunicaciones.OConfiguracionPuerto)">
            <summary>
            Configurar el puerto de comunicaciones.
            </summary>
            <param name="configuracion"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Abrir">
            <summary>
            Abrir el puerto de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Cerrar">
            <summary>
            Cerrar el puerto de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Enviar(System.Byte[])">
            <summary>
            Envía por el puerto de comunicaciones el vector de bytes tramaTx.
            </summary>
            <param name="tramaTx">Vector de bytes a enviar por el puerto de comunicaciones.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.RecibirBytes">
            <summary>
            Copiar en el vector de bytes tramaRx la información recibida por el puerto de comunicaciones.
            </summary>
            <returns>Vector de bytes donde que contendrá la información recibida hasta el momento.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.BytesRecibidos">
            <summary>
             Devuleve el número de bytes recibidos hasta el momento por el puerto de comunicaciones.
            </summary>
            <returns>El número de bytes recibidos hasta el momento.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.ResetBuffer">
            <summary>
            Resetea el buffer de recepcion de datos del puerto de comunicaciones.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.BuscarCaracter(System.Byte)">
            <summary>
            Busca un carácter en el buffer de recepcion de datos del puerto de comunicaciones.
            </summary>
            <param name="caracter">Carácter a buscar.</param>
            <returns>True encuentra el valor buscado; false en caso contrario.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.ObtenerPuertosDisponibles">
            <summary>
            Lista los puertos COM RS-232 disponbles en el sistema en un DataTable.
            </summary>
            <returns>Un DataTable con los puertos COM RS-232 disponbles en el sistema.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Enviar(System.String)">
            <summary>
            Envia una cadena de texto por el puerto utilizando una codificación ASCII.
            </summary>
            <param name="tramaTx">Cadena de texto a enviar</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Enviar(System.String,System.Text.Encoding)">
            <summary>
            Envia una cadena de texto por el puerto utilizando la codificación Encoding.
            </summary>
            <param name="tramaTx"></param>
            <param name="codificacion">Cadena de texto a enviar</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.RecibirCadena">
            <summary>
            Recibe una cadena de texto por el puerto utilizando la codificación ASCII.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.RecibirCadena(System.Text.Encoding)">
            <summary>
            Recibe una cadena de texto por el puerto utilizando la codificación Encoding.
            </summary>
            <param name="codificacion">Cadena que contendrá el texto recibido</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoComunicaciones.Dispose">
            <summary>
            Libera los recursos utilizados
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OPuertoComunicaciones.InformacionPuerto">
            <summary>
            Obtiene la información básica del puerto de comunicaciones.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OPuertoComunicaciones.ConfiguracionPuerto">
            <summary>
            Obtiene la configuración del puerto de comunicaciones.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorFactory">
            <summary>
            Esta clase se utiliza para crear servidores.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Servidor.ServidorFactory.Crear(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.EndPoints.EndPoint)">
            <summary>
            Crear un nuevo servidor utilizando endpoint.
            </summary>
            <param name="endPoint">Endpoint que representa la dirección del servidor.</param>
            <returns>Servidor Tcp.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1">
            <summary>
            Esta clase añade EnviarMensajeEsperarRespuesta (...) y los métodos Enviar(...) y Recibir(...)
            mensajes a un IMensajero para peticiones/respuestas síncronas.
            Agrega procesamiento en cola de los mensajes entrantes.
            </summary>
            <typeparam name="T">El tipo de objeto IMensajero que utiliza la comunicación subyacente.</typeparam>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.TimeoutMsPredeterminado">
            <summary>
            Valor predeterminado del timeout.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1._mensajesEnEspera">
            <summary>
            Estos mensajes están a la espera de una respuesta.
            Clave: IdMensaje.
            Valor: instancia de MensajeEnEspera.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1._objSincronizacion">
            <summary>
            Este objeto sólo se utiliza para la sincronización de threads (bloqueo).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.#ctor(`0)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeroPeticionRespuesta.
            </summary>
            <param name="mensajero">Mensajero que se usa en la comunicación subyacente.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Parar">
            <summary>
            Parar el mensajero.
            Cancelar todos los hilos (threads) esperando en el método EnviarMensajeEsperarRespuesta y detener la cola de mensajes.
            El método EnviarMensajeEsperarRespuesta lanza una excepción si hay un hilo que está a la espera de mensaje de respuesta.
            También se detiene el procesamiento de mensajes entrantes y elimina todos los mensajes en la cola de entrada.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Dispose">
            <summary>
            Llamar al método Parar(...) en este método.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EnviarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Enviar un mensaje.
            </summary>
            <param name="mensaje">Mensaje que será enviado.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EnviarMensajeEsperarRespuesta(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Envíar un mensaje y esperar una respuesta para este mensaje.
            </summary>
            <remarks>
            El mensaje de respuesta se corresponde con la propiedad IdMensajeRespuesta, por lo que si
            cualquier otro mensaje se recibe (que no se responderá por mensaje enviado)
            de aplicación remota, no se considera como una respuesta y no se
            devuelve como valor de retorno de este método.
            
            El evento MensajeRecibido no se lanza para mensajes de respuesta.
            </remarks>
            <param name="mensaje">Mensaje a enviar.</param>
            <returns>Mensaje de respuesta.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EnviarMensajeEsperarRespuesta(Orbita.Comunicaciones.IMensaje,System.Int32)">
            <summary>
            Envíar un mensaje y esperar una respuesta para este mensaje.
            </summary>
            <remarks>
            El mensaje de respuesta se corresponde con la propiedad IdMensajeRespuesta, por lo que si
            cualquier otro mensaje se recibe (que no se responderá por mensaje enviado)
            de aplicación remota, no se considera como una respuesta y no se
            devuelve como valor de retorno de este método.
            
            El eventoMensajeRecibido no se lanza para mensajes de respuesta.
            </remarks>
            <param name="mensaje">Mensaje a enviar.</param>
            <param name="timeoutMs">Duración del timeout en milisegundos.</param>
            <returns>Mensaje de respuesta.</returns>
            <exception cref="T:System.TimeoutException">Throws TimeoutException si no se ha podido recibir el mensaje de respuesta en tiempo.</exception>
            <exception cref="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion">Throws ExcepcionComunicacion si la comunicación falla antes del mensaje de respuesta.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Mensajero_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido del objeto mensajero.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Mensajero_MensajeEnviado(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeEnviado del objeto mensajero.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.OnMensajeRecibido(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeRecibido.
            </summary>
            <param name="mensaje">Mensaje recibido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.OnMensajeEnviado(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Elevar el evento MensajeEnviado.
            </summary>
            <param name="mensaje">Mensaje enviado.</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeRecibido">
            <summary>
            Este evento se produce cuando se recibe un nuevo mensaje desde el mensajero subyacente.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnviado">
            <summary>
            Este evento se produce cuando un nuevo mensaje es enviado sin ningún error.
            Esto no garantiza que el mensaje es obtenido y procesado por la aplicación remota correctamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Telegrama">
            <summary>
            Obtener/establecer el telegrama que se utiliza durante la lectura y escritura de mensajes.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.FechaUltimoMensajeRecibido">
            <summary>
            Obtener la fecha del último mensaje recibido satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.FechaUltimoMensajeEnviado">
            <summary>
            Obtener la fecha del último mensaje enviado satisfactoriamente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.Mensajero">
            <summary>
            Obtener el objeto IMensajero subyacente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.TimeoutMs">
            <summary>
            Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método EnviarMensajeEsperarRespuesta(...).
            Valor predeterminado: 60000 ms (1 minuto).
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnEspera">
            <summary>
            Esta clase se utiliza para almacenar mensajería en espera (contexto) para un mensaje de petición hasta que se recibe la respuesta.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnEspera.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase MensajeEnEspera.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnEspera.MensajeRespuesta">
            <summary>
            Mensaje de respuesta para el mensaje de petición.
            (Null si la respuesta aún no se ha recibido).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnEspera.EventoEspera">
            <summary>
            ManualResetEvent para bloquear el hilo (thread) hasta que se ha recibido la respuesta.
            (ManualResetEventSlim proporciona una versión reducida de ManualResetEvent).
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.MensajeEnEspera.Estado">
            <summary>
            Estado del mensaje de solicitud.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EstadoMensajeEnEspera">
            <summary>
            Esta enumeración se utiliza para almacenar el estado de un mensaje en espera.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.EsperandoRespuesta">
            <summary>
            A la espera de respuesta.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.Cancelado">
            <summary>
            Se cancela el envio de mensajes.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OcsMensajeroPeticionRespuesta`1.EstadoMensajeEnEspera.RespuestaRecibida">
            <summary>
            La respuesta se recibió correctamente.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeCambioDato">
            <summary>
            Este mensaje se utiliza para enviar/recibir un objeto de tipo OInfoDato como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeCambioDato.#ctor(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeCambioDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeCambioDato.#ctor(Orbita.Comunicaciones.OInfoDato,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeCambioDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeEscrituraEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEscrituraEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeEscritura)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEscrituraEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeEscrituraEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDatosBase">
            <summary>
            Representa el mensaje que se enviará y recibirá entre cliente y servidor.
            Esta es la clase base para todos los mensajes de este tipo.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDatosBase.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDatosBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDatosBase.#ctor(System.Int32,Orbita.Utiles.OHashtable,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDatosBase.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaDatosBase.Dispositivo">
            <summary>
            Dispositivo de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaDatosBase.Datos">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OMensajeCanalTCP">
            <summary>
            Mensaje para las comunicaciones Tcp.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OMensajeCanalTCP.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de clase.
            </summary>
            <param name="listener"></param>
            <param name="canal"></param>
            <param name="mensaje"></param>
        </member>
        <member name="P:Orbita.Comunicaciones.OMensajeCanalTCP.Listener">
            <summary>
            Nombre del listener.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OMensajeCanalTCP.Canal">
            <summary>
            Nombre del canal.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OMensajeCanalTCP.Mensaje">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OMensajeCanalTCP.Data">
            <summary>
            Datos del mensaje.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion">
            <summary>
            Protocolo de comunicación predeterminado entre el servidor y los clientes para enviar y recibir un mensaje.
            Utiliza serialización binaria .NET para escribir y leer mensajes.
            
            Formato de mensaje: [Longitud de mensaje (4 bytes)][Contenido del mensaje serializado].
            
            Si un mensaje es serializado en un array de bytes en N bytes, este protocolo añade 4 bytes de
            información extra a la cabecera del mensaje, por lo tanto, la longitud total es de (4 + N) bytes.
            
            Esta clase se puede derivar para cambiar de serialización (por defecto: BinaryFormatter). Para ello,
            SerializarMensaje y DeserializarMensaje deben ser virtuales.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.MaximaLongitudMensaje">
            <summary>
            Máxima longitud del mensaje.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion._bytesRecibidosMemoryStream">
            <summary>
            Este MemoryStream se utiliza para recoger los bytes recibidos en la construcción de mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase Serializacion.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.GetBytes(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Serializar un mensaje a una matriz de bytes para enviar a la aplicación remota.
            Este método está sincronizado. Por lo tanto, sólo un hilo lo puede llamar al mismo tiempo.
            </summary>
            <param name="mensaje">Mensaje que será serializado.</param>
            <exception cref="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion">Throws ExcepcionComunicacion si el mensaje es más grande que la máxima longitud permitida.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.CrearMensajes(System.Byte[])">
            <summary>
            Generar mensajes de una matriz de bytes que se recibe de la aplicación remota.
            La matriz de bytes puede contener sólo una parte de un mensaje, el protocolo debe 
            acumular bytes para construir mensajes.
            Este método está sincronizado. Por lo tanto, sólo un hilo lo puede llamar al mismo tiempo.
            </summary>
            <param name="bytesRecibidos">Bytes recibidos desde aplicaciones remotas.</param>
            <returns>
            Colección de mensajes.
            Protocolo puede generar más de un mensaje de una matriz de bytes.
            Además, si los bytes recibidos no son suficientes para construir un mensaje, el protocolo 
            puede devolver una lista vacía (y guardar bytes para combinar con la próxima llamada al método).
            </returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.Resetear">
            <summary>
            Este método se llama cuando se restablece la conexión con la aplicación remota (se está reseteando la conexión, o es la primera conexión).
            Por lo tanto, el telegrama debe resetearse.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.SerializarMensaje(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Este método se utiliza para serializar un IMensaje a una matriz de bytes.
            Este método se puede sobreescribir por las clases derivadas para cambiar la estrategia de serialización.
            Se trata de una combinación con el método DeserializarMensaje, deben sobreescribirse juntos.
            </summary>
            <param name="mensaje">Mensaje que será serializado.</param>
            <returns>
            Mensaje serializado en bytes.
            No incluye la longitud del mensaje.
            </returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.DeserializarMensaje(System.Byte[])">
            <summary>
            Este método se utiliza para deserializar un IMensaje de sus bytes.
            Este método se puede sobreescribir por las clases derivadas para cambiar la estrategia de deserialización.
            Se trata de una combinación con el método SerializarMensaje, deben sobreescribirse juntos.
            </summary>
            <param name="bytes">
            Bytes de mensaje que serán deserializados (no incluye la longitud del mensaje. Se componen de un solo mensaje entero).
            </param>
            <returns>Mensaje deserializado.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.LeerMensaje(System.Collections.Generic.ICollection{Orbita.Comunicaciones.IMensaje})">
            <summary>
            Este método intenta leer un mensaje y agregarlo a la colección de mensajes. 
            </summary>
            <param name="mensajes">Colección de mensajes.</param>
            <returns>
            Devuelve un valor booleano que indica si hay una necesidad de volver a llamar a este método.
            </returns>
            <exception cref="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Excepciones.ExcepcionComunicacion">Throws ExcepcionComunicacion si el mensaje es más grande que la máxima longitud permitida.</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.EscribirInt32(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Escribir un valor entero a una matriz de bytes desde un índice inicial.
            </summary>
            <param name="buffer">Matriz de bytes.</param>
            <param name="startIndex">Índice inicial de la matriz de bytes a escribir.</param>
            <param name="number">Valor entero a escribir.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.LeerInt32(System.IO.Stream)">
            <summary>
            Deserializar y devolver un entero serializado.
            </summary>
            <returns>Integer deserializado.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.LeerArrayBytes(System.IO.Stream,System.Int32)">
            <summary>
            Leer una matriz de bytes con la longitud especificada.
            </summary>
            <param name="stream">Stream para leer.</param>
            <param name="longitud">Longitud de la matriz de bytes para leer.</param>
            <returns>Matriz de bytes leida.</returns>
            <exception cref="T:System.IO.EndOfStreamException">Throws EndOfStreamException si no se puede leer del stream.</exception>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.DeserializationAppDomainBinder">
            <summary>
            Esta clase se utiliza en deserializar para permitir deserializar objetos que se definen en ensamblados que se carga en tiempo de ejecución (como PlugIns).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.Serializacion.DeserializationAppDomainBinder.BindToType(System.String,System.String)">
            <summary>
            BindToType.
            </summary>
            <param name="ensamblado">Nombre del ensamblado.</param>
            <param name="tipo">Tipo de ensamblado.</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OEstadoComms">
            <summary>
            OEstadoComms.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEstadoComms.Estado">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEstadoComms.Enlace">
            <summary>
            Enlace.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEstadoComms.Nombre">
            <summary>
            Nombre.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEstadoComms.Id">
            <summary>
            Identificador OPC.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDatos">
            <summary>
            Este mensaje se utiliza para enviar/recibir una colección (OHashtable) de datos como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDatos.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDatos.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDatos.#ctor(System.Int32,Orbita.Utiles.OHashtable,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDatos.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsClienteSincronizado">
            <summary>
            Esta clase proporciona la funcionalidad básica para todas las clases de clientes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsClienteSincronizado">
            <summary>
            Representa un cliente para conectarse al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsClienteSincronizado.Conectar">
            <summary>
            Conectar al servidor.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.IOcsClienteSincronizado.Desconectar">
            <summary>
            Desconectar del servidor.
            No hace nada si ya se encuentra desconectado.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsClienteSincronizado.Conectado">
            <summary>
            Este evento se produce cuando el cliente se conecta al servidor.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.IOcsClienteSincronizado.Desconectado">
            <summary>
            Este evento se produce cuando el cliente se desconecta del servidor.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsClienteSincronizado.EstadoComunicacion">
            <summary>
            Obtener el estado actual de comunicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.#ctor(System.Int32,System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsClienteSincronizado con la dirección Ip local (127.0.0.1)
            del servidor.
            </summary>
            <param name="puertoTcpRemoto">Puerto Tcp de escucha del servidor remoto.</param>
            <param name="periodoReConexionMs">Período de reconexión del cliente (opcional, en milisegundos).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsClienteSincronizado.
            </summary>
            <param name="direccionIpRemoto">Dirección IP del servidor remoto.</param>
            <param name="puertoTcpRemoto">Puerto Tcp de escucha del servidor remoto.</param>
            <param name="periodoReConexionMs">Período de reconexión del cliente (opcional, en milisegundos).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.Leer(System.Int32,System.String[],System.Boolean,System.Int32)">
            <summary>
            Leer la colección de valores de variables demandadas en el dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
            <param name="timeoutMs">Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método de Lectura(...).
            Valor predeterminado: 60000 ms (1 minuto).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.LeerDatos(System.Int32,System.Int32)">
            <summary>
            Leer la colección de datos del dispositivo especificado.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="timeoutMs">Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método de Lectura(...).
            Valor predeterminado: 60000 ms (1 minuto).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.LeerAlarmasActivas(System.Int32,System.Int32)">
            <summary>
            Leer la colección de alarmas activas del dispositivo especificado.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="timeoutMs">Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método de Lectura(...).
            Valor predeterminado: 60000 ms (1 minuto).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.LeerDispositivos(System.Int32)">
            <summary>
            Leer la colección de dispositivos.
            </summary>
            <param name="timeoutMs">Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método de Lectura(...).
            Valor predeterminado: 60000 ms (1 minuto).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.Escribir(System.Int32,System.String[],System.Object[],System.String,System.Int32)">
            <summary>
            Escribir el valor indicado de las variables en el dispositivo asociado indicando el canal.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal">Identificador de canal.</param>
            <param name="timeoutMs">Valor de tiempo de espera en milisegundos para esperar recibir un mensaje de la llamada al método de Escritura(...).
            Valor predeterminado: 60000 ms (1 minuto).</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsClienteSincronizado.Cliente_MensajeRecibido(System.Object,Orbita.Comunicaciones.MensajeEventArgs)">
            <summary>
            Manejador del evento MensajeRecibido para el cliente que ha iniciado el canal de comunicación.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">MensajeEventArgs que contiene los datos del evento.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloFtp">
            <summary>
            Clase que representa la funcionalidad necesaria
            comunicarse con el protocolo de transferencia FTP.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloFtp._nombre">
            <summary>
            Nombre del servidor Ftp.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloFtp._usuario">
            <summary>
            Usuario de acceso al servidor.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloFtp._password">
            <summary>
            Contraseña de usuario de acceso.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloFtp.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase Ftp.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloFtp.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase Ftp.
            </summary>
            <param name="nombre">Nombre del servidor de Ftp.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloFtp.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase Ftp.
            </summary>
            <param name="nombre">Nombre del servidor de Ftp.</param>
            <param name="usuario">Usuario de acceso al servidor.</param>
            <param name="password">Contraseña de usuario de acceso.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloFtp.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloFtp.Descargar(System.String,System.String,System.String,Orbita.Utiles.Extension,System.Boolean)">
            <summary>
            Descargar fichero de Ftp.
            </summary>
            <param name="identificador">Identificador del dispositivo</param>
            <param name="directorio">Directorio de primer nivel origen</param>
            <param name="fichero">Nombre del fichero ftp</param>
            <param name="extension">Extensión del fichero ftp</param>
            <param name="copiarENbaseDEdatos">Indica si se quiere 
            escribir la información del fichero en Base de datos</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloWinCCDataManager">
            <summary>
            Protocolo de comunicación con WinCC
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.#ctor">
            <summary>
            Constructor de clase
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.Dispose(System.Boolean)">
            <summary>
            Limpia objetos de memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.Connect">
            <summary>
            Conecta con el servidor WinCC
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.GetVariables(System.String)">
            <summary>
            Obtiene las variables con el filtro indicado
            </summary>
            <param name="strFilter"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.GetVarType(System.String)">
            <summary>
            returns a string with the name of the DATAtyp 
            </summary>
            <param name="strVar"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.GetVarValue(System.String,System.Object@,System.UInt32@)">
            <summary>
            Get current value and Quality from a WinCC Tag
            </summary>
            <param name="strVar"></param>
            <param name="objValue"></param>
            <param name="nQuality"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloWinCCDataManager.SetVarValue(System.String,System.Object)">
            <summary>
            Write value to wincc tag
            </summary>
            <param name="strVar"></param>
            <param name="objValue"></param>
            <returns></returns>
        </member>
        <member name="F:Orbita.Comunicaciones.OTCPListener._winsockListener">
            <summary>
            Objeto para establecer el canal Tcp principal.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OTCPListener._log">
            <summary>
            Log de la aplicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.#ctor(Orbita.Trazabilidad.ILogger,System.Int32,System.String)">
            <summary>
            Constructor del formulario.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.Inicializar">
            <summary>
            Inicializa las variables de la comunicación Tcp.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.GetEstadoCanal(System.String)">
            <summary>
            Obtener el estado del canal.
            </summary>
            <param name="direccionIp"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.WskListener_StateChanged(System.Object,Orbita.Winsock.WinsockStateChangedEventArgs)">
            <summary>
            Indica que el objeto winsock principal ha cambiado de estado. Trazabilidad del canal.
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.WskListener_ConnectionRequest(System.Object,Orbita.Winsock.WinsockConnectionRequestEventArgs)">
            <summary>
            Indica que se ha conectado un cliente al canal principal.
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener.wskListener_ErrorReceived(System.Object,Orbita.Winsock.WinsockErrorReceivedEventArgs)">
            <summary>
            Evento de errores en la comunicación TCP.
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener._winsockCliente_OStateChanged(Orbita.Utiles.OEventArgs)">
            <summary>
            Cambio de estado en el canal TCP.
            </summary>
            <param name="e">Argumento del objeto cliente</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener._winsockCliente_OSendComplete(Orbita.Utiles.OEventArgs)">
            <summary>
            Envío de datos en el canal TCP.
            </summary>
            <param name="e">Argumento del objeto cliente</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener._winsockCliente_OErrorReceived(Orbita.Utiles.OEventArgs)">
            <summary>
            Error en el canal TCP.
            </summary>
            <param name="e">Argumento del objeto cliente</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OTCPListener._winsockCliente_ODataArrival(Orbita.Utiles.OEventArgs)">
            <summary>
            Datos de recepción en el canal TCP.
            </summary>
            <param name="e">Argumento del objeto cliente</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskConnectionRequest">
            <summary>
            Evento Listener para petición de conexión.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskStateChanged">
            <summary>
            Evento Listener para canvio de estado.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskErrorReceived">
            <summary>
            Evento Listener para error de recepción.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskClientDataArrival">
            <summary>
            Evento Cliente Listener para recepción de datos.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskClientErrorReceived">
            <summary>
            Evento Cliente Listener para error de recepción.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskClientSendComplete">
            <summary>
            Evento Cliente Listener para send complete.
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OTCPListener.WskClientStateChanged">
            <summary>
            Evento Cliente Listener para cambio de estado.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OTCPListener.PoolCliente">
            <summary>
            Colección de canales.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OTCPListener.Puerto">
            <summary>
            Puerto TCP.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OTCPListener.Nombre">
            <summary>
            Nombre del canal.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OTCPListener.EstadoListener">
            <summary>
            Estado del listener.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeAlarma">
            <summary>
            Este mensaje se utiliza para enviar/recibir un objeto OInfoDato como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeAlarma.#ctor(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeAlarma.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeAlarma.#ctor(Orbita.Comunicaciones.OInfoDato,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeAlarma.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OPuertoRS">
            <summary>
            Clase que encapsula un puerto serie RS232
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OPuertoRS.BufferDatosRecibidos">
            <summary>
            Buffer de recepción de datos
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.#ctor">
            <summary>
            Constructor del puerto con la configuración por defecto
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.#ctor(Orbita.Comunicaciones.OConfiguracionPuertoRS)">
            <summary>
            Constructor del puerto con la configuración pasada por argumento
            </summary>
            <param name="configuracionPuerto">Configuración del puerto serie RS232</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.#ctor(Orbita.Comunicaciones.OConfiguracionPuertoRS,Orbita.Comunicaciones.OInformacionPuerto)">
            <summary>
            Constructor del puerto con la configuración e información básica pasada por argumento
            </summary>
            <param name="configuracionPuerto">Configuración del puerto serie RS232</param>
            <param name="info">Información básica del puerto de comunicaciones</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.#ctor(Orbita.Comunicaciones.OConfiguracionPuertoRS,System.Int32,System.String)">
            <summary>
            Constructor del puerto con la configuración e información básica pasada por argumento
            </summary>
            <param name="configuracionPuerto">Configuración del puerto serie RS232</param>
            <param name="idNumerico">Identificador númerico del puerto de comunicaciones</param>
            <param name="tipoPuerto">Tipo del puerto de comunicaciones</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.IniciarComponentes">
            <summary>
            Iniciar todos los componentes de este puerto de comunicaciones, a excepción del inicio del puerto serie, ya que se hace desde la clase padre al configurar el puerto.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ConvertirParidad(Orbita.Comunicaciones.OParidades)">
            <summary>
            Establecer una equivalencia unidireccional entre el tipo Paridades y el tipo Parity.
            </summary>
            <param name="paridad">Paridad a convertir</param>
            <returns>Paridad convertida</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ConvertirBitsStop(Orbita.Comunicaciones.OBitsStop)">
            <summary>
            Establecer una equivalencia unidireccional entre el tipo BitsStop y el tipo StopBits.
            </summary>
            <param name="bitsStop">Bits de parada a convertir</param>
            <returns>Bits de parada convertidos</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ConvertirHandshake(Orbita.Comunicaciones.OHandShakes)">
            <summary>
            Establecer una equivalencia unidireccional entre el tipo HandShakes y el tipo Handshake.
            </summary>
            <param name="handshake">Control de flujo a convertir</param>
            <returns>Control de flujo convertidos</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ConfigurarPuerto(Orbita.Comunicaciones.OConfiguracionPuerto)">
            <summary>
            Crear y configurar el puerto serie RS232.
            </summary>
            <param name="configuracionPuerto">Configuración del puerto RS232 a establecer.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.Abrir">
            <summary>
            Abrir el puerto serie RS232.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.Cerrar">
            <summary>
            Cerrar el puerto serie RS232.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.Enviar(System.Byte[])">
            <summary>
            Enviar por el puerto serie RS232 el vector de bytes TramaTx.
            </summary>
            <param name="tramaTx">Vector de bytes a enviar por el puerto serie RS232.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.RecibirBytes">
            <summary>
            Copia en el vector de bytes tramaRx la información recibida por el puerto de comunicaciones.
            </summary>
            <returns>Vector de bytes donde que contendrá la información recibida hasta el momento.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.BytesRecibidos">
            <summary>
            Devuleve el número de bytes recibidos hasta el momento.
            </summary>
            <returns>El número de bytes recibidos hasta el momento.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ResetBuffer">
            <summary>
            Resetear el buffer de recepcion de datos. Realmente resetea la variable que lleva la posición del último byte recibido, por lo que los datos permanencen en el buffer hasta que son sobreescritos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.BuscarCaracter(System.Byte)">
            <summary>
            Buscar un carácter en el buffer de recepcion de datos.
            </summary>
            <param name="caracter">Carácter a buscar.</param>
            <returns>True encuentra el valor buscado; false en caso contrario.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.Dispose">
            <summary>
            Eliminar los recursos que está utilizando.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.ObtenerPuertosDisponibles">
            <summary>
            Lista los puertos COM RS-232 disponbles en el sistema en un DataTable con 3 columnas:
             - Identificador: identificador numérico dado por el orden de la lista de puertos COM devuelto por el sistema
             - Nombre: nombre del puerto serie RS-232
             - NumeroCOM: número del puerto serie RS-232
            </summary>
            <returns>Un DataTable con los puertos COM RS-232 disponbles en el sistema con 3 columnas:
             - Identificador: identificador numérico dado por el orden de la lista de puertos COM devuelto por el sistema
             - Nombre: nombre del puerto serie RS-232
             - NumeroCOM: número del puerto serie RS-232</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.PuertoRS232_DataReceived(System.Object,System.IO.Ports.SerialDataReceivedEventArgs)">
            <summary>
            Se ejecuta cada vez que se reciben datos por this.PuertoRS232
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OPuertoRS.OnCambioDato(Orbita.Utiles.OEventArgs)">
            <summary>
            Actualiza el estado del buffer en el puerto
            </summary>
            <param name="e"></param>
        </member>
        <member name="E:Orbita.Comunicaciones.OPuertoRS.OrbitaRX">
            <summary>
            Evento para la recepción de datos
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OPuertoRS.PuertoRs232">
            <summary>
            PuertoRS232.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OPuertoRS.EstaAbierto">
            <summary>
            Indica si el puerto serie RS232  está abierto.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OPuertoRS.OManejadorEventoSerie">
            <summary>
            Manejador para la recepción de datos
            </summary>
            <param name="e"></param>
        </member>
        <member name="T:Orbita.Comunicaciones.ORemoting">
            <summary>
            Clase estática de métodos remoting.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ORemoting.Inic">
            <summary>
            Valor de inicialización.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ORemoting.Config">
            <summary>
            Ruta de configuración general.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ORemoting.Remoting">
            <summary>
            Ruta de configuración de servidor
            y cliente para .NET Remoting.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.ORemoting.WellKnownTypes">
            <summary>
            Colección de  tipos  conocidos
            en el establecimiento remoting.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.InicConfiguracionServidor(System.String,System.String,System.Int32,System.String)">
            <summary>
            Método de inicialización del configurador de servidor para .NET Remoting.
            </summary>
            <param name="espacioDEnombres">Espacio de nombres del ensamblado.</param>
            <param name="clase">Nombre de la clase.</param>
            <param name="puerto">Puerto de salidad de datos.</param>
            <param name="canal"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.getServidor(System.Int32)">
            <summary>
            Devuelve el servidor remoting de la aplicación
            </summary>
            <param name="servidor">Número de servidor.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.InicConfiguracionCliente(System.Int32[],System.String[],System.Int32[])">
            <summary>
            Método de inicialización del configurador de cliente para .NET Remoting.
            </summary>
            <param name="puerto">Puerto de salidad de datos.</param>
            <param name="maquina">Nombre de la maquina servidor de remoting.</param>
            <param name="numeroServidor">Número de servidor remoting.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.GetObject(System.Type)">
            <summary>
            Obtener objeto de tipo remoting por el cliente
            de conexión.
            </summary>
            <param name="tipo">Interface de eventos y métodos remoting.</param>
            <returns>Objeto con el establecimiento de conexión.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.GetCanal(System.String,System.String)">
            <summary>
            Obtiene el canal para establecer la comunicación remota
            </summary>
            <param name="ip"></param>
            <param name="puerto"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.Configurar(System.String)">
            <summary>
            Configurar Remoting a partir de la información
            del  fichero creado  en  los  inicializadores.
            </summary>
            <param name="fichero">Fichero de configuración</param>
        </member>
        <member name="M:Orbita.Comunicaciones.ORemoting.InicTipoCache">
            <summary>
            Inicializar el tipo caché.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OWinSockCliente._winsock">
            <summary>
            objeto para establecer el canal TCP
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OWinSockCliente.log">
            <summary>
            Log de la aplicación
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OWinSockCliente._nombre">
            <summary>
            nombre del canal
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente.#ctor(System.String,System.String,Orbita.Trazabilidad.ILogger)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="listener"></param>
            <param name="nombre">nombre del canal</param>
            <param name="log"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente.AceptarConexion(System.Net.Sockets.Socket)">
            <summary>
            Conexión del canal
            </summary>
            <param name="cliente">socket del cliente</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente.Enviar(System.Object)">
            <summary>
            Envia los datos por el canal
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente._winsock_DataArrival(System.Object,Orbita.Winsock.WinsockDataArrivalEventArgs)">
            <summary>
            Evento de recepción de datos
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente._winsock_StateChanged(System.Object,Orbita.Winsock.WinsockStateChangedEventArgs)">
            <summary>
            Indica que el objeto winsock ha cambiado de estado. Trazabilidad del canal.
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente._winsock_ErrorReceived(System.Object,Orbita.Winsock.WinsockErrorReceivedEventArgs)">
            <summary>
            Evento de errores en la comunicación TCP
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OWinSockCliente._winsock_SendComplete(System.Object,Orbita.Winsock.WinsockSendEventArgs)">
            <summary>
            Indica que el objeto winsock ha enviado toda la información
            </summary>
            <param name="sender">Objeto que lanza el evento</param>
            <param name="e">Argumentos del evento</param>
        </member>
        <member name="E:Orbita.Comunicaciones.OWinSockCliente.ODataArrival">
            <summary>
            evento para la recepción de datos en el canal
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OWinSockCliente.OErrorReceived">
            <summary>
            evento para la recepción de errores en el canal
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OWinSockCliente.OSendComplete">
            <summary>
            evento para el envío de datos en el canal
            </summary>
        </member>
        <member name="E:Orbita.Comunicaciones.OWinSockCliente.OStateChanged">
            <summary>
            evento para el cambio de estado en el canal
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OWinSockCliente.Listener">
            <summary>
            nombre del listener
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OWinSockCliente.Estado">
            <summary>
            Estado del canal
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OComunicacionesConstantes">
            <summary>
            Constantes.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC">
            <summary>
            Creación de la estructura
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.Dato">
            <summary>
            Colección de datos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.Lectura">
            <summary>
            Colección de lecturas.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.Alarma">
            <summary>
            Colección de alarmas.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.Equals(System.Object)">
            <summary>
            Sobreescritura del método Equals.
            </summary>
            <param name="obj">Objeto de comparación.</param>
            <returns>Si la instancia y el objeto son iguales.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.GetHashCode">
            <summary>
            Sobreescritura del método GetHashCode.
            </summary>
            <returns>El código Hash de esta instancia.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.op_Equality(Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC,System.String)">
            <summary>
            Operador de igualdad.
            </summary>
            <param name="infoOPC">InfoOPC de tipo contenedor.</param>
            <param name="cadena">Cadena de comparación.</param>
            <returns>La igualdad de la cadena de comparación con el tipo.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC.op_Inequality(Orbita.Comunicaciones.OComunicacionesConstantes.OInfoOPC,System.String)">
            <summary>
            Operador de desigualdad.
            </summary>
            <param name="infoOPC">InfoOPC de tipo contenedor.</param>
            <param name="cadena">Cadena de comparación.</param>
            <returns>La desigualdad de la cadena de comparación con el tipo.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OEventArgsComs">
            <summary>
            Clase que representa eventos con argumentos adicionales tipados (EventArgs).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OEventArgsComs.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgsComs.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OEventArgsComs.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgsComs.
            </summary>
            <param name="idMensaje">Identificador de mensaje.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OEventArgsComs.Valores">
            <summary>
            Valores de las variables.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEventArgsComs.Variables">
            <summary>
            Variables del dispositivo.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEventArgsComs.Id">
            <summary>
            Identificador del mensaje.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OEventArgsComs.IdDispositivo">
            <summary>
            Identificador del mensaje.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeError">
            <summary>
            Este mensaje se utiliza para enviar/recibir una excepción como mensaje de datos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.IOcsMensajeErrorBase">
            <summary>
             Representa un mensaje que se envía y recibe por el servidor y el cliente.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.IOcsMensajeErrorBase.Error">
            <summary>
            Representa el error que se produce durante la ejecución de una aplicación.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeError.#ctor(System.String,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeError.
            </summary>
            <param name="error">Representa el error que se produce durante la ejecución de una aplicación.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeError.#ctor(System.Exception,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeError.
            </summary>
            <param name="error">Representa el error que se produce durante la ejecución de una aplicación.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeError.Error">
            <summary>
            Representa el error que se produce durante la ejecución de una aplicación.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OInfoOPCvida">
            <summary>
            Clase para la generación de eventos de bit de vida
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.#ctor(System.Int32,System.String[])">
            <summary>
            Inicializar una nueva instancia de la clase InfoVida.
            </summary>
            <param name="contador">Número de elementos.</param>
            <param name="enlaces">Descripción del enlace.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.GetVariables">
            <summary>
            Obtener la colección de variables.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.GetVariables(System.Int32)">
            <summary>
            Obtener el elemento i-esimo de la
            colección de variables.
            </summary>
            <param name="indice">Indice de la
            colección de variables.</param>
            <returns>El objeto de la colección.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.SetVariables(System.Int32,System.Int32)">
            <summary>
            Asignar la colección de variables.
            </summary>
            <param name="indice">Indice de la colección.</param>
            <param name="variable">Variable a almacenar.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.GetValores">
            <summary>
            Obtener la colección de valores.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OInfoOPCvida.SetValores(System.String[])">
            <summary>
            Asignar la colección de valores.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoOPCvida.Enlaces">
            <summary>
            Enlace de conexión.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoOPCvida.Variables">
            <summary>
            Colección de variables.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OInfoOPCvida.Valores">
            <summary>
            Colección de valores.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.SerializacionFactory">
            <summary>
            Esta clase es utiliza para crear telegramas serializados. 
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Telegramas.Serializacion.SerializacionFactory.CrearTelegrama">
            <summary>
            Crear un nuevo telegrama.
            </summary>
            <returns>Nuevo telegrama.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion">
            <summary>
            Esta clase se utiliza para automáticamente volver a conectar con el servidor, si se desconectan.
            Intenta volver a conectarse al servidor periódicamente hasta que se establezca la conexión.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.PeriodoReConexionPredeterminado">
            <summary>
            Periodo de reconexión predeterminado.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion._cliente">
            <summary>
            Referencia un cliente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion._timerReconexion">
            <summary>
            Temporizador (timer) para intentar reconectar periódicamente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion._disposed">
            <summary>
            Indica el estado dispose de este objeto.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.IClienteConectable)">
            <summary>
            Inicializar una nueva instancia de la clase ClienteReConexion.
            Esto no es necesario para iniciar ClienteReConexion, ya que, de forma automática
            comienza cuando el cliente desconecta.
            </summary>
            <param name="cliente">Referencia al cliente.</param>
            <exception cref="T:System.ArgumentNullException">Throws ArgumentNullException si el cliente es nulo (null).</exception>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.Dispose">
            <summary>
            Destruir (dispose) este objeto.
            No hace nada si ya está destruido.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.Cliente_Desconectado(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Desconectado de _cliente.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.TimerReconexion_Elapsed(System.Object,System.EventArgs)">
            <summary>
            Manejador del evento Elapsed de _timerReconexion.
            </summary>
            <param name="sender">Contiene una referencia al objeto que provocó el evento.</param>
            <param name="e">EventArgs que contiene los datos del evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Cliente.ClienteReConexion.PeriodoReConexion">
            <summary>
            Periodo de reconexión.
            Valor predeterminado: 20 segundos.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2">
            <summary>
            Esta clase se utiliza para guardar objetos de tipo clave-valor de forma segura.
            Se utiliza internamente System.Collections.Generic.SortedList.
            </summary>
            <typeparam name="TK">Tipo clave.</typeparam>
            <typeparam name="TV">Tipo valor.</typeparam>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.Elementos">
            <summary>
            Colección interna para almacenar elementos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.Lock">
            <summary>
            Utilizado para sincronizar el acceso a la lista de elementos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase ThreadSafeSortedList.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.ContieneClave(`0)">
            <summary>
            Evaluar si la colección contiene la clave especificada.
            </summary>
            <param name="key">Clave a evaluar.</param>
            <returns>True; si la colección contiene la clave proporcionada.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.ContieneValor(`1)">
            <summary>
            Evaluar si la colección contiene el elemento especificado.
            </summary>
            <param name="elemento">Elemento a evaluar.</param>
            <returns>True; si la colección contiene el elemento proporcionado.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.Eliminar(`0)">
            <summary>
            Eliminar un elemento de la colección.
            </summary>
            <param name="key">Clave del elemento a eliminar.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.ObtenerTodosLosElementos">
            <summary>
            Obtener todos los elementos de la colección.
            </summary>
            <returns>Colección de elementos.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.ObtenerPrimerElemento">
            <summary>
            Obtener el primer elemento de la colección.
            </summary>
            <returns>Primer elemento.</returns>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.EliminarTodo">
            <summary>
            Eliminar todos los elementos de la colección.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.ObtenerYEliminarTodosLosElementos">
            <summary>
            Obtener todos los elementos de la colección, previamente los elimina.
            </summary>
            <returns>Colección de elementos.</returns>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.Contar">
            <summary>
            Obtener el número de elementos de la colección.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Colecciones.ThreadSafeSortedList`2.Item(`0)">
            <summary>
            Obtener/añadir/reemplazar un elemento por clave.
            </summary>
            <param name="key">Valor de la clave.</param>
            <returns>Elemento asociado con this clave.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloModbusTCP">
            <summary>
            Protocolo de comunicación para modbus TCP
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloModbusTCP._cabeceraMensajeLecturaF3">
            <summary>
            cabecera del mensaje de lectura F3
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloModbusTCP._cabeceraMensajeEscrituraF16">
            <summary>
            cabecera del mensaje de escritura F16
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloModbusTCP.#ctor">
            <summary>
            Cosntructor de clase para el protocolo modbus TCP
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloModbusTCP.configurarMensajeLecturaF3(System.Int32,System.Int32)">
            <summary>
            Configura el mensaje para la lectura de variables F3
            </summary>
            <param name="registro">direccion inicial de lectura</param>
            <param name="lecturas">numero de lecturas</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloModbusTCP.configurarMensajeEscrituraF16(System.Int32,System.Byte[])">
            <summary>
            Configura el mensaje para las escrituras de variables F6
            </summary>
            <param name="registro">direccion inicial para las escrituras</param>
            <param name="escrituras">valor de las escrituras</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloModbusTCP.Dispose(System.Boolean)">
            <summary>
            Limpia objetos de memoria
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloModbusTCP.CabeceraMensajeLecturaF3">
            <summary>
            cabecera del mensaje de lectura F3
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloModbusTCP.CabeceraMensajeEscrituraF16">
            <summary>
            cabecera del mensaje de escritura F16
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeFactory">
            <summary>
            Esta clase se utiliza para crear y obtener mensajes.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeCambioDato(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Crea un mensaje de tipo cambio de dato que contiene información del objeto OInfoDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeCambioDato(Orbita.Comunicaciones.OInfoDato,System.String)">
            <summary>
            Crea un mensaje de tipo cambio de dato que contiene información del objeto OInfoDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeCambioDato(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo cambio de dato que contiene información del objeto OInfoDato.
            </summary>
            <param name="mensaje"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeAlarma(Orbita.Comunicaciones.OInfoDato)">
            <summary>
            Crea un mensaje de tipo alarma que contiene información del objeto OInfoDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeAlarma(Orbita.Comunicaciones.OInfoDato,System.String)">
            <summary>
            Crea un mensaje de tipo alarma que contiene información del objeto OInfoDato.
            </summary>
            <param name="infoDato">Información del dato que será transmitido.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeAlarma(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo alarma que contiene información del objeto OInfoDato.
            </summary>
            <param name="mensaje"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeComunicaciones(Orbita.Comunicaciones.OEstadoComms)">
            <summary>
            Crea un mensaje de tipo comunicaciones que contiene información del objeto OEstadoComms.
            </summary>
            <param name="infoComm"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeComunicaciones(Orbita.Comunicaciones.OEstadoComms,System.String)">
            <summary>
            Crea un mensaje de tipo comunicaciones que contiene información del objeto OEstadoComms.
            </summary>
            <param name="infoComm"></param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeComunicaciones(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo comunicaciones que contiene información del objeto OEstadoComms.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeLectura(System.Int32,System.String[],System.Boolean)">
            <summary>
            Crea un mensaje de tipo lectura que contiene información del objeto OEstadoComms.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="demanda">Indica si la lectura se realiza bajo demanda al dispositivo.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeLectura(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Crea un mensaje de tipo lectura que contiene información del objeto OEstadoComms.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeLectura(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo lectura que contiene información del objeto OEstadoComms.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeDatos(System.Int32)">
            <summary>
            Crea un mensaje de tipo datos que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeDatos(System.Int32,Orbita.Utiles.OHashtable,System.String)">
            <summary>
            Crea un mensaje de tipo datos que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeDatos(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo datos que contiene información del objeto dispositivo.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeAlarmasActivas(System.Int32)">
            <summary>
            Crea un mensaje de tipo alarmas activas que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeAlarmasActivas(System.Int32,System.Collections.ArrayList,System.String)">
            <summary>
            Crea un mensaje de tipo alarmas activas que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeAlarmasActivas(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo alarmas activas que contiene información del objeto dispositivo.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeDispositivos">
            <summary>
            Crea un mensaje de tipo dispositivo que contiene información del objeto dispositivo.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeDispositivos(System.Int32[],System.String)">
            <summary>
            Crea un mensaje de tipo dispositivo que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivos">Colección de dispositivos.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeDispositivos(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo dispositivo que contiene información del objeto dispositivo.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeEscritura(System.Int32,System.String[],System.Object[],System.String)">
            <summary>
            Crea un mensaje de tipo escritura que contiene información del objeto dispositivo.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="variables">Colección de variables.</param>
            <param name="valores">Colección de valores.</param>
            <param name="canal"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeEscritura(System.String)">
            <summary>
            Crea un mensaje de tipo escritura que contiene información del objeto dispositivo.
            </summary>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeEscritura(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo escritura que contiene información del objeto dispositivo.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeError(System.String,System.String)">
            <summary>
            Crea un mensaje de tipo error que contiene información del objeto error.
            </summary>
            <param name="error">Representa los errores que se producen durante la ejecución de una aplicación.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.CrearMensajeError(System.Exception,System.String)">
            <summary>
            Crea un mensaje de tipo error que contiene información del objeto error.
            </summary>
            <param name="error">Representa los errores que se producen durante la ejecución de una aplicación.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeFactory.ObtenerMensajeError(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Obtiene un mensaje de tipo error que contiene información del objeto error.
            </summary>
            <param name="mensaje">Representa un mensaje que se envía y recibe por el servidor y el cliente.</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivas">
            <summary>
            Este mensaje se utiliza para enviar/recibir un array de bytes como mensaje de datos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivas.#ctor(System.Int32)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaAlarmasActivas.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaAlarmasActivas.#ctor(System.Int32,System.Collections.ArrayList,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaAlarmasActivas.
            </summary>
            <param name="dispositivo">Dispositivo de conexión.</param>
            <param name="datos">Colección de datos de alarmas activas.</param>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensaje)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OProtocoloHttp">
            <summary>
            Clase para la comunicación HTTP
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloHttp._respuesta">
            <summary>
            Respuesta obtenida del servicio Web.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.OProtocoloHttp._caracteresEscapeBody">
            <summary>
            Definición de los carácteres de escape.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloHttp.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.OProtocoloHttp.Solicitud(System.Uri)">
            <summary>
            Método de solicitud de datos al servicio Web.
            </summary>
            <param name="uri"></param>
        </member>
        <member name="E:Orbita.Comunicaciones.OProtocoloHttp.EnviarOHttpCompletado">
            <summary>
            Evento que se ejecuta tras realizar la solicitud al servicio Web.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.CuerpoRespuesta">
            <summary>
            Cuerpo de la respuesta.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.TiempoRespuesta">
            <summary>
            Tiempo de respuesta.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.CaracteresEscapeBody">
            <summary>
            Carácteres de escape HTML.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.CodigoEstado">
            <summary>
            Código de estado.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.Cabeceras">
            <summary>
            Cabeceras.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.LineaDEestado">
            <summary>
            Línea de estado.
            </summary>
        </member>
        <member name="P:Orbita.Comunicaciones.OProtocoloHttp.Timeout">
            <summary>
            Timeout.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1">
            <summary>
            Esta clase se utiliza para procesar elementos de forma secuencial en procesos multihilo (Multithread).
            </summary>
            <typeparam name="TElemento">Tipo de elemento.</typeparam>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._metodo">
            <summary>
            El método delegado que se llama para procesar elementos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._cola">
            <summary>
            Cola de elementos. Se utiliza para procesar elementos secuencialmente.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._tareaActual">
            <summary>
            Una referencia a la tarea actual que se está procesando un elemento en el método ProcesarElemento.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._estaProcesando">
            <summary>
            Indica el estado del procesamiento de elementos.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._estaIniciado">
            <summary>
            Un valor booleano para controlar el funcionamiento de la clase.
            </summary>
        </member>
        <member name="F:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1._objSincronizacion">
            <summary>
            Este objeto sólo se utiliza para la sincronización de threads (bloqueo).
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1.#ctor(System.Action{`0})">
            <summary>
            Inicializar una nueva instancia de la clase ProcesadorElementosSecuenciales.
            </summary>
            <param name="metodo">El método delegado que se llama para procesar elementos.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1.EncolarMensaje(`0)">
            <summary>
            Añadir un elemento a la cola y procesarlo.
            </summary>
            <param name="elemento">Elemento que se añade a la cola.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1.Iniciar">
            <summary>
            Iniciar el procesamiento de elementos.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1.Terminar">
            <summary>
            Terminar el procesamiento de elementos y esperar la detención del elemento actual.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Threading.ProcesadorElementosSecuenciales`1.ProcesarElemento">
            <summary>
            Este método se ejecuta en un nuevo hilo (thread) para procesar elementos de la cola.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.MensajePing">
            <summary>
            Este mensaje se utiliza para enviar/recibir mensajes de tipo ping.
            Mensajes de ping se utiliza para mantener viva la conexión entre el servidor y el cliente.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajePing.#ctor">
            <summary>
             Inicializar una nueva instancia de la clase MensajePing.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajePing.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase MensajePing.
            </summary>
            <param name="idMensajeRespuesta">Identificador del mensaje de respuesta.</param>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajePing.ToString">
            <summary>
            Invalida el método ToString() para devolver una cadena que representa la instancia de objeto.
            </summary>
            <returns>Una cadena (string) que representa este objeto.</returns>
        </member>
        <member name="T:Orbita.Comunicaciones.MensajeEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.MensajeEventArgs.#ctor(Orbita.Comunicaciones.IMensaje)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.MensajeEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionEventArgs">
            <summary>
            Almacena información del canal de comunicación que será utilizada por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionEventArgs.#ctor(Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.ICanalComunicacion)">
            <summary>
            Inicializar una nueva instancia de la clase CanalComunicacionEventArgs.
            </summary>
            <param name="canal">Canal de comunicación que será suscrito por este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.Protocolos.Tcp.Comunicacion.Canales.CanalComunicacionEventArgs.Canal">
            <summary>
            Canal de comunicación que será suscrito por este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeComunicacionesEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeComunicacionesEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeComunicaciones)">
            <summary>
            Inicializar una nueva instancia de la clase MensajeComunicacionesEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeComunicacionesEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
        <member name="T:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosEventArgs">
            <summary>
            Almacena el mensaje que será utilizado por el evento de suscripción.
            </summary>
        </member>
        <member name="M:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosEventArgs.#ctor(Orbita.Comunicaciones.IOcsMensajeLecturaDispositivos)">
            <summary>
            Inicializar una nueva instancia de la clase OcsMensajeLecturaDispositivosEventArgs.
            </summary>
            <param name="mensaje">Mensaje que está suscrito a este evento.</param>
        </member>
        <member name="P:Orbita.Comunicaciones.OcsMensajeLecturaDispositivosEventArgs.Mensaje">
            <summary>
            Mensaje que está suscrito a este evento.
            </summary>
        </member>
    </members>
</doc>
