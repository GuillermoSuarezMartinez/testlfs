<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orbita.Utiles</name>
    </assembly>
    <members>
        <member name="T:Orbita.Utiles.OStringEnumerado">
            <summary>
            Clases para dotar de atributos a los tipos enumerados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OStringEnumerado.tipo">
            <summary>
            Tipo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OStringEnumerado.valores">
            <summary>
            Valores.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Orbita.Utiles.OStringEnumerado"/> instance.
            </summary>
            <param name="tipo">Enum type.</param>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValorString(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valor">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValoresString">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetListaValores">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValorString(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="valor">Value.</param>
            <returns>String Value associated via a <see cref="T:Orbita.Utiles.OAtributoEnumerado"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="tipo">Type.</param>
            <param name="valor">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="tipo">Type.</param>
            <param name="valor">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="tipo">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="tipo">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:Orbita.Utiles.OStringEnumerado.TipoEnumerado">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradosHeredable">
            <summary>
            Clase que agrupa a un conjunto de enumerados
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradosHeredable.ListaEnumerados">
            <summary>
            Lista de los enumerados que contiene
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.Parse``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nombre"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.Parse``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OMath">
            <summary>
            Clase estática con métodos matemáticos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.DegreeToRadian(System.Double)">
            <summary>
            Convierte un ángulo de grados a radianes
            </summary>
            <param name="angle">Ángulo en grados</param>
            <returns>Ángulo en radianes</returns>
        </member>
        <member name="M:Orbita.Utiles.OMath.RadianToDegree(System.Double)">
            <summary>
            Convierte un ángulo de radianes a grados
            </summary>
            <param name="angle">Ángulo en radianes</param>
            <returns>Ángulo en grados</returns>
        </member>
        <member name="M:Orbita.Utiles.OMath.Angulo(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calcula el ángulo (en grados) entre 3 puntos (que definen dos rectas)
            </summary>
            <param name="punto a">end point</param>
            <param name="interseccion">Punto central</param>
            <param name="punto b">end point</param>
            <returns>angulo (0 a 180)</returns>
        </member>
        <member name="M:Orbita.Utiles.OMath.Distancia(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>
            Calcula la distancia euclídea entre dos puntos
            </summary>
            <param name="a">Punto de origen</param>
            <param name="b">Punto de destino</param>
            <returns>Distancia entre los puntos</returns>
        </member>
        <member name="M:Orbita.Utiles.OMath.CalculoLineaMinimosCuadrados(System.Drawing.PointF[],System.Double@,System.Double@)">
            <summary>
            Calcula los parámetros m y b tal que y=m*x+b de la línea que más se aproxima a la nube de puntos pasada por parámetro
            No válido para líneas verticales!!!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.CalculoLineaMinimosCuadrados(System.Drawing.PointF[],System.Int32,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calcula los parámetros m y b tal que y=m*x+b de la línea que más se aproxima a la nube de puntos pasada por parámetro.
            No válido para líneas verticales!!!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.CalculoLineaMinimosCuadrados(System.Collections.Generic.List{System.Drawing.PointF},System.Double@,System.Double@)">
            <summary>
            Calcula los parámetros m y b tal que y=m*x+b de la línea que más se aproxima a la nube de puntos pasada por parámetro.
            No válido para líneas verticales!!!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.CalculoLineaMinimosCuadrados(System.Collections.Generic.List{System.Drawing.PointF},System.Double@,System.Double@,System.Double@)">
            <summary>
            Calcula los parámetros m y b tal que y=m*x+b de la línea que más se aproxima a la nube de puntos pasada por parámetro.
            No válido para líneas verticales!!!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.CalculoLineaMinimosCuadrados(System.Collections.Generic.List{System.Drawing.PointF},System.Int32,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Calcula los parámetros m y b tal que y=m*x+b de la línea que más se aproxima a la nube de puntos pasada por parámetro.
            No válido para líneas verticales!!!
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OMensajes">
            <summary>
            Clase OMensajes.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OMensajes.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.ObtenerDetalle(System.Exception)">
            <summary>
            Obtiene el detalle del error en la clase OMensajesDetalle.
            </summary>
            <param name="ex">Excepción.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.String)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.Exception)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="ex">Excepción.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.String,System.Exception)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="ex">Excepción</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAviso(System.String)">
            <summary>
            Muestra mensaje de aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarInfo(System.String)">
            <summary>
            Mostrar mensaje informativo.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.Mostrar(System.String,Orbita.Utiles.OTipoMensaje)">
            <summary>
            Mostrar mensaje genérico
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="tipoMensaje">Tipo de mensaje a mostrar.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNo(System.String)">
            <summary>
            Mostrar pregunta.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNo(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar pregunta.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNoCancelar(System.String)">
            <summary>
            Mostrar pregunta con cancelar.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNoCancelar(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar pregunta con cancelar.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAvisoSiNo(System.String)">
            <summary>
            Mostrar aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAvisoSiNo(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OTipoMensaje">
            <summary>
            Enumerado que describe el tipo de mensaje a mostrar
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.identificador">
            <summary>
            Identificador de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.nombre">
            <summary>
            Nombre de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.ruta">
            <summary>
            Ruta de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.extension">
            <summary>
            Extensión de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.copiarENdisco">
            <summary>
            Indica si debe ser copiado en disco.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero.copiarENbaseDEdatos">
            <summary>
            Indica si debe ser copiado en Base
            de datos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OFichero.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.#ctor(System.String,Orbita.Utiles.Extension,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OFichero.
            </summary>
            <param name="identificador">Identificador del fichero.</param>
            <param name="extension">Extensión del fichero.</param>
            <param name="copiarEnDisco">Determinar si copiar dicho fichero en disco.</param>
            <param name="copiarENbd">Determinar si copiar dicho fichero en base de datos.</param>
        </member>
        <member name="F:Orbita.Utiles.OFichero.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Identificador">
            <summary>
            Identificador de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Nombre">
            <summary>
            Nombre de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Ruta">
            <summary>
            Ruta de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.RutaCompleta">
            <summary>
            Ruta completa de fichero. Ruta + nombre.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.CopiarENdisco">
            <summary>
            Copiar en disco.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.CopiarENbaseDEdatos">
            <summary>
            Copiar en base de datos.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Item(System.String,System.String)">
            <summary>
            Comprueba la existencia de los directorios
            y subdirectorios donde guardar el fichero.
            </summary>
            <param name="identificador">Identificador del
            dispositivo.</param>
            <param name="directorio">Directorio origen.</param> 
            <returns>Ruta destino del stream.</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoHeredable">
            <summary>
            Clase utilizada para permitir la herencia de enumerados
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Nombre">
            <summary>
            Nombre del enumerado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Descripcion">
            <summary>
            Descripcion
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Valor">
            <summary>
            Valor del enumerado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoHeredable.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OCola">
            <summary>
            Queue .NET.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.ICola">
            <summary>
            Interfaz para colas
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ICola.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.ICola.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="F:Orbita.Utiles.OCola._cola">
            <summary>
            Colección definida, cola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OCola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objecto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.OCola.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Limpiar">
            <summary>
            Método de borrado total de la cola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.Existe(System.Object)">
            <summary>
            Método de comprobación de aparición del objeto en la cola.
            </summary>
            <param name="identificador">Idenficador del objeto encolado.</param>
            <returns>La existencia o no del objeto.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Contar">
            <summary>
            Método contador de elementos de la cola.
            </summary>
            <returns>Número de elementos de la cola.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Primero">
            <summary>
            Método que obtiene sin borrarlo el primer
            elemento de la cola.
            </summary>
            <returns>El primer elemento de la cola.</returns>
        </member>
        <member name="P:Orbita.Utiles.OCola.Cola">
            <summary>
            Colección definida, cola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.EncontrarProceso(System.String,System.String)">
            <summary>
            Mata determinado proceso
            </summary>
            <param name="nombre">Nombre del proceso</param>
            <returns>Verdadero si el proceso ha sido matado</returns>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.MatarProceso(System.String,System.String)">
            <summary>
            Mata determinado proceso
            </summary>
            <param name="nombre">Nombre del proceso</param>
            <returns>Verdadero si el proceso ha sido matado</returns>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.IniciarProceso(System.String)">
            <summary>
            Inicia una aplicación
            </summary>
            <param name="ruta">Ruta del ejecutable</param>
            <returns>Verdadero si la aplicación se ha ejecutado con éxito</returns>
        </member>
        <member name="T:Orbita.Utiles.ORepositorio">
            <summary>
            Repositorio de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ORepositorio.shilos">
            <summary>
            Repositorio de hilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.#ctor">
            <summary>
            Constructor estático de la clase Repositorio.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.GetHilos">
            <summary>
            Obtener la colección de hilos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.SetHilos(Orbita.Utiles.OHilos)">
            <summary>
            Asignar la colección de hilos.
            </summary>
            <param name="hilos">Colección de hilos.</param>
        </member>
        <member name="T:Orbita.Utiles.OSingleton`1">
            <summary>
            Clase que implementa la estructura tipo patrón singelton
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSingleton`1._Instancia">
            <summary>
            Instancia única del objeto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSingleton`1.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSingleton`1.Constructor">
            <summary>
            Constructror de los logs
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OSingleton`1.Instancia">
            <summary>
            Instancia única del objeto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OReglaNomenclaturaNet">
            <summary>
            Clase con utilidades para la validación de nombres de clases ensamblados, propiedades...
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OReglaNomenclaturaNet.ValidarNomenclaturaPropiedadNet(System.String)">
            <summary>
            Valida si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...
            </summary>
            <param name="valor">Nombre a validar</param>
            <returns>Verdadero si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...</returns>
        </member>
        <member name="M:Orbita.Utiles.OReglaNomenclaturaNet.ValidarNomenclaturaEnsambladoNet(System.String)">
            <summary>
            Valida si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...
            </summary>
            <param name="valor">Nombre a validar</param>
            <returns>Verdadero si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...</returns>
        </member>
        <member name="M:Orbita.Utiles.OReglaNomenclaturaNet.ValidarNomenclaturaEspacioNombresNet(System.String)">
            <summary>
            Valida si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...
            </summary>
            <param name="valor">Nombre a validar</param>
            <returns>Verdadero si el nombre cumple las reglas de nomenclatura para clases, ensamblados, propiedades...</returns>
        </member>
        <member name="F:Orbita.Utiles.ONomenclaturaNetException.Nombre">
            <summary>
            Nombre que no es válido
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ONomenclaturaNetException.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ONomenclaturaNetException.#ctor(System.String)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OServicioWindows">
            <summary>
            OServicioWindows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.nombre">
            <summary>
            Nombre del servicio.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.ruta">
            <summary>
            Ruta del ejecutable.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.maquina">
            <summary>
            Máquina donde se encuentra el servicio Windows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.timeOutMilisegundos">
            <summary>
            TimeOut de espera hasta el inicio/paro del servicio Windows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.controlador">
            <summary>
            Controlador del servicio instalado.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="nombre">Nombre del servicio.</param>
            <param name="ruta">Ruta del servicio.</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Instalar">
            <summary>
            Instala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Desinstalar">
            <summary>
            Desinstala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Iniciar">
            <summary>
            Inicia el servicio
            </summary>
            <returns>Verdadero si se ha iniciado con éxtio</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Detener">
            <summary>
            Inicia el servicio
            </summary>
            <returns>Verdadero si se ha iniciado con éxtio</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Instalar(System.Boolean)">
            <summary>
            Instala o desinstala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.IsInstalled">
            <summary>
            Consulta si el servicio está instalado
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OServicioWindows.Instalado">
            <summary>
            Informa si existe algún servicio con el nombre especificado, en caso contrario se supone que el servicio no está instalado
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OServicioWindows.Estado">
            <summary>
            Estado del servicio
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OASCIIUtiles">
            <summary>
            Utilidades para el trabajo con cáracteres ASCII
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OASCIIUtiles.TablaASCII">
            <summary>
            Tabla ASCII
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Byte)">
            <summary>
            Convierte un caracter ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Byte[])">
            <summary>
            Convierte un conjunto de caracteres ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Collections.Generic.List{System.Byte})">
            <summary>
            Convierte un conjunto de caracteres ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Char)">
            <summary>
            Convierte un caracter ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Char[])">
            <summary>
            Convierte un conjunto de caracteres ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.Collections.Generic.List{System.Char})">
            <summary>
            Convierte un conjunto de caracteres ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OASCIIUtiles.ASCII2String(System.String)">
            <summary>
            Convierte un conjunto de caracteres ASCII en texto inteligible para su interpretación
            </summary>
            <param name="dato"></param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OObjeto">
            <summary>
            Clase estática destinada a alojar métodos genéricos para el manejo de objetos de forma segura
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.IsTypeOf(System.Object,System.Type[])">
            <summary>
            Función que devuelve si el objeto pertenece a alguno de los tipos listados
            </summary>
            <param name="o">Objeto que se quiere conocer el tipo</param>
            <param name="types">Vector de tipos con lo que se ha de comparar el tipo del objeto</param>
            <returns>Verdadero si el tipo del objeto está dentro de la lista de tipos pasados como parámetros</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.IsNumeric(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo numérico
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo numérico</param>
            <returns>Verdadero si el tipo del objeto es numérico</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.ToString(System.Object)">
            <summary>
            Convierte un objeto a string
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.CompararObjetos(System.Object,System.Object)">
            <summary>
            Realiza una comparación entre dos objetos
            </summary>
            <param name="valor1">Primer objeto a comparar</param>
            <param name="valor2">Segundo objeto a comparar</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OObjetoBase`1">
            <summary>
            Clase base para el trabajo de forma robusta con variables
            </summary>
        </member>
        <member name="T:Orbita.Utiles.IObjetoBase">
            <summary>
            Interfaz para el trabajo de forma robusta con variables
            </summary>
        </member>
        <member name="M:Orbita.Utiles.IObjetoBase.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.IObjetoBase.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="valor">valor no permitido</param>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Valido">
            <summary>
            Indica que el valor asignado es válido
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.ValorPorDefectoGenerico">
            <summary>
            Valor por defecto del objeto
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.ValorGenerico">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1.LanzarExcepcionSiValorNoValido">
            <summary>
            Indica que se ha de lanzar una excepción de tipo InvalidValueException cuando el valor a establecer no sea el correcto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Valor">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._ValorPorDefecto">
            <summary>
            Valor por defecto del objeto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="valor">valor no permitido</param>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Valor">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Valido">
            <summary>
            Indica que el valor asignado es válido
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.ValorPorDefecto">
            <summary>
            Valor por defecto del objeto
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.ValorPorDefectoGenerico">
            <summary>
            Valor por defecto del objeto
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.ValorGenerico">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoObjetoRobusto">
            <summary>
            Define el conjunto de módulos del sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoObjetoRobusto.ResultadoCorrecto">
            <summary>
            Módulo de funciones comunes del sistema. 
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoObjetoRobusto.ValorTipoIncorrecto">
            <summary>
            El valor a asignar no es del tipo correcto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoRobusto">
            <summary>
            Clase que implementa el enumerado de los módulos del sistema
            </summary>
        </member>
        <member name="M:Orbita.Utiles.EnumEstadoRobusto.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constuctor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OTexto">
            <summary>
            Asignación de una variable a un campo de tipo texto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.MaxLength">
            <summary>
            Máxima longitud del string
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.AdmiteVacio">
            <summary>
            Indica que es admitido como válido la cadena vacia
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.LimitarLongitud">
            <summary>
            Corta el texto en caso de sobreparsar la longitud máxima
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTexto.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTexto.ValidarTexto(System.Object,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Reemplazar(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Case insensitive version of String.Replace().
            </summary>
            <param name="s">String that contains patterns to replace</param>
            <param name="oldValue">Pattern to find</param>
            <param name="newValue">New pattern to replaces old</param>
            <param name="comparisonType">String comparison type</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OTextoExtension">
            <summary>
            Asignación de una variable a un campo de tipo texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTextoExtension.ValidarTexto(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTextoExtension.ValidarTexto(System.Object,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTextoExtension.ValidarTexto(System.Object)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTextoExtension.ValidarTexto(System.Object,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTextoExtension.Reemplazar(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Case insensitive version of String.Replace().
            </summary>
            <param name="s">String that contains patterns to replace</param>
            <param name="oldValue">Pattern to find</param>
            <param name="newValue">New pattern to replaces old</param>
            <param name="comparisonType">String comparison type</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoTextoRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoTextoRobusto.LongitudSobrepasada">
            <summary>
            La longitud del texto es demasiado larga
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoTextoRobusto.CadenaVacia">
            <summary>
            El texto no contiene ningun caracter
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoTexto">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoTexto.ValoresPermitidos">
            <summary>
            Valores permitidos para el texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.#ctor(System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoTextoExtension">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTextoExtension.ValidarEnumeradoTexto(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTextoExtension.ValidarEnumeradoTexto(System.Object,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTextoExtension.ValidarEnumeradoTexto(System.Object,System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumerado`1">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,System.String,`0,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.AnalizaEnumerado(System.Type,System.String,System.Object)">
            <summary>
            Se utiliza con enumerados para convertir un valor de texto en un enumerado del tipo indicado
            </summary>
            <param name="enumType">Tipo del enumerado al que deseamos convertir</param>
            <param name="valor">Texto que queremos convertir a enumerado</param>
            <param name="defecto">Valor por defecto en el caso que el texto no coincida con ningun elemento del enumerado</param>
            <returns>Devuelve el enumerado correspondiente con el texto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.EnColeccion(System.Int32,System.Int32[])">
            <summary>
            Se utiliza con enumerados y devuelve verdadero si el enumerado está contenido en el valor
            </summary>
            <param name="valor">Valor del cual se quiere saber si contiene cieto enumerado</param>
            <param name="coleccion">Enumerado que deseamos comparar con el valor</param>
            <returns>Devuelve verdadero si el enumerado está contenido en el valor</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.ValidarEnumerado(System.Object,Orbita.Utiles.EnumEstadoRobusto@,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.ValidarEnumerado(System.Object,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.ValidarEnumerado(System.Object,System.String,`0,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoExtension">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoExtension.ValidarEnumerado``1(System.Object,Orbita.Utiles.EnumEstadoRobusto@,``0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoExtension.ValidarEnumerado``1(System.Object,``0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoExtension.ValidarEnumerado``1(System.Object,System.String,``0,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoEnumRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnumRobusto.ValorNoPermitido">
            <summary>
            El valor a asignar no está permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEntero">
            <summary>
            Asignación de una variable a un campo de tipo entero
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEntero.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEntero.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEntero.Formato">
            <summary>
            Formato cultural de los números en coma flotante
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.#ctor(System.String,System.Int32,System.Int32,System.IFormatProvider,System.Int32,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Int32,System.IFormatProvider,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.Int32,System.Int32,System.IFormatProvider,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.String,System.Int32,System.Int32,System.IFormatProvider,System.Int32,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EsEntero(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo entero
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo entero</param>
            <returns>Verdadero si el tipo del objeto es entero</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnRango(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnRango(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnRango(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnRango(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnRango(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarRango(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarRango(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarRango(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarRango(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarRango(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnTolerancia(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnTolerancia(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnTolerancia(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnTolerancia(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnTolerancia(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarTolerancia(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarTolerancia(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarTolerancia(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarTolerancia(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.AsegurarTolerancia(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnteroExtension">
            <summary>
            Asignación de una variable a un campo de tipo entero
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Int32,System.IFormatProvider,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,System.Int32,System.Int32,System.IFormatProvider,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.ValidarEntero(System.Object,System.String,System.Int32,System.Int32,System.IFormatProvider,System.Int32,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EsEntero(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo entero
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo entero</param>
            <returns>Verdadero si el tipo del objeto es entero</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnRango(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnRango(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnRango(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnRango(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnRango(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarRango(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarRango(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarRango(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarRango(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarRango(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnTolerancia(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnTolerancia(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnTolerancia(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnTolerancia(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.EnTolerancia(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarTolerancia(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarTolerancia(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarTolerancia(System.Int16,System.Int16,System.Int16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarTolerancia(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroExtension.AsegurarTolerancia(System.Byte,System.Byte,System.Byte)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoEnteroRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnteroRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnteroRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEnteroLargo">
            <summary>
            Asignación de una variable a un campo de tipo entero
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnteroLargo.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnteroLargo.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnteroLargo.Formato">
            <summary>
            Formato cultural de los números en coma flotante
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.#ctor(System.String,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.#ctor(System.String,System.Int64,System.Int64,System.IFormatProvider,System.Int64,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int64,System.Int64,System.IFormatProvider,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,System.Int64,System.Int64,System.IFormatProvider,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,System.String,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.Validar(System.Object,System.String,System.Int64,System.Int64,System.IFormatProvider,System.Int64,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.EsEnteroLargo(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo entero
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo entero</param>
            <returns>Verdadero si el tipo del objeto es entero</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.EnRango(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.EnRango(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.AsegurarRango(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.AsegurarRango(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.EnTolerancia(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.EnTolerancia(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.AsegurarTolerancia(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargo.AsegurarTolerancia(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnteroLargoExtension">
            <summary>
            Asignación de una variable a un campo de tipo entero
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int64,System.Int64,System.IFormatProvider,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,System.Int64,System.Int64,System.IFormatProvider,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,System.String,System.Int64,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.ValidarEnteroLargo(System.Object,System.String,System.Int64,System.Int64,System.IFormatProvider,System.Int64,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.EsEnteroLargo(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo entero
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo entero</param>
            <returns>Verdadero si el tipo del objeto es entero</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.EnRango(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.EnRango(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.AsegurarRango(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.AsegurarRango(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.EnTolerancia(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.EnTolerancia(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.AsegurarTolerancia(System.Int64,System.Int64,System.Int64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnteroLargoExtension.AsegurarTolerancia(System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.ODecimal">
            <summary>
            Asignación de una variable a un campo de tipo decimal
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ODecimal.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ODecimal.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ODecimal.Formato">
            <summary>
            Formato cultural de los números en coma flotante
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.#ctor(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.#ctor(System.String,System.Double,System.Double,System.IFormatProvider,System.Double,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="value">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Double,System.Double,System.IFormatProvider,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.Double,System.Double,System.IFormatProvider,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.String,System.Double,System.Double,System.IFormatProvider,System.Double,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.EsDecimal(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo decimal
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo decimal</param>
            <returns>Verdadero si el tipo del objeto es decimal</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.EnRango(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.AsegurarRango(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.EnTolerancia(System.Double,System.Double,System.Double)">
            <summary>
            Compara dos valores decimales para definir si son similares, con una diferencia menor que sigma
            </summary>
            <param name="valor">Primer valor a comparar</param>
            <param name="media">Segundo valor a comparar</param>
            <param name="tolerancia">Diferencia máxima entre ambos valores</param>
            <returns>Verdadero si los valores son menores que sigma</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.AsegurarTolerancia(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.ODecimalExtension">
            <summary>
            Asignación de una variable a un campo de tipo decimal
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.ValidarDecimal(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.ValidarDecimal(System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.ValidarDecimal(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.ValidarDecimal(System.Object,System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.EsDecimal(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo decimal
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo decimal</param>
            <returns>Verdadero si el tipo del objeto es decimal</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.EnRango(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.AsegurarRango(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.EnTolerancia(System.Double,System.Double,System.Double)">
            <summary>
            Compara dos valores decimales para definir si son similares, con una diferencia menor que sigma
            </summary>
            <param name="valor">Primer valor a comparar</param>
            <param name="media">Segundo valor a comparar</param>
            <param name="tolerancia">Diferencia máxima entre ambos valores</param>
            <returns>Verdadero si los valores son menores que sigma</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimalExtension.AsegurarTolerancia(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoDecimalRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoDecimalRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoDecimalRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OBooleano">
            <summary>
            Asignación de una variable a un campo de tipo booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Boolean)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,System.Boolean)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.OBooleanoExtension">
            <summary>
            Asignación de una variable a un campo de tipo booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleanoExtension.ValidarBooleano(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Boolean)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleanoExtension.ValidarBooleano(System.Object,System.Boolean)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleanoExtension.ValidarBooleano(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleanoExtension.ValidarBooleano(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoBoolRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OIntervaloTiempo">
            <summary>
            Asignación de una variable a un campo de tipo intervalo de tiempo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OIntervaloTiempo.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OIntervaloTiempo.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.#ctor(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="value">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.EnRango(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.AseguraRango(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.EnTolerancia(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.AseguraTolerancia(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.OIntervaloTiempoExtension">
            <summary>
            Asignación de una variable a un campo de tipo intervalo de tiempo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.ValidarIntervaloTiempo(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.ValidarIntervaloTiempo(System.Object,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.ValidarIntervaloTiempo(System.Object,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.ValidarIntervaloTiempo(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.ValidarIntervaloTiempo(System.Object,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.EnRango(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.AseguraRango(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.EnTolerancia(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempoExtension.AseguraTolerancia(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OFechaHora">
            <summary>
            Asignación de una variable a un campo de tipo fecha
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFechaHora.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFechaHora.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.#ctor(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.GregorianoAJuliano(System.Int32,System.Int32,System.Int32)">
            <summary>
            Conversión de día gregocriano a juliano
            </summary>
            <param name="dia">Día</param>
            <param name="mes">Mes</param>
            <param name="anno">Año</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.JulianoAGregoriano(System.Int64)">
            <summary>
            Conversión de dia juliano a gregoriano
            </summary>
            <param name="jdia">Día juliano</param>
            <returns>Fecha gregoriana</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.FechaATextoSimple(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del día actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.FechaHoraATextoSimple(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del momento actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.EnRango(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.AseguraRango(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.EnTolerancia(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.AseguraTolerancia(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.OFechaHoraExtension">
            <summary>
            Asignación de una variable a un campo de tipo fecha
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.ValidarFechaHora(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.ValidarFechaHora(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.ValidarFechaHora(System.Object,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.ValidarFechaHora(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.ValidarFechaHora(System.Object,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.FechaATextoSimple(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del día actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.FechaHoraATextoSimple(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del momento actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.EnRango(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.AseguraRango(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.EnTolerancia(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHoraExtension.AseguraTolerancia(System.DateTime,System.DateTime,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoFechaHoraRobusta">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoFechaHoraRobusta.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoFechaHoraRobusta.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OBinario">
            <summary>
            Trabajo con números binarios
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.Byte,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.UInt16,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.UInt32,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.UInt64,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt16@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt64@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.Byte,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt16,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt32,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt64,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="T:Orbita.Utiles.Extension">
            <summary>
            Enumeración que representa las posibles 
            extensiones que puede tener un fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Extension.Xml">
            <summary>
            Extensión .XML.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Extension.Jpg">
            <summary>
            Extensión .JPG.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OResetManual">
            <summary>
            Notifica que se ha producido un evento a uno o varios subprocesos en espera.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OResetManual._eventoResetManual">
            <summary>
            Atributo que marca la sincronización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OResetManual.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.#ctor(System.Int16)">
            <summary>
            Inicializar una nueva instancia de la clase OResetManual.
            </summary>
            <param name="contador">Número de eventos ManualResetEvent
            que van a ser creados.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.GetEvento">
            <summary>
            Método que devuelve la colección.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir">
            <summary>
            Dormir el hilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.TimeSpan)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="tiempo">Tiempo en TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16)">
            <summary>
            Dormir el hilo.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16,System.Int16)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="indice">Indice de reset.</param>
            <param name="tiempo">Tiempo en segundos.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16,System.TimeSpan)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="indice">Indice de reset.</param>
            <param name="tiempo">Tiempo en TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Despertar">
            <summary>
            Indicar al escritor que escribimos en la cola
            de resultados para que salga de su letargo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Despertar(System.Int16)">
            <summary>
            Indicar al escritor que escribimos en la cola
            de resultados para que salga de su letargo.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Resetear">
            <summary>
            Reset para la siguiente vez que se mande un Set.
            Es necesario invocarlo por haber utilizado 
            ManualResetEvent.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Resetear(System.Int16)">
            <summary>
            Reset para la siguiente vez que se mande un Set.
            Es necesario invocarlo por haber utilizado 
            ManualResetEvent.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Inicializar(System.Int16)">
            <summary>
            Inicializar el array de ManualResetEvent
            en función del contador de eventos.
            </summary>
            <param name="contador">Contador de eventos.</param>
        </member>
        <member name="T:Orbita.Utiles.OComm">
            <summary>
            Gestión de comunicaciones
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OComm.GetDisponibilidadPuerto(System.Int32)">
            <summary>
            Obtener la disponibilidad de un puerto.
            </summary>
            <param name="puerto">Número de puerto.</param>
            <returns>Si es no disponible.</returns>
        </member>
        <member name="T:Orbita.Utiles.OEventArgs">
            <summary>
            Clase que representa eventos con argumentos
            adicionales tipados (EventArgs).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEventArgs.arg">
            <summary>
            Argumento adicional desarrollado en el evento.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEventArgs.id">
            <summary>
            Identificador del mensaje
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEventArgs.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgs.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEventArgs.#ctor(System.Object)">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgs.
            </summary>
            <param name="arg">Argumento adicional.</param>
        </member>
        <member name="P:Orbita.Utiles.OEventArgs.Argumento">
            <summary>
            Argumento adicional desarrollado en el evento.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OEventArgs.Id">
            <summary>
            Identificador del mensaje
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OExtensionesColecciones">
            <summary>
            Clase estática que extiende los métodos de las colecciones
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OExtensionesColecciones.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Añade items a un diccionario
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="U"></typeparam>
            <param name="Diccionario"></param>
            <param name="Valores"></param>
        </member>
        <member name="M:Orbita.Utiles.OExtensionesColecciones.Colection2String(System.Collections.ICollection,System.Char)">
            <summary>
            Convierte una colección en una cadena de texto
            </summary>
            <param name="coleccion">Colección que se desea convertir en texto</param>
            <param name="separador">Caracter separador de cada uno de los valores de la colección</param>
            <returns>Cadena de texto con todos los valores de la colección separados por el carácter separador</returns>
        </member>
        <member name="M:Orbita.Utiles.OExtensionesColecciones.String2Collection``1(System.String,System.Char,Orbita.Utiles.OExtensionesColecciones.ConvertFromString{``0})">
            <summary>
            Convierte una cadena de texto en una colección
            </summary>
            <typeparam name="T">Tipo de colección que se desea devolver</typeparam>
            <param name="texto">Texto que se convertira en colección</param>
            <param name="separador">Caracter separador de cada uno de los valores de la colección</param>
            <returns>Objeto de tipo colección con todos los valores que contiene el texto separados por el carácter separador</returns>
        </member>
        <member name="T:Orbita.Utiles.OExtensionesColecciones.ConvertFromString`1">
            <summary>
            Delegado para la conversión del tipo string a cualquier tipo
            </summary>
            <typeparam name="T">Tipo que se desea devolver</typeparam>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OTimer">
            <summary>
             Proporciona un mecanismo para ejecutar métodos en intervalos especificados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTimer._timer">
            <summary>
            Timer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTimer._callBack">
            <summary>
            TimerCallback.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTimer.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OTimer.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(Orbita.Utiles.Tiempo,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Método Change correspondiente, en el primer caso a la llamada a AddHoras, 
            AddMinutos, AddSegundos, en el segundo y tercer caso, correspondiente a la 
            llamada en un día concreto.
            </summary>
            <param name="unidadTiempo">Unidad de tiempo.</param>
            <param name="tiempo">Tiempo correspondiente a horas o minutos o segundos o 
            milisegundos.</param>
            <param name="hora">Hora del timespan.</param>
            <param name="minuto">Minuto del timespan.</param>
            <param name="segundo">Segundo del timespan.</param>
            <param name="milisegundo">Milisegundo del timespan.</param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(Orbita.Utiles.Tiempo,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Método Change correspondiente, en el primer caso a la llamada a AddHoras, 
            AddMinutos, AddSegundos, en el segundo y tercer caso, correspondiente a la 
            llamada en un día concreto.
            </summary>
            <param name="unidadTiempo"></param>
            <param name="tiempo"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dia"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dia"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
            <param name="inversa"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddDias(System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Ejecutar a una hora concreta de un dia concreto y cada mes.
            La función se divide en 2 partes, de forma que no se utiliza el
            segundo parámetro del change, ya que, en cada ejecución del método
            se hace de nuevo una llamada al cálculo del tiempo.
            </summary>
            <param name="dia">Día de ejecución.</param>
            <param name="ts"></param>
            <param name="inverso"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddDias(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta de un dia concreto y cada mes.
            La función se  divide en 2 partes, de  forma que no se  utiliza el
            segundo parámetro del change, ya que, en cada ejecución del método
            se hace de nuevo una llamada al cálculo del tiempo.
            </summary>
            <param name="dia">Día de ejecución.</param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddHoras(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n horas.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddMinutos(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n minutos.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddSegundos(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n segundos.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OTimer.Timer">
            <summary>
            Timer.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OTimer.CallBack">
            <summary>
            TimerCallback.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OWindowsUtils">
            <summary>
            Librería de utilidades para el SO Windows
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.memcpy(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
            memcpy - copy a block of memery
            </summary>
            <param name="dst"></param>
            <param name="src"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.memcpy(System.Int32,System.Int32,System.Int32)">
            <summary>
            memcpy - copy a block of memery
            </summary>
            <param name="dst"></param>
            <param name="src"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.GetTcpTable(System.IntPtr,System.Int32@,System.Boolean)">
            <summary>
            API to get list of connections 
            </summary>
            <param name="pTcpTable"></param>
            <param name="pdwSize"></param>
            <param name="bOrder"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.SetTcpEntry(System.IntPtr)">
            <summary>
            API to change status of connection 
            </summary>
            <param name="pTcprow"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.ntohs(System.Int32)">
            <summary>
            Convert 16-bit value from network to host byte order 
            </summary>
            <param name="netshort"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.htons(System.Int32)">
            <summary>
            Convert 16-bit value back again 
            </summary>
            <param name="netshort"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.ShowStartMenu(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            desplega el menu de inicio de windows
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="cx"></param>
            <param name="cy"></param>
        </member>
        <member name="M:Orbita.Utiles.OWindowsUtils.ShowScreenKeyboard(System.IntPtr)">
            <summary>
            Ejecución del teclado en pantalla
            </summary>
        </member>
        <member name="T:Orbita.Utiles.ManejadorEvento">
            <summary>
            Delegado asociado al evento.
            </summary>
            <param name="sender">Objeto que lanza el evento.</param>
            <param name="e">Dato que puede ser usado en el manejador de evento.</param>
        </member>
        <member name="T:Orbita.Utiles.ManejadorEvento`1">
            <summary>
            Delegado asociado al evento.
            </summary>
            <param name="sender">Objeto que lanza el evento.</param>
            <param name="e">Dato que puede ser usado en el manejador de evento.</param>
        </member>
        <member name="T:Orbita.Utiles.OHashtable">
            <summary>
            Colección de que representa una tabla de dispersión (Hash).
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
            <param name="info">Objeto System.Runtime.Serialization.SerializationInfo 
            que contiene la información que se requiere para serializar el objeto
            System.Collections.Hashtable.</param>
            <param name="context">Objeto System.Runtime.Serialization.StreamingContext
            que contiene el origen y el destino de la secuencia serializada asociada a 
            System.Collections.Hashtable.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor(System.Collections.Hashtable)">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
            <param name="table">Colección hashtable.</param>
        </member>
        <member name="F:Orbita.Utiles.OHashtable.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Add(System.Object,System.Object)">
            <summary>
            Agrega un elemento con  la clave y el  valor 
            especificados a System.Collections.Hashtable.
            </summary>
            <param name="key">Clave del elemento que se va a agregar.</param>
            <param name="value">Valor del elemento que se va a agregar. 
            El valor puede ser null.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Eliminar(System.Object)">
            <summary>
            Método de borrado del elemento en la colección.
            </summary>
            <param name="clave">Clave.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Contar">
            <summary>
            Método contador de elementos de la colección.
            </summary>
            <returns>Número de elementos de la colección.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Existe(System.Object)">
            <summary>
            Método de comprobación de aparición del objeto en la colección.
            </summary>
            <param name="clave">Identificar de key en object.</param>
            <returns>La existencia o no del objeto.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Limpiar">
            <summary>
            Método de borrado total de la colección.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Clonar">
            <summary>
            Clonar una copia superficial del objeto.
            </summary>
            <returns>Una nueva colección clonada.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.CopiarA(System.Exception[],System.Int32)">
            <summary>
            Copia los elementos de la interfaz System.Collections.ICollection en un objeto
             System.Array, a partir de un índice determinado de la clase System.Array.
            </summary>
            <param name="array">Objeto System.Array unidimensional que constituye el destino 
            de los elementos copiados de la interfaz System.Collections.ICollection. 
            System.Array debe tener una indización de base cero.</param>
            <param name="indice">Índice de base cero de array donde comienza la copia.</param>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:Orbita.Utiles.OHashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" -->
        <member name="M:Orbita.Utiles.OHashtable.CopyTo(System.Exception[],System.Int32)">
            <summary>
            Copia los elementos de la interfaz System.Collections.ICollection en un objeto
             System.Array, a partir de un índice determinado de la clase System.Array.
            </summary>
            <param name="array">Objeto System.Array unidimensional que constituye el destino 
            de los elementos copiados de la interfaz System.Collections.ICollection. 
            System.Array debe tener una indización de base cero.</param>
            <param name="indice">Índice de base cero de array donde comienza la copia.</param>
        </member>
        <member name="E:Orbita.Utiles.OHashtable.OnDespuesAdicionar">
            <summary>
            Evento que se ejecuta tras añadir un objeto a la colección.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHashtable.OnDespuesEliminar">
            <summary>
            Evento que se ejecuta tras eliminar un objeto de la colección.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OPair`2">
            <summary>
            Clase utilizada para almacenar un par de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor.</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor.</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OPair`2.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OPair`2.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPair`2.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPair`2.#ctor(`0,`1)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OTriplet`3">
            <summary>
            Clase utilizada para almacenar un trío de valores.
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTriplet`3.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTriplet`3.#ctor(`0,`1,`2)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OQuartet`4">
            <summary>
            Clase utilizada para almacenar un cuarteto de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuartet`4.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuartet`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OQuintet`5">
            <summary>
            Clase utilizada para almacenar un quinteto de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
            <typeparam name="TFifth">Tipo del quinto valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Fifth">
            <summary>
            Quinto valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuintet`5.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuintet`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OSextet`6">
            <summary>
            Clase utilizada para almacenar un sexteto de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
            <typeparam name="TFifth">Tipo del quinto valor</typeparam>
            <typeparam name="TSixth">Tipo del sexto valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.Fifth">
            <summary>
            Quinto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSextet`6.Sixth">
            <summary>
            Sexto valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSextet`6.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSextet`6.#ctor(`0,`1,`2,`3,`4,`5)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OSeptet`7">
            <summary>
            Clase utilizada para almacenar un septeto de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
            <typeparam name="TFifth">Tipo del quinto valor</typeparam>
            <typeparam name="TSixth">Tipo del sexto valor</typeparam>
            <typeparam name="TSeventh">Tipo del séptimo valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Fifth">
            <summary>
            Quinto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Sixth">
            <summary>
            Sexto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeptet`7.Seventh">
            <summary>
            Séptimo valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeptet`7.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeptet`7.#ctor(`0,`1,`2,`3,`4,`5,`6)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OOctet`8">
            <summary>
            Clase utilizada para almacenar un octeto de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
            <typeparam name="TFifth">Tipo del quinto valor</typeparam>
            <typeparam name="TSixth">Tipo del sexto valor</typeparam>
            <typeparam name="TSeventh">Tipo del séptimo valor</typeparam>
            <typeparam name="TOctet">Tipo del octavo valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Fifth">
            <summary>
            Quinto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Sixth">
            <summary>
            Sexto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Seventh">
            <summary>
            Séptimo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OOctet`8.Eighth">
            <summary>
            Octavo valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OOctet`8.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OOctet`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OCronometrosManager">
            <summary>
            Clase estática para el acceso a los cronómetros que se están ejecutandose en el sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometrosManager.ListaCronometros">
            <summary>
            Listado de todos los cronómetros necesarios para el cómputo de tiempos de proceso
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Constructor">
            <summary>
            Constructor de los campos de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Destructor">
            <summary>
            Destruye los campos de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Inicializar">
            <summary>
            Inicializa las variables necesarias para el funcionamiento de los cronómetros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Finalizar">
            <summary>
            Finaliza la ejecución
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.NuevoCronometro(System.String,System.String,System.String)">
            <summary>
            Añade un nuevo cronómetro al sistema
            </summary>
            <param name="codigo">Código identificador del cronómetro</param>
            <param name="nombre">Nombre del cronómetro</param>
            <param name="descripcion">Texto descriptivo del cronómetro</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.EliminaCronometro(System.String)">
            <summary>
            Elimina el cronometro de la lista
            </summary>
            <param name="codigo"></param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.ExisteCronometro(System.String)">
            <summary>
            Informa de la existencia eel cronometro en la lista
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.BuscaCronometro(System.String)">
            <summary>
            Búsca el cronometro en la lista
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Start(System.String)">
            <summary>
            Inicia la cuenta de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.StartPaused(System.String)">
            <summary>
            Inicia la cuenta de forma pausada de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Stop(System.String)">
            <summary>
            Detiene la cuenta de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Pause(System.String)">
            <summary>
            Pausa el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Resume(System.String)">
            <summary>
            Reanuda el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.ContadorEjecuciones(System.String)">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionPromedioEjecucion(System.String)">
            <summary>
            Duración promedio del tiempo que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionTotalEjecucion(System.String)">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.MomentoUltimaEjecucion(System.String)">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionUltimaEjecucion(System.String)">
            <summary>
            Duración de la última ejecución
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Ejecutando(System.String)">
            <summary>
            Indica si el contador está ejecutandose
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.CrearSuscripcion(System.String,Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Suscribe a un determinado cronómetro
            </summary>
            <param name="codigo">Código del cronómetro</param>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.EliminarSuscripcion(System.String,Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Elimina la suscripción a un determinado cronómetro
            </summary>
            <param name="codigo">Código del cronómetro</param>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.CrearSuscripcionTodos(Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Suscribe a todos los cronómetros
            </summary>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.EliminarSuscripcionTodos(Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Elimina la suscripción a todos los cronómetros
            </summary>
            <param name="codigo">Código del cronómetro</param>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.TryGetCronometro(System.String,Orbita.Utiles.OCronometro@)">
            <summary>
            Método para acceder a un cronómetro
            </summary>
            <param name="codigo">Código del cronómetro</param>
            <param name="cronometro">Cronómetro resultante de la búsqueda</param>
            <returns>Devuelve verdadero si el cronómetro ha sido encontrado</returns>
        </member>
        <member name="T:Orbita.Utiles.OCronometro">
            <summary>
            Clase que implementa un cronómetro para la medición de tiempos
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro.CronometroEjecucion">
            <summary>
            Cronómetro de la ejecución del estado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro.EstadoCronometro">
            <summary>
            Estado del cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Codigo">
            <summary>
            Código identificativo del cronómetro.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Nombre">
            <summary>
            Nombre del cronómetro.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Descripcion">
            <summary>
            Texto descriptivo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._ContadorEjecuciones">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._DuracionTotalEjecucion">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._MomentoUltimaEjecucion">
            <summary>
            Momento en el que se ejecutó por última vez
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Start">
            <summary>
            Inicia el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.StartPaused">
            <summary>
            Inicia el cronometro de forma pausada
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Stop">
            <summary>
            Detiene el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Pause">
            <summary>
            Pausa el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Resume">
            <summary>
            Reanuda el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.CrearSuscripcion(Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Suscribe al cronómetro
            </summary>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.EliminarSuscripcion(Orbita.Utiles.OEjecucionCronometroDelegate)">
            <summary>
            Elimina la suscripción al cronómetro
            </summary>
            <param name="delegadoSuscriptor">Delegado al cual recibir los eventos</param>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Codigo">
            <summary>
            Código identificativo del cronómetro.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Nombre">
            <summary>
            Nombre del cronómetro.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Descripcion">
            <summary>
            Texto descriptivo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.ContadorEjecuciones">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionPromedioEjecucion">
            <summary>
            Duración promedio del tiempo que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionTotalEjecucion">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.MomentoUltimaEjecucion">
            <summary>
            Momento en el que se ejecutó por última vez
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionUltimaEjecucion">
            <summary>
            Duración de la última ejecución
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Ejecutando">
            <summary>
            Indica si el contador está ejecutandose
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OCronometro.EjecucionCronometroDelegate">
            <summary>
            Implementación del delegado que se activa cuando se termina la ejecución del cronómetro.
            No se garantiza la ejecución en el thread principal
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEjecucionCronometroDelegate">
            <summary>
            Declaración del delegado que se activa cuando cambia el valor de una variable
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EstadoCronometro">
            <summary>
            Enumerado que describe el esatado de un cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Detenido">
            <summary>
            Detenido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Pausado">
            <summary>
            Pausado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Iniciado">
            <summary>
            Iniciado
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OColaSincronizada">
            <summary>
            Queue sincronized .NET.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OColaSincronizada.sResetManual">
            <summary>
            Atributo estático de sincronización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OColaSincronizada.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.#ctor(Orbita.Utiles.OResetManual)">
            <summary>
            Inicializar una nueva instancia de la clase OColaSincronizada.
            </summary>
            <param name="resetManual">Atributo de sincronización.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Encolar(System.Object,System.Int16)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
            <param name="indice">Identificador de evento
            reset manual de sincroniazación.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Desencolar(System.Int16)">
            <summary>
            Método que desencola un objeto.
            </summary>
            <param name="indice">Indice de evento
            reset manual de sincroniazación.</param>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="P:Orbita.Utiles.OColaSincronizada.ResetManual">
            <summary>
            Atributo de sincronización.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OMensajesDetalle">
            <summary>
            Estructura de detalle del mensaje.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajesDetalle.ToString">
            <summary>
            Devuelve el string formateado del error.
            </summary>
            <returns>=ToString()</returns>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Excepcion">
            <summary>
            Nombre de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Mensaje">
            <summary>
            Nombre de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Fichero">
            <summary>
            Nombre del fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Clase">
            <summary>
            Nombre de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Metodo">
            <summary>
            Nombre del método
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Linea">
            <summary>
            Línea de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.PilaLlamadas">
            <summary>
            Pila de llamadas.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Accion">
            <summary>
            Enumeración que representa las acciones
            propias correspondientes a hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Inicializado">
            <summary>
            Hilo inicializado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Iniciado">
            <summary>
            Hilo iniciado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Suspendido">
            <summary>
            Hilo suspendido.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Reanudado">
            <summary>
            Hilo reanudado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Terminado">
            <summary>
            Hilo terminado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.EnEspera">
            <summary>
            Join.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OPriorityQueue`1">
            <summary>
            Implementación de una cola con prioridad de encolamiento.
            La prioridad está definida mediante un número entero.
            Cuanto más bajo sea el valor más prioridad tendrá.
            </summary>
            <typeparam name="TValue">Tipos de valores a almacenar en la cola</typeparam>
        </member>
        <member name="T:Orbita.Utiles.OPriorityQueue`2">
            <summary>
            Implementación de una cola con prioridad de encolamiento.
            Cuanto más bajo sea el valor de prioridad más prioridad tendrá.
            </summary>
            <typeparam name="TValue">Tipos de valores a almacenar en la cola</typeparam>
            <typeparam name="TPriority">Tipo de dato de la prioridad</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OPriorityQueue`2.storage">
            <summary>
            Diccionario ordenado de colas interno
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Dequeue">
            <summary>
            Desencolar
            </summary>
            <returns>Valor desencolado</returns>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Peek">
            <summary>
            Obtener el primer valor de la cola sin desencolar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Enqueue(`0)">
            <summary>
            Encolar con prioridad
            </summary>
            <param name="item">Valor a encolar</param>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Encolar con prioridad
            </summary>
            <param name="item">Valor a encolar</param>
            <param name="priority">prioridad de encolamiento</param>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Clear">
            <summary>
            Quita todos los objetos de la colección.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OPriorityQueue`2.Count">
            <summary>
            Número de elementos de la cola
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OPriorityQueue`2.Empty">
            <summary>
            Indica que la cola está vacía
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OAtributoEnumerado">
            <summary>
            Clases para dotar de atributos a los tipos enumerados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OAtributoEnumerado.valor">
            <summary>
            Valor del enumerado.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OAtributoEnumerado.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OAtributoEnumerado.
            </summary>
            <param name="valor">valor.</param>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="!:OAtributoEnumeradoAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.GetListStringValue(System.Type)">
            <summary>
            Devuelve una lista con los valores de texto de los enumerados
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.FindStringValue(System.Type,System.String,System.Enum)">
            <summary>
            Busca si el texto coincide con un enumerado
            </summary>
            <param name="enumType"></param>
            <param name="DefaultValue"></param>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OAtributoEnumerado.Valor">
            <summary>
            Obtiene el valor.
            </summary>
            <value></value>
        </member>
        <member name="T:Orbita.Utiles.OHilo">
            <summary>
            Clase que representa hilos de ejecución (Threads).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._thread">
            <summary>
            Hilo (Thread).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._duermeThread">
            <summary>
            Tiempo de letargo del hilo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._descripcion">
            <summary>
            Descripción del hilo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._iniciar">
            <summary>
            Iniciar hilo en el evento
            de inicialización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Iniciar">
            <summary>
            Iniciar el hilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Suspender">
            <summary>
            Suspender el hilo activo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Reanudar">
            <summary>
            Reanudar el hilo suspendido.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Terminar">
            <summary>
            Terminar el hilo activo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join(System.Int32)">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
            <param name="timeout">Número de milisegundos en los que se va a esperar a que el subproceso finalice.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join(System.TimeSpan)">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
            <param name="timeout">Número de milisegundos en los que se va a esperar a que el subproceso finalice.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OHilo.EstaVivo">
            <summary>
            Comprobar la vitalidad de un hilo.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHilo.OnDespuesAccion">
            <summary>
            Evento de los métodos: 
            Iniciar(), Suspender(), Reanudar(), Terminar().
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Thread">
            <summary>
            Hilo (Thread).
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Letargo">
            <summary>
            Tiempo de letargo del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Nombre">
            <summary>
            Nombre del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Descripcion">
            <summary>
            Descripción del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Iniciarlo">
            <summary>
            Iniciación del hilo.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OExcepcion">
            <summary>
            Clase OExcepcion.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
            <param name="mensaje">Mensaje que describe el error.</param>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.String,System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
            <param name="mensaje">Mensaje de error que explica la razón
            de la excepción.</param>
            <param name="inner">La excepción que es la causa de la excepción
            actual o una referencia nula si no se especifica ninguna excepción
            interna.</param>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info">Clase System.Runtime.Serialization.SerializationInfo
            que contiene los datos serializados del objeto que hacen referencia a la
            excepción que se va a producir.</param>
            <param name="context">Enumeración System.Runtime.Serialization.StreamingContext
            que contiene información contextual sobre el origen o el destino.</param>
        </member>
        <member name="T:Orbita.Utiles.ODataTableEnumerado">
            <summary>
            Clase para obtener datatables con los valores de un enumerado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODataTableEnumerado.GetValoresDataTable(System.Type)">
            <summary>
            Obtiene un datatable con los diferentes valores que puede tomar un enumerado.
            Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: el ToString() de cada enumerado
            </summary>
            <param name="enumerado">Enumerado del cual se quiere extraer la información.</param>
            <returns>Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: el ToString() de cada enumerado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODataTableEnumerado.GetValoresDataTable(System.Type,System.Boolean)">
            <summary>
            Obtiene un datatable con los diferentes valores que puede tomar un enumerado.
            Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: en función del segundo parámetro, devuelve el ToString() de cada enumerado o bien el atributo OAtributoEnumerado de cada enumerado
            </summary>
            <param name="enumerado">Enumerado del cual se quiere extraer la información.</param>
            <param name="obtenerValoresDelOAtributoEnumerado">True si se quiere obtener como Valor el atributo OAtributoEnumerado de cada enumerado; false si se quiere obteenr el ToString() de cada enumerado</param>
            <returns>Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: en función del segundo parámetro, devuelve el ToString() de cada enumerado o bien el atributo OAtributoEnumerado de cada enumerado</returns>
        </member>
        <member name="T:Orbita.Utiles.Tiempo">
            <summary>
            Enumeración que representa la sobrecarga del
            método de tiempo restante de la clase OTimer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Hora">
            <summary>
            Hora.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Minuto">
            <summary>
            Minuto.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Segundo">
            <summary>
            Segundo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Milisegundo">
            <summary>
            Milisegundo.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHilos">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilos._lista">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Iniciar">
            <summary>
            Recorrer la colección e iniciar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Suspender">
            <summary>
            Recorrer la colección y suspender todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Reanudar">
            <summary>
            Recorrer la colección y reanudar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Destruir">
            <summary>
            Recorrer la colección y abortar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Contar">
            <summary>
            Contar el número de hilos de la colección.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHilos.OnDespuesAdicionar">
            <summary>
            Evento del método adición.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OTipoDato">
            <summary>
            Clase estática encargada de devolver el valor por defecto de un determinado tipo de dato
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTipoDato.DevaultValue(Orbita.Utiles.OEnumTipoDato)">
            <summary>
            Valor por defecto de un determinado tipo de datos
            </summary>
            <param name="tipoDato"></param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumTipoDato">
            <summary>
            Enumerado que implementa el enumerado de los módulos del sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.SinDefinir">
            <summary>
            Tipo no definido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Bit">
            <summary>
            Tipo booleano o bit
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Entero">
            <summary>
            Tipo entero
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Texto">
            <summary>
            Tipo texto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Decimal">
            <summary>
            Tipo decimal
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Fecha">
            <summary>
            Tipo fecha
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Imagen">
            <summary>
            Tipo imagen
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Grafico">
            <summary>
            Tipo gráfico
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumTipoDato.Flag">
            <summary>
            Tipo Evento
            </summary>
        </member>
    </members>
</doc>
