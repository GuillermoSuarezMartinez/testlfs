<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orbita.MS</name>
    </assembly>
    <members>
        <member name="T:Orbita.MS.OCifrado">
            <summary>
            Clase estática para encriptar y desencriptar textos con la clave y el vector de incio de la librería.
            </summary>
        </member>
        <member name="M:Orbita.MS.OCifrado.ObtenerContraseñaLibreria">
            <summary>
            Clave de la librería para encriptar y desencriptar.
            Está puesto como método porque si se pone como atributo o propiedad, a pesar de estar ofuscado, se desemambla y se obtiene su valor.
            Además, si se devuelve directamente el string, también se desensambla y se obtiene su valor
            ¡No se debe modificar nunca!
            </summary>
        </member>
        <member name="M:Orbita.MS.OCifrado.ObtenerVectorInicioLibreria">
            <summary>
            Vector de inicio de la librería para encriptar y desencriptar.
            Está puesto como método porque si se pone como atributo o propiedad, a pesar de estar ofuscado, se desemambla y se obtiene su valor.
            Además, si se devuelve directamente el string, también se desensambla y se obtiene su valor
            ¡No se debe modificar nunca!
            </summary>
        </member>
        <member name="M:Orbita.MS.OCifrado.EncriptarTexto(System.String)">
            <summary>
            Encripta un texto con la contraseña y el vector de incio de la librería
            </summary>
            <param name="textoPlano">Texto a encriptar</param>
            <returns>Texto encriptado</returns>
        </member>
        <member name="M:Orbita.MS.OCifrado.EncriptarTexto(System.String,System.String,System.String)">
            <summary>
            Realiza una encriptación personalizada con la contraseña y el vector de incio pasados por argumento
            </summary>
            <param name="textoPlano">Texto a encriptar</param>
            <param name="clave">Clave para la encriptación</param>
            <param name="vectorInicio">Vector de incio para la encriptación. Debe ser una cadena ASCII de 16 bytes de longitud</param>
            <returns>El texto encriptado</returns>
        </member>
        <member name="M:Orbita.MS.OCifrado.DesencriptarTexto(System.String)">
            <summary>
            Desencripta un texto con la contraseña y el vector de incio de la librería
            </summary>
            <param name="plainText">Texto a desencriptar</param>
            <returns>Texto desencriptado</returns>
        </member>
        <member name="M:Orbita.MS.OCifrado.DesencriptarTexto(System.String,System.String,System.String)">
            <summary>
            Realiza una desencriptación personalizada con la contraseña y el vector de incio pasados por argumento
            </summary>
            <param name="textoCifrado">Texto a desencriptar</param>
            <param name="clave">Clave para la desencriptación</param>
            <param name="vectorInicio">Vector de incio para la desencriptación. Debe ser una cadena ASCII de 16 bytes de longitud</param>
            <returns>El texto desencriptado</returns>
        </member>
        <member name="T:Orbita.MS.OSeguridad">
            <summary>
            Clase OSeguridad.
            </summary>
        </member>
        <member name="F:Orbita.MS.OSeguridad._servidor">
            <summary>
            Nombre del servidor.
            </summary>
        </member>
        <member name="F:Orbita.MS.OSeguridad._usuario">
            <summary>
            Usuario del servidor.
            </summary>
        </member>
        <member name="F:Orbita.MS.OSeguridad._password">
            <summary>
            Contraseña del servidor.
            </summary>
        </member>
        <member name="F:Orbita.MS.OSeguridad._impersonalizacionWindows">
            <summary>
            Contexto de impersonalización.
            </summary>
        </member>
        <member name="F:Orbita.MS.OSeguridad._identidadWindows">
            <summary>
            Identidad Windows.
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Métodos externos de login.
            </summary>
            <param name="lpszUsuario">Usuario.</param>
            <param name="lpszDominio">Dominio.</param>
            <param name="lpszPassword">Contraseña.</param>
            <param name="dwLogonType">Tipo de login.</param>
            <param name="dwLogonProvider">Proveedor.</param>
            <param name="phToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.MS.OSeguridad.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OSeguridad.
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OSeguridad.
            </summary>
            <param name="servidor">Nombre del servidor.</param>
            <param name="usuario">Usuario de autenticación.</param>
            <param name="password">Password de autenticación.</param>
        </member>
        <member name="F:Orbita.MS.OSeguridad.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Abrir">
            <summary>
            Establecer la apertura de la impersonalización.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Cerrar">
            <summary>
            Cerrar la impersonalización.
            </summary>
        </member>
        <member name="M:Orbita.MS.OSeguridad.Impersonalizar">
            <summary>
            Impersonalizar el acceso al host.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orbita.MS.OEncriptacion">
            <summary>
            Clase que permite la encriptación y desencriptación de textos
            </summary>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, no initialization vector, electronic codebook
            (ECB) mode, SHA-1 hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <remarks>
            This constructor is not recommended because it does not use
            initialization vector and uses the ECB cipher mode, which is less
            secure than the CBC mode.
            </remarks>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1 
            hashing algorithm, and 0-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm. Use the minSaltLen and maxSaltLen parameters to
            specify the size of randomly generated salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, and
            SHA-1 hashing algorithm.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be 
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, hashing 
            without salt, and cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, and
            cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with the key derived from the explicitly specified
            parameters.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
            <param name="passwordIterations">
            Number of iterations used to hash password. More iterations are
            considered more secure but may take longer.
            </param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Encrypt(System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptToBytes(System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptToBytes(System.Byte[])">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptFile(System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptToBytes(System.String,System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptToBytes(System.Byte[],System.String)">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Decrypt(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptToBytes(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptToBytes(System.Byte[])">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptFile(System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptFileToBytes(System.String)">
            <summary>
            Desencripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptToBytes(System.String,System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptToBytes(System.Byte[],System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="passPhrase"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.DecryptFileToBytes(System.String,System.String)">
            <summary>
            Desencripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="passPhrase"></param>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.AddSalt(System.Byte[])">
            <summary>
            Adds an array of randomly generated bytes at the beginning of the
            array holding original plain text value.
            </summary>
            <param name="plainTextBytes">
            Byte array containing original plain text value.
            </param>
            <returns>
            Either original array of plain text bytes (if salt is not used) or a
            modified array containing a randomly generated salt added at the 
            beginning of the plain text bytes. 
            </returns>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.GenerateSalt">
            <summary>
            Generates an array holding cryptographically strong bytes.
            </summary>
            <returns>
            Array of randomly generated bytes.
            </returns>
            <remarks>
            Salt size will be defined at random or exactly as specified by the
            minSlatLen and maxSaltLen parameters passed to the object constructor.
            The first four bytes of the salt array will contain the salt length
            split into four two-bit pieces.
            </remarks>
        </member>
        <member name="M:Orbita.MS.OEncriptacion.GenerateRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates random integer.
            </summary>
            <param name="minValue">
            Min value (inclusive).
            </param>
            <param name="maxValue">
            Max value (inclusive).
            </param>
            <returns>
            Random integer value between the min and max values (inclusive).
            </returns>
            <remarks>
            This methods overcomes the limitations of .NET Framework's Random
            class, which - when initialized multiple times within a very short
            period of time - can generate the same "random" number.
            </remarks>
        </member>
        <member name="T:Orbita.MS.OHaspSN">
            <summary>
            Gestion de llaves
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.LocalScopeText">
            <summary>
            Acceso local
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.minutosAdvertencia">
            <summary>
            Minutos cuando empieza a advertir de que no hay llave
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.minutosError">
            <summary>
            Minutos cuando cierra la aplicacion si no hay llave
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.CheckRemoteDebuggerPresent(System.IntPtr,System.Boolean@)">
            <summary>
            CheckRemoteDebuggerPresent
            </summary>
            <param name="ProcessHandle"></param>
            <param name="DebuggerPresent"></param>
            <returns></returns>
        </member>
        <member name="F:Orbita.MS.OHaspSN.licencia">
            <summary>
            Tecnologías utilizada para licenciar
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.nombreAplicacion">
            <summary>
            Tecnologías utilizada para licenciar
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.vendorCodeString">
            <summary>
            Clave del producto
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.productos">
            <summary>
            Coleccion de productos a licenciar
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.threadHasp">
            <summary>
            Hilo de comprobación de llaves
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.threadMensajes">
            <summary>
            Hilo de mensajes al usuario
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.FechaError">
            <summary>
            Fecha cuando no se detecta la llave
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.minutosSN">
            <summary>
            Minutos sin llave
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.esServicio">
            <summary>
            Indica si el control de llave se realiza sobre servicio
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.wrapper">
            <summary>
            Logger de la clase
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.swCodes">
            <summary>
            Códigos del sistema
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.swCod">
            <summary>
            Licencia sw
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.mensajeLlaveInicial">
            <summary>
            Indica al hilo de mensajes que muestre el mensaje de que no encuentra llave inicial
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.segundosConsulta">
            <summary>
            Tiempo de consulta
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.#ctor">
            <summary>
            Constructor de clase para llaves HASP
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ImpedirDepurador">
            <summary>
            Impide la depuración del código
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ThreadImpedirDepurador">
            <summary>
            Impide la depuración del código
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.FinalizarTodo(System.Int32)">
            <summary>
            Finaliza el depurador
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.EsperarDepurador(System.Int32,System.Boolean)">
            <summary>
            Espera la ejecución del depurador
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.IniHaspSN(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Inicia el hilo para cualquier licenciamiento
            </summary>
            <param name="listaProductos">Productos sobre los que se realiza la inspeccion</param>
            <param name="esServicio">Indica si la aplicacion que realiza la llamada es un servicio</param>
            <param name="log">Log de la clase</param>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ComprobarTecnologia">
            <summary>
            Inicia el hilo de mensajes
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ComprobarProductoHASPUsb(Orbita.MS.OHaspSN.OProductos)">
            <summary>
            Comprueba si existe licencia HASP Usb
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ExisteSerial(System.String)">
            <summary>
            Comprueba si el producto esta en la llave
            </summary>
            <param name="cod">Producto a comprobar</param>
            <returns>Verdadero si está el producto y falso si no esta</returns>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ComprobarProductoHASPSL(Orbita.MS.OHaspSN.OProductos)">
            <summary>
            Comprueba si existe licencia HASP Sentinel
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.IniciarThreadMensajes">
            <summary>
            Inicia el hilo de mensajes
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.TareasMensaje">
            <summary>
            Muestra un mensaje si no encuentra licencia si los minutos superan a los minutos de advertencia
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.ComprobarEstadoInicial">
            <summary>
            Realiza la inspeccion inicial y si no encuentra la llave cierra la aplicacion
            </summary>
            <returns>Verdadero si están los productos y falso si no están</returns>
        </member>
        <member name="M:Orbita.MS.OHaspSN.IniciarThreadHasp">
            <summary>
            Inicia el hilo de comprobacion
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.TareasHasp">
            <summary>
            Comprueba si estan las licencias y gestiona los tiempos sin licencia
            </summary>   
        </member>
        <member name="M:Orbita.MS.OHaspSN.ProcesarXMLProd(Orbita.MS.OHaspSN.OProductos)">
            <summary>
            Comprueba si el producto esta en la llave
            </summary>
            <param name="producto">Producto a comprobar</param>
            <returns>Verdadero si está el producto y falso si no esta</returns>
        </member>
        <member name="M:Orbita.MS.OHaspSN.IncluirSerial">
            <summary>
            Introduce los códigos de los productos
            </summary>
        </member>
        <member name="M:Orbita.MS.OHaspSN.CerrarAplicacion">
            <summary>
            Cierra la aplicación
            </summary>
        </member>
        <member name="E:Orbita.MS.OHaspSN.OrbitaCerrarAplicacion">
            <summary>
            Evento cierre aplicación
            </summary>
        </member>
        <member name="E:Orbita.MS.OHaspSN.OrbitaMensajeAplicacion">
            <summary>
            Evento mensaje de aplicación
            </summary>
        </member>
        <member name="P:Orbita.MS.OHaspSN.Asociado">
            <summary>
            Indica si hay alguien conectado
            </summary>
        </member>
        <member name="P:Orbita.MS.OHaspSN.Local">
            <summary>
            Indica si se ejecuta en local
            </summary>
        </member>
        <member name="P:Orbita.MS.OHaspSN.Remoto">
            <summary>
            Indica si se ejecuta en remoto
            </summary>
        </member>
        <member name="T:Orbita.MS.OHaspSN.OrbitaCerrarAplicaciontHandler">
            <summary>
            Delegado cierre aplicación
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Orbita.MS.OHaspSN.OrbitaMensajeAplicaciontHandler">
            <summary>
            Delegado mensaje de aplicación
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Orbita.MS.OHaspSN.OProductos">
            <summary>
            Descripción de los productos que se van a licenciar
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.Basico">
            <summary>
            Basico
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.LPR">
            <summary>
            LPR
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.OCR">
            <summary>
            OCR
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.ADR">
            <summary>
            ADR
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.AlarmasMails">
            <summary>
            Alarmas Mails
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.AlarmasSMS">
            <summary>
            Alarmas SMS
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.CCEnvasado">
            <summary>
            Envasado
            </summary>
        </member>
        <member name="F:Orbita.MS.OHaspSN.OProductos.LectorCarin">
            <summary>
            Lector carin
            </summary>
        </member>
        <member name="T:Orbita.MS.OHaspSN.OLicencias">
            <summary>
            Tecnologías para licencia sw
            </summary>
        </member>
        <member name="T:Orbita.MS.oMsgHasp">
            <summary>
            oOPCComms.
            </summary>
        </member>
        <member name="F:Orbita.MS.oMsgHasp._producto">
            <summary>
            Producto.
            </summary>
        </member>
        <member name="F:Orbita.MS.oMsgHasp._estado">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="F:Orbita.MS.oMsgHasp._mensaje">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="M:Orbita.MS.oMsgHasp.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Orbita.MS.oMsgHasp.Estado">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="P:Orbita.MS.oMsgHasp.Producto">
            <summary>
            Producto.
            </summary>
        </member>
        <member name="P:Orbita.MS.oMsgHasp.Mensaje">
            <summary>
            Mensaje.
            </summary>
        </member>
    </members>
</doc>
