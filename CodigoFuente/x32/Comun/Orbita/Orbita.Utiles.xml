<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Orbita.Utiles</name>
    </assembly>
    <members>
        <member name="T:Orbita.Utiles.OTimer">
            <summary>
             Proporciona un mecanismo para ejecutar métodos en intervalos especificados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTimer._timer">
            <summary>
            Timer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTimer._callBack">
            <summary>
            TimerCallback.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTimer.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OTimer.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(Orbita.Utiles.Tiempo,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Método Change correspondiente, en el primer caso a la llamada a AddHoras, 
            AddMinutos, AddSegundos, en el segundo y tercer caso, correspondiente a la 
            llamada en un día concreto.
            </summary>
            <param name="unidadTiempo">Unidad de tiempo.</param>
            <param name="tiempo">Tiempo correspondiente a horas o minutos o segundos o 
            milisegundos.</param>
            <param name="hora">Hora del timespan.</param>
            <param name="minuto">Minuto del timespan.</param>
            <param name="segundo">Segundo del timespan.</param>
            <param name="milisegundo">Milisegundo del timespan.</param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(Orbita.Utiles.Tiempo,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Método Change correspondiente, en el primer caso a la llamada a AddHoras, 
            AddMinutos, AddSegundos, en el segundo y tercer caso, correspondiente a la 
            llamada en un día concreto.
            </summary>
            <param name="unidadTiempo"></param>
            <param name="tiempo"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="dia"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="dia"></param>
            <param name="hora"></param>
            <param name="minuto"></param>
            <param name="segundo"></param>
            <param name="inversa"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.Change(System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="ts"></param>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddDias(System.Int32,System.TimeSpan,System.Boolean)">
            <summary>
            Ejecutar a una hora concreta de un dia concreto y cada mes.
            La función se divide en 2 partes, de forma que no se utiliza el
            segundo parámetro del change, ya que, en cada ejecución del método
            se hace de nuevo una llamada al cálculo del tiempo.
            </summary>
            <param name="dia">Día de ejecución.</param>
            <param name="ts"></param>
            <param name="inverso"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddDias(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta de un dia concreto y cada mes.
            La función se  divide en 2 partes, de  forma que no se  utiliza el
            segundo parámetro del change, ya que, en cada ejecución del método
            se hace de nuevo una llamada al cálculo del tiempo.
            </summary>
            <param name="dia">Día de ejecución.</param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddHoras(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n horas.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddMinutos(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n minutos.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OTimer.AddSegundos(System.Int32,System.TimeSpan)">
            <summary>
            Ejecutar a una hora concreta y posteriormente cada n segundos.
            </summary>
            <param name="tiempo"></param>
            <param name="ts"></param>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OTimer.Timer">
            <summary>
            Timer.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OTimer.CallBack">
            <summary>
            TimerCallback.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.ICola">
            <summary>
            Interfaz para colas
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ICola.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.ICola.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipOutputStream">
             <summary>
             This is a DeflaterOutputStream that writes the files into a zip
             archive one after another.  It has a special method to start a new
             zip entry.  The zip entries contains information about the file name
             size, compressed size, CRC, etc.
             
             It includes support for Stored and Deflated entries.
             This class is not thread safe.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             <example> This sample shows how to create a zip file
             <code>
             using System;
             using System.IO;
             
             using Orbita.Utiles.Compresion.Core;
             using Orbita.Utiles.Compresion.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		string[] filenames = Directory.GetFiles(args[0]);
             		byte[] buffer = new byte[4096];
             		
             		using ( ZipOutputStream s = new ZipOutputStream(File.Create(args[1])) ) {
             		
             			s.SetLevel(9); // 0 - store only to 9 - means best compression
             		
             			foreach (string file in filenames) {
             				ZipEntry entry = new ZipEntry(file);
             				s.PutNextEntry(entry);
            
             				using (FileStream fs = File.OpenRead(file)) {
            						StreamUtils.Copy(fs, s, buffer);
             				}
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Orbita.Utiles.Compresion.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="deflater">
            the underlying deflater.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,Orbita.Utiles.Compresion.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufferSize">
            The buffer size in bytes to use when deflating (minimum value 512)
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.AESAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given <paramref name="password"/>.
            </summary>
            <param name="password">The password.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.InitializeAESPassword(Orbita.Utiles.Compresion.Zip.ZipEntry,System.String,System.Byte[]@,System.Byte[]@)">
            <summary>
            Initializes encryption keys based on given password.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <returns>The byte read cast to an int.  THe value is -1 if at the end of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <param name="buffer">The buffer to store read data in.</param>
            <param name="offset">The offset to start storing at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.  Zero if end of stream is detected.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset to start storing data at.</param>
            <param name="count">The number of bytes to read</param>
            <param name="callback">The async callback to use.</param>
            <param name="state">The state to use.</param>
            <returns>Returns an <see cref="T:System.IAsyncResult"/></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="offset">The offset to begin writing at.</param>
            <param name="count">The number of bytes to write.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> to use.</param>
            <param name="state">The state object.</param>
            <returns>Returns an IAsyncResult.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Flush">Flush</see> on the deflater and then
            on the underlying stream.  This ensures that all bytes are flushed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Finish"/> and closes the underlying
            stream when <see cref="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="value">
            The byte value.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buffer">
            The byte array
            </param>
            <param name="offset">
            The offset into the byte array where to start.
            </param>
            <param name="count">
            The number of bytes to write.
            </param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.buffer_">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.deflater_">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream_">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.
            </summary>
            <remarks>When set to null or if the password is empty no encryption is performed</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            Gets the current position within the stream.
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">The output stream to which the archive contents are written.</param>
            <param name="bufferSize">Size of the buffer to use.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment text for the entire archive.
            </param>
            <exception name ="ArgumentOutOfRangeException">
            The converted comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  The new level will be activated
            immediately.
            </summary>
            <param name="level">The new compression level (1 to 9).</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Deflater"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflater compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.PutNextEntry(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.ArgumentNullException">
            if entry passed is null.
            </exception>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">Archive size is invalid</exception>
            <exception cref="T:System.InvalidOperationException">No entry is active.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.entries">
            <summary>
            The entries for the archive.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.crc">
            <summary>
            Used to track the crc of data added to entries.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.curEntry">
            <summary>
            The current entry being added.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.size">
            <summary>
            Used to track the size of data for an entry during writing.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.offset">
            <summary>
            Offset to be recorded for each entry in the central header.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.zipComment">
            <summary>
            Comment for the entire archive recorded in central header.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.patchEntryHeader">
            <summary>
            Flag indicating that header patching is required for the current entry.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.crcPatchPos">
            <summary>
            Position to patch crc
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipOutputStream.sizePatchPos">
            <summary>
            Position to patch size.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets a flag value of true if the central header has been added for this archive; false if it has not been added.
            </summary>
            <remarks>No further entries can be added once this has been done.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipOutputStream.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
            <remarks>Older archivers may not understand Zip64 extensions.
            If backwards compatability is an issue be careful when adding <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Size">entries</see> to an archive.
            Setting this property to off is workable but less desirable as in those circumstances adding a file
            larger then 4GB will fail.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms names as per the Zip file naming convention.
            </summary>
            <remarks>The use of absolute names is supported although its use is not valid 
            according to Zip naming conventions, and should not be used if maximum compatability is desired.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives, or vice versa.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed file name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed value.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform"></see>
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.#ctor(System.String)">
            <summary>
            Initialize a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform"></see>
            </summary>
            <param name="trimPrefix">The string to trim from the front of paths if found.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.#cctor">
            <summary>
            Static constructor.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a windows directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a windows file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to force valid</param>
            <param name="replacement">The replacement character to use.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.IsValidName(System.String,System.Boolean)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <param name="relaxed">If true checking is relaxed about windows file names and absolute paths.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in Unix format, and should only contain relative paths.
            This means that any path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid for a file where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a zip entry.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>Zip path names are actually in unix format,
            and should only contain relative paths if a path is present.
            This means that the path stored should not contain a drive or
            device letter, or a leading slash.  All slashes should forward slashes '/'.
            An empty name is valid where the input comes from standard input.
            A null name is not considered valid.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
            <remarks>The prefix is trimmed before any conversion from
            a windows path is done.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.OCompresionFicheros">
            <summary>
            Ofrece métodos para comprimir y descomprimir ficheros en distintos formatos, aunque a fecha de marzo de 2011 sólo puede comprimir y descomprimir en el formato .zip
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ObtenerExtensionesDisponibles(System.String[])">
            <summary>
            Lista en una cadena de texto las extensiones disponibles para el tipo de compresión con el que se está trabajando 
            </summary>
            <param name="vectorExtensiones">vector con las extensiones disponibles</param>
            <returns>Una cadena de texto las extensiones disponibles para el tipo de compresión con el que se está trabajando </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ObtenerExtensionMasComun(System.String[])">
            <summary>
            Devuelve en una cadena de texto la extensión más común para el tipo de compresión con el que se está trabajando, que corresponderá a la extensión de la primera posicón del vector
            </summary>
            <param name="vectorExtensiones">vector con las extensiones disponibles</param>
            <returns>Una cadena de texto la extensión más común para el tipo de compresión con el que se está trabajando, que corresponderá a la extensión de la primera posicón del vector</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ExisteExtension(System.String,System.String[])">
            <summary>
            Comprueba que la extensión existe o no n el vector de extensiones
            </summary>
            <param name="extension">Extensión (incluido el punto) de la que se quiere comprobar su exsistencia</param>
            <param name="vectorExtensiones">Conjunto de extensiones con las que se va a comprarar</param>
            <returns>Ture si la externsión existe en el conjunto de extensiónes; false en caso contrario</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroSegunExtension(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="restaurarFechas">Las fechas y horas de los ficheros se restaurarán al extraer</param>
            <param name="restaurarAtributos">Los atributos de los ficheros se restaurarán al extraer</param>
            <param name="descomprimirDirectoriosVacios">Descomprime los directorios vacíos</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ConfirmarSobreescritura(System.String)">
            <summary>
            Manejador que procesa la pregunta de sobreescribir la extracción de un fichero comprimido en el caso de indicar que se pregunte (Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura.Preguntar)
            </summary>
            <param name="rutaArchivo">Ruta del archivo que se quiere sobreescribir</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="restaurarFechas">Las fechas y horas de los ficheros se restaurarán al extraer</param>
            <param name="restaurarAtributos">Los atributos de los ficheros se restaurarán al extraer</param>
            <param name="descomprimirDirectoriosVacios">Descomprime los directorios vacíos</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="restaurarFechas">Las fechas y horas de los ficheros se restaurarán al extraer</param>
            <param name="restaurarAtributos">Los atributos de los ficheros se restaurarán al extraer</param>
            <param name="descomprimirDirectoriosVacios">Descomprime los directorios vacíos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo. Esto ocurre al menos para los archivos .zip</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFichero(System.String,System.String)">
            <summary>
            Descomprime un fichero comprimido en una de las extensiones admitidas por la librería de compresión
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.OCompresionFicheros.ExtensionesFicheroZip">
            <summary>
            Vector con las posibles extensiones de ficheros comprimidos con el algoritmo zip. Se incluye el punto que precede a las extensiones de ficheros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.Boolean,System.Boolean,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="comprimirDirectoriosVacios">Comprime los directorios vacíos</param>
            <param name="compresionRecursiva">Incluye los subdirectorios y sus ficheros recursivamente en el archivo comprimido</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.Boolean,System.Boolean)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="comprimirDirectoriosVacios">Comprime los directorios vacíos</param>
            <param name="compresionRecursiva">Incluye los subdirectorios y sus ficheros recursivamente en el archivo comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.Boolean,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="comprimirDirectoriosVacios">Comprime los directorios vacíos</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.Boolean)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="comprimirDirectoriosVacios">Comprime los directorios vacíos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo comprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios. Si vale false, los manejadores que ejecutan pueden ser nulos (es decir, los dos siguientes parámetros pueden ser nulos)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (no del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="contraseña">Contraseña para extraer los ficheros comprimidos</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioZip(System.String,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaDirectorioOrigen">Ruta con el directorio a comprimir en el fichero rutaFicheroZip.zip</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre el archivo que está siendo comprimido. Realmente no se muestra nada, sino que para cada fichero procesado (en este caso, sólo uno) se ejecuta el manejadorFuncionProcesaFicheros. Si vale false, el manejador que ejecuta puede ser nulo (es decir, el siguiente parámetro puede ser nulo)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero (en este caso, sólo uno) siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (en este caso, sólo uno, por lo que se trata del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre el archivo que está siendo comprimido. Realmente no se muestra nada, sino que para cada fichero procesado (en este caso, sólo uno) se ejecuta el manejadorFuncionProcesaFicheros. Si vale false, el manejador que ejecuta puede ser nulo (es decir, el siguiente parámetro puede ser nulo)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero (en este caso, sólo uno) siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (en este caso, sólo uno, por lo que se trata del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre el archivo que está siendo comprimido. Realmente no se muestra nada, sino que para cada fichero procesado (en este caso, sólo uno) se ejecuta el manejadorFuncionProcesaFicheros. Si vale false, el manejador que ejecuta puede ser nulo (es decir, el siguiente parámetro puede ser nulo)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero (en este caso, sólo uno) siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre el archivo que está siendo comprimido. Realmente no se muestra nada, sino que para cada fichero procesado (en este caso, sólo uno) se ejecuta el manejadorFuncionProcesaFicheros. Si vale false, el manejador que ejecuta puede ser nulo (es decir, el siguiente parámetro puede ser nulo)</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero (en este caso, sólo uno) siempre que mostrarInformacionDetallada sea verdadero</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (en este caso, sólo uno, por lo que se trata del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de cada uno de los ficheros comprimidos (en este caso, sólo uno, por lo que se trata del progreso global de compresión). Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso. Si vale false, el manejador que ejecuta puede ser nulo, y el intervalo puede ser cualquier valor, puesto que no se utiliza</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroZip(System.String,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre o ruta (absoluta o relativa) del fichero .zip a generar o ruta del mismo, con o sin extensión .zip</param>
            <param name="rutaFicheroOrigen">Nombre o ruta (absoluta o relativa) del fichero a comprimir en el fichero rutaFicheroZip.zip</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroZip(System.String,System.String,System.Boolean,Orbita.Utiles.Compresion.Core.ProcessFileHandler,Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler,System.Boolean,System.Int32,Orbita.Utiles.Compresion.Core.ProgressHandler,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            Comprime un directorio en un archivo .zip
            </summary>
            <param name="rutaFicheroZip">Nombre del fichero .zip a descomprimir</param>
            <param name="rutaDirectorioDestino">Ruta con el directorio donde se extraerán el contenido del fichero comprimido</param>
            <param name="mostrarInformacionDetallada">Muestra información detallada sobre los archivos y directorios que están siendo descomprimidos. Realmente no se muestra nada, sino que para cada fichero se ejecuta el manejadorFuncionProcesaFicheros y para cada diractorio se ejecuta el manejadorFuncionProcesaDirectorios</param>
            <param name="manejadorFuncionProcesaFicheros">Función del tipo "private void ProcesarFichero(object sender, ScanEventArgs e)" que se ejecuta cada vez que se procesa un fichero siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="manejadorFuncionProcesaDirectorios">Función del tipo "private void ProcesarDirectorio(object sender, DirectoryEventArgs e)" que se ejecuta cada vez que se procesa un directorio siempre que mostrarInformacionDetallada sea verdadero</param>
            <param name="mostrarProgreso">Indica si debemos mostrar el progreso de la descompresión. Realmente no muestra nada, sino que ejecuta en cada tick la función manejadorFuncionProgreso</param>
            <param name="intervaloProgreso">Indica cada cuanto tiempo se invocará la función manejadorFuncionProgreso, en milisegundos</param>
            <param name="manejadorFuncionProgreso">Función del tipo "void MostrarProgreso(object sender, ProgressEventArgs e)" que se ejecuta cada vez que hace tick el intervalo del progreso</param>
            <param name="sobreescritura">Enumerado del tipo OrbitaZip.Sobreescritura para indicar si sobreescribir siempre, nunca o preguntar si se encuentra un fichero existente en a ruta de descompresión. ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo</param>
            <param name="manejadorFuncionPreguntarSobreescritura">Función del tipo "private bool ConfirmarSobreescritura(string rutaArchivo)" que se ejecuta cada vez que se encuentra un fichero que ya existe en la ruta de descompresión, siempre que el valor de sobreescritura sea OrbitaZip.Sobreescritura.Preguntar ATENCIÓN: La sobreescritura de un archivo con sus atributos modificados (por ejemplo, fichero de solo lectura o fichero oculto) da error. No se ha intentado solucionar por falta de tiempo y por no tener la necesidad de hacerlo</param>
            <param name="restaurarFechas">Las fechas y horas de los ficheros se restaurarán al extraer</param>
            <param name="restaurarAtributos">Los atributos de los ficheros se restaurarán al extraer</param>
            <param name="descomprimirDirectoriosVacios">Descomprime los directorios vacíos</param>
            <param name="contraseña">Contraseña para extraer el fichero comprimido</param>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.OCompresionFicheros.ExtensionesFicheroTar">
            <summary>
            Vector con las posibles extensiones de ficheros comprimidos con el algoritmo tar. Se incluye el punto que precede a las extensiones de ficheros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioTar">
            <summary>
            Comprime un directorio en un archivo .tar
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .tar, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroTar">
            <summary>
            Comprime un fichero en un archivo .tar
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .tar, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroTar">
            <summary>
            Descomprime un fichero en un archivo .tar
            Método no implementado. Se tiene capacidad para descomprimir ficheros usando el algoritmo .tar, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.OCompresionFicheros.ExtensionesFicheroLzm">
            <summary>
            Vector con las posibles extensiones de ficheros comprimidos con el algoritmo lzw. Se incluye el punto que precede a las extensiones de ficheros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioLzm">
            <summary>
            Comprime un directorio en un archivo .lzw
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .lzw pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroLzm">
            <summary>
            Comprime un fichero en un archivo .lzw
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .lzw, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroLzm">
            <summary>
            Descomprime un fichero en un archivo .lzw
            Método no implementado. Se tiene capacidad para descomprimir ficheros usando el algoritmo .lzw, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.OCompresionFicheros.ExtensionesFicheroGzip">
            <summary>
            Vector con las posibles extensiones de ficheros comprimidos con el algoritmo gzip. Se incluye el punto que precede a las extensiones de ficheros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioGzip">
            <summary>
            Comprime un directorio en un archivo .gzip
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .gzip pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroGzip">
            <summary>
            Comprime un fichero en un archivo .gzip
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .gzip, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroGzip">
            <summary>
            Descomprime un fichero en un archivo .gzip
            Método no implementado. Se tiene capacidad para descomprimir ficheros usando el algoritmo .gzip, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.OCompresionFicheros.ExtensionesFicheroBZip2">
            <summary>
            Vector con las posibles extensiones de ficheros comprimidos con el algoritmo bzip2. Se incluye el punto que precede a las extensiones de ficheros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirDirectorioBZip2">
            <summary>
            Comprime un directorio en un archivo .bzip2
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .bzip2 pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.ComprimirFicheroBZip2">
            <summary>
            Comprime un fichero en un archivo .bzip2
            Método no implementado. Se tiene capacidad para comprimir ficheros usando el algoritmo .bzip2, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.OCompresionFicheros.DescomprimirFicheroBZip2">
            <summary>
            Descomprime un fichero en un archivo .bzip2
            Método no implementado. Se tiene capacidad para descomprimir ficheros usando el algoritmo .bzip2, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
            <returns>Un objeto Returninfo con la información sobre la ejecución del método</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.OCompresionFicheros.TipoCompresion">
            <summary>
            Enumera los tipos de compresión disponibles en OCompresionFicheros. Indica tipo de compresión, no las extensiones utilizadas. Un tipo de compresión puede tener varias extensiones asociadas.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using Orbita.Utiles.Compresion.GZip;
             using Orbita.Utiles.Compresion.Core;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             			using (Stream s = new GZipOutputStream(File.Create(args[0] + ".gz")))
             			using (FileStream fs = File.OpenRead(args[0])) {
             				byte[] writeData = new byte[4096];
             				Streamutils.Copy(s, fs, writeData);
             			}
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <param name="level">The compression level to set.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Deflater"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buffer">Buffer to write</param>
            <param name="offset">Offset of first byte in buf to write</param>
            <param name="count">Number of bytes to write</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.IScanFilter">
            <summary>
            Scanning filters support filtering of names.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:Orbita.Utiles.ORepositorio">
            <summary>
            Repositorio de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ORepositorio.shilos">
            <summary>
            Repositorio de hilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.#ctor">
            <summary>
            Constructor estático de la clase Repositorio.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.GetHilos">
            <summary>
            Obtener la colección de hilos.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.ORepositorio.SetHilos(Orbita.Utiles.OHilos)">
            <summary>
            Asignar la colección de hilos.
            </summary>
            <param name="hilos">Colección de hilos.</param>
        </member>
        <member name="T:Orbita.Utiles.OMensajesDetalle">
            <summary>
            Estructura de detalle del mensaje.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajesDetalle.ToString">
            <summary>
            Devuelve el string formateado del error.
            </summary>
            <returns>=ToString()</returns>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Excepcion">
            <summary>
            Nombre de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Mensaje">
            <summary>
            Nombre de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Fichero">
            <summary>
            Nombre del fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Clase">
            <summary>
            Nombre de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Metodo">
            <summary>
            Nombre del método
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.Linea">
            <summary>
            Línea de la excepción.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OMensajesDetalle.PilaLlamadas">
            <summary>
            Pila de llamadas.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._identificador">
            <summary>
            Identificador de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._nombre">
            <summary>
            Nombre de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._ruta">
            <summary>
            Ruta de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._extension">
            <summary>
            Extensión de fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._copiarENdisco">
            <summary>
            Indica si debe ser copiado en disco.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFichero._copiarENbaseDEdatos">
            <summary>
            Indica si debe ser copiado en Base
            de datos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OFichero.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.#ctor(System.String,Orbita.Utiles.Extension,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OFichero.
            </summary>
            <param name="identificador">Identificador del fichero.</param>
            <param name="extension">Extensión del fichero.</param>
            <param name="copiarEnDisco">Determinar si copiar dicho fichero en disco.</param>
            <param name="copiarENbd">Determinar si copiar dicho fichero en base de datos.</param>
        </member>
        <member name="F:Orbita.Utiles.OFichero.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OFichero.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Identificador">
            <summary>
            Identificador de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Nombre">
            <summary>
            Nombre de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Ruta">
            <summary>
            Ruta de fichero.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.RutaCompleta">
            <summary>
            Ruta completa de fichero. Ruta + nombre.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.CopiarENdisco">
            <summary>
            Copiar en disco.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.CopiarENbaseDEdatos">
            <summary>
            Copiar en base de datos.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OFichero.Item(System.String,System.String)">
            <summary>
            Comprueba la existencia de los directorios
            y subdirectorios donde guardar el fichero.
            </summary>
            <param name="identificador">Identificador del
            dispositivo.</param>
            <param name="directorio">Directorio origen.</param> 
            <returns>Ruta destino del stream.</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradosHeredable">
            <summary>
            Clase que agrupa a un conjunto de enumerados
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradosHeredable.ListaEnumerados">
            <summary>
            Lista de los enumerados que contiene
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.Parse``1(System.String)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="nombre"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradosHeredable.Parse``1(System.Int32)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoHeredable">
            <summary>
            Clase utilizada para permitir la herencia de enumerados
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Nombre">
            <summary>
            Nombre del enumerado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Descripcion">
            <summary>
            Descripcion
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoHeredable.Valor">
            <summary>
            Valor del enumerado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoHeredable.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.CurrentRecord and TarBuffer.CurrentBlock
            properties, this would be rather trivial.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.OnProgressMessageEvent(Orbita.Utiles.Compresion.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">The <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry">TarEntry</see> for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a default <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.#ctor(Orbita.Utiles.Compresion.Tar.TarInputStream)">
            <summary>
            Initalise a TarArchive for input.
            </summary>
            <param name="stream">The <see cref="T:Orbita.Utiles.Compresion.Tar.TarInputStream"/> to use for input.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.#ctor(Orbita.Utiles.Compresion.Tar.TarOutputStream)">
            <summary>
            Initialise a TarArchive for output.
            </summary>
            <param name="stream">The <see cref="T:Orbita.Utiles.Compresion.Tar.TarOutputStream"/> to use for output.</param> 
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
            <param name="inputStream">The stream to retrieve archive data from.</param>
            <returns>Returns a new <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/> suitable for reading from.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">A stream containing the tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/> suitable for reading.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">The <see cref="T:System.IO.Stream"/> to write to</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive">tar archive</see> for writing.
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/> suitable for writing.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepExistingFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag.
            </summary>
            <param name= "translateAsciiFiles">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information is based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            <see cref="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides"/> is set to true by this call.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:Orbita.Utiles.Compresion.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destinationDirectory">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.ExtractEntry(System.String,Orbita.Utiles.Compresion.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to GetNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.GetNextEntry().
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.WriteEntry(Orbita.Utiles.Compresion.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.WriteEntryCore(Orbita.Utiles.Compresion.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the FileStream and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.Close">
            <summary>
            Closes the archive and releases any associated resources.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarArchive.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed
            when the garbage collector reclaims the <see cref="T:Orbita.Utiles.Compresion.Tar.TarArchive"/>.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.Compresion.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.AsciiTranslate">
            <summary>
            Get/set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:Orbita.Utiles.Compresion.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:Orbita.Utiles.Compresion.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Tar archives are composed of
            a series of RECORDS each containing a number of BLOCKS.
            This allowed tar archives to match the IO characteristics of
            the physical device being used. Archives are expected
            to be properly "blocked".
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarArchive.IsStreamOwner">
            <summary>
            Sets the IsStreamOwner property on the underlying stream.
            Set this to false to prevent the Close of the TarArchive from closing the stream.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OAtributoEnumerado">
            <summary>
            Clases para dotar de atributos a los tipos enumerados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OAtributoEnumerado._valor">
            <summary>
            Valor del enumerado.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OAtributoEnumerado.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OAtributoEnumerado.
            </summary>
            <param name="valor">valor.</param>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.GetStringValue(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="value">Value.</param>
            <returns>String Value associated via a <see cref="!:OAtributoEnumeradoAttribute"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.GetListStringValue(System.Type)">
            <summary>
            Devuelve una lista con los valores de texto de los enumerados
            </summary>
            <param name="enumType"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OAtributoEnumerado.FindStringValue(System.Type,System.String,System.Enum)">
            <summary>
            Busca si el texto coincide con un enumerado
            </summary>
            <param name="stringValue"></param>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OAtributoEnumerado.Valor">
            <summary>
            Obtiene el valor.
            </summary>
            <value></value>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Gets the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Gets or sets the key value
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.TestStrategy">
            <summary>
            The strategy to apply to testing.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestStrategy.FindFirstError">
            <summary>
            Find the first error only.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestStrategy.FindAllErrors">
            <summary>
            Find all possible errors.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.TestOperation">
            <summary>
            The operation in progress reported by a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.Initialising">
            <summary>
            Setting up testing.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.EntryHeader">
            <summary>
            Testing an individual entries header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.EntryData">
            <summary>
            Testing an individual entries data
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.EntryComplete">
            <summary>
            Testing an individual entry has completed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.MiscellaneousTests">
            <summary>
            Running miscellaneous tests
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.TestOperation.Complete">
            <summary>
            Testing is complete
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.TestStatus">
            <summary>
            Status returned returned by <see cref="T:Orbita.Utiles.Compresion.Zip.ZipTestResultHandler"/> during testing.
            </summary>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestArchive(System.Boolean)">TestArchive</seealso>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.TestStatus.#ctor(Orbita.Utiles.Compresion.Zip.ZipFile)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.TestStatus"/>
            </summary>
            <param name="file">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> this status applies to.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.Operation">
            <summary>
            Get the current <see cref="T:Orbita.Utiles.Compresion.Zip.TestOperation"/> in progress.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.File">
            <summary>
            Get the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> this status is applicable to.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.Entry">
            <summary>
            Get the current/last entry tested.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.ErrorCount">
            <summary>
            Get the number of errors detected so far.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.BytesTested">
            <summary>
            Get the number of bytes tested so far for the current entry.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.TestStatus.EntryValid">
            <summary>
            Get a value indicating wether the last entry test was valid.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipTestResultHandler">
            <summary>
            Delegate invoked during <see cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestArchive(System.Boolean,Orbita.Utiles.Compresion.Zip.TestStrategy,Orbita.Utiles.Compresion.Zip.ZipTestResultHandler)">testing</see> if supplied indicating current progress and status.
            </summary>
            <remarks>If the message is non-null an error has occured.  If the message is null
            the operation as found in <see cref="T:Orbita.Utiles.Compresion.Zip.TestStatus">status</see> has started.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.FileUpdateMode">
            <summary>
            The possible ways of <see cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.CommitUpdate">applying updates</see> to an archive.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.FileUpdateMode.Safe">
            <summary>
            Perform all updates on temporary files ensuring that the original file is saved.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.FileUpdateMode.Direct">
            <summary>
            Update the archive directly, which is faster but less safe.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            You can also update the archive adding or deleting entries.
            
            This class is thread safe for input:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using Orbita.Utiles.Compresion.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		using (ZipFile zFile = new ZipFile(args[0])) {
            			Console.WriteLine("Listing of : " + zFile.Name);
            			Console.WriteLine("");
            			Console.WriteLine("Raw Size    Size      Date     Time     Name");
            			Console.WriteLine("--------  --------  --------  ------  ---------");
            			foreach (ZipEntry e in zFile) {
            				if ( e.IsFile ) {
            					DateTime d = e.DateTime;
            					Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            						d.ToString("dd-MM-yy"), d.ToString("HH:mm"),
            						e.Name);
            				}
            			}
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryption keys are required.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <param name="name">The name of the file to open.</param>
            <exception cref="T:System.ArgumentNullException">The argument supplied is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="file">The <see cref="T:System.IO.FileStream"/> to read archive data from.</param>
            <exception cref="T:System.ArgumentNullException">The supplied argument is null.</exception>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to read archive data from.</param>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The stream doesn't contain a valid zip archive.<br/>
            </exception>
            <exception cref="T:System.ArgumentException">
            The <see cref="T:System.IO.Stream">stream</see> doesnt support seeking.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <see cref="T:System.IO.Stream">stream</see> argument is null.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.#ctor">
            <summary>
            Initialises a default <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> instance with no entries and no file storage.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Finalize">
            <summary>
            Finalize this instance.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:Orbita.Utiles.Compresion.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Create(System.String)">
            <summary>
            Create a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> whose data will be stored in a file.
            </summary>
            <param name="fileName">The name of the archive to create.</param>
            <returns>Returns the newly created <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="fileName"></paramref> is null</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Create(System.IO.Stream)">
            <summary>
            Create a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> whose data will be stored on a stream.
            </summary>
            <param name="outStream">The stream providing data storage.</param>
            <returns>Returns the newly created <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/></returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="outStream"> is null</paramref></exception>
            <exception cref="T:System.ArgumentException"><paramref name="outStream"> doesnt support writing.</paramref></exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetEnumerator">
            <summary>
            Gets an enumerator for the Zip entries in this Zip file.
            </summary>
            <returns>Returns an <see cref="T:System.Collections.IEnumerator"/> for this archive.</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            A clone of the zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetInputStream(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Gets an input stream for reading the given zip entry data in an uncompressed form.
            Normally the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> should be an entry returned by GetEntry().
            </summary>
            <param name="entry">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> to obtain a data <see cref="T:System.IO.Stream"/> for</param>
            <returns>An input <see cref="T:System.IO.Stream"/> containing data for this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/></returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetInputStream(System.Int64)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input <see cref="T:System.IO.Stream"/> containing data for this <paramref name="entryIndex"/>
            </returns>
            <exception cref="T:System.ObjectDisposedException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true if all tests pass, false otherwise</returns>
            <remarks>Testing will terminate on the first error found.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestArchive(System.Boolean,Orbita.Utiles.Compresion.Zip.TestStrategy,Orbita.Utiles.Compresion.Zip.ZipTestResultHandler)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <param name="strategy">The <see cref="T:Orbita.Utiles.Compresion.Zip.TestStrategy"></see> to apply.</param>
            <param name="resultHandler">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipTestResultHandler"></see> handler to call during testing.</param>
            <returns>true if all tests pass, false otherwise</returns>
            <exception cref="T:System.ObjectDisposedException">The object has already been closed.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.TestLocalHeader(Orbita.Utiles.Compresion.Zip.ZipEntry,Orbita.Utiles.Compresion.Zip.ZipFile.HeaderTest)">
            <summary>
            Test a local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="tests">The type of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.HeaderTest">tests</see> to carry out.</param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate(Orbita.Utiles.Compresion.Zip.IArchiveStorage,Orbita.Utiles.Compresion.Zip.IDynamicDataSource)">
            <summary>
            Begin updating this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The <see cref="T:Orbita.Utiles.Compresion.Zip.IArchiveStorage">archive storage</see> for use during the update.</param>
            <param name="dataSource">The <see cref="T:Orbita.Utiles.Compresion.Zip.IDynamicDataSource">data source</see> to utilise during updating.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentNullException">One of the arguments provided is null</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate(Orbita.Utiles.Compresion.Zip.IArchiveStorage)">
            <summary>
            Begin updating to this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> archive.
            </summary>
            <param name="archiveStorage">The storage to use during the update.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate">
            <summary>
            Begin updating this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> archive.
            </summary>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate(Orbita.Utiles.Compresion.Zip.IArchiveStorage)"/>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.CommitUpdate"></seealso>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.AbortUpdate"></seealso>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.CommitUpdate">
            <summary>
            Commit current updates, updating this archive.
            </summary>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.AbortUpdate"></seealso>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.AbortUpdate">
            <summary>
            Abort updating leaving the archive unchanged.
            </summary>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate"></seealso>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.CommitUpdate"></seealso>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.SetComment(System.String)">
            <summary>
            Set the file comment to be recorded when the current update is <see cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.CommitUpdate">commited</see>.
            </summary>
            <param name="comment">The comment to record.</param>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(System.String,Orbita.Utiles.Compresion.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comment for this entry.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
            <exception cref="T:System.ObjectDisposedException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Compression method is not supported.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(System.String,Orbita.Utiles.Compresion.Zip.CompressionMethod)">
            <summary>
            Add a new entry to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <exception cref="T:System.ArgumentNullException">ZipFile has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The compression method is not supported.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(System.String,System.String)">
            <summary>
            Add a file to the archive.
            </summary>
            <param name="fileName">The name of the file to add.</param>
            <param name="entryName">The name to use for the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> on the Zip file created.</param>
            <exception cref="T:System.ArgumentNullException">Argument supplied is null.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(Orbita.Utiles.Compresion.Zip.IStaticDataSource,System.String)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(Orbita.Utiles.Compresion.Zip.IStaticDataSource,System.String,Orbita.Utiles.Compresion.Zip.CompressionMethod)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(Orbita.Utiles.Compresion.Zip.IStaticDataSource,System.String,Orbita.Utiles.Compresion.Zip.CompressionMethod,System.Boolean)">
            <summary>
            Add a file entry with data.
            </summary>
            <param name="dataSource">The source of the data for this entry.</param>
            <param name="entryName">The name to give to the entry.</param>
            <param name="compressionMethod">The compression method to use.</param>
            <param name="useUnicodeText">Ensure Unicode text is used for name and comments for this entry.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Add(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Add a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> that contains no data.
            </summary>
            <param name="entry">The entry to add.</param>
            <remarks>This can be used to add directories, volume labels, or empty file entries.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.AddDirectory(System.String)">
            <summary>
            Add a directory entry to the archive.
            </summary>
            <param name="directoryName">The directory to add.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Delete(System.String)">
            <summary>
            Delete an entry by name
            </summary>
            <param name="fileName">The filename to delete</param>
            <returns>True if the entry was found and deleted; false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Delete(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Delete a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> from the archive.
            </summary>
            <param name="entry">The entry to delete.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.WriteLEUshort(System.UInt16)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.WriteLEUint(System.UInt32)">
            <summary>
            Write an unsigned int in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.WriteLeLong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetBuffer">
            <summary>
            Get a raw memory buffer.
            </summary>
            <returns>Returns a raw memory buffer.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetDescriptorSize(Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate)">
            <summary>
            Get the size of the source descriptor for a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate"/>.
            </summary>
            <param name="update">The update to get the size for.</param>
            <returns>The descriptor size, zero if there isnt one.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.GetOutputStream(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Get an output stream for the specified <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an output stream for.</param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources;
            false to release only unmanaged resources.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ReadLEUshort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ReadLEUint">
            <summary>
            Read a uint in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries array.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.LocateEntry(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Locate the data for a given entry.
            </summary>
            <returns>
            The start offset of the data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.HaveKeys">
            <summary>
            Get a value indicating wether encryption keys are currently available.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.IsEmbeddedArchive">
            <summary>
            Get a value indicating wether
            this archive is embedded in another file or not.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.IsNewArchive">
            <summary>
            Get a value indicating that this archive is a new one.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.Count">
            <summary>
            Get the number of entries contained in this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/>.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.NameTransform">
            <summary>
            Get / set the <see cref="T:Orbita.Utiles.Compresion.Core.INameTransform"/> to apply to names when updating.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.EntryFactory">
            <summary>
            Get/set the <see cref="T:Orbita.Utiles.Compresion.Zip.IEntryFactory"/> used to generate <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> values
            during updates.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.BufferSize">
            <summary>
            Get /set the buffer size to be used when updating this zip file.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.IsUpdating">
            <summary>
            Get a value indicating an update has <see cref="M:Orbita.Utiles.Compresion.Zip.ZipFile.BeginUpdate">been started</see>.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UseZip64">
            <summary>
            Get / set a value indicating how Zip64 Extension usage is determined when adding entries.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.UpdateCommand">
            <summary>
            The kind of update to apply.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.UpdateComparer">
            <summary>
            Class used to sort updates.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UpdateComparer.Compare(System.Object,System.Object)">
            <summary>
            Compares two objects and returns a value indicating whether one is 
            less than, equal to or greater than the other.
            </summary>
            <param name="x">First object to compare</param>
            <param name="y">Second object to compare.</param>
            <returns>Compare result.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate">
            <summary>
            Represents a pending update to a Zip file.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.#ctor(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Copy an existing entry.
            </summary>
            <param name="entry">The existing entry to copy.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.Entry">
            <summary>
            Get the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for this update.
            </summary>
            <remarks>This is the source or original entry.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.OutEntry">
            <summary>
            Get the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> that will be written to the updated/new file.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.Command">
            <summary>
            Get the command for this update.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.Filename">
            <summary>
            Get the filename if any for this update.  Null if none exists.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.SizePatchOffset">
            <summary>
            Get/set the location of the size patch for this update.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.CrcPatchOffset">
            <summary>
            Get /set the location of the crc patch for this update.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipUpdate.OffsetBasedSize">
            <summary>
            Get/set the size calculated by offset.
            Specifically, the difference between this and next entry's starting offset.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString">
            <summary>
            Represents a string from a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> which is stored as an array of bytes.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.#ctor(System.String)">
            <summary>
            Initialise a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString"/> with a string.
            </summary>
            <param name="comment">The textual string form.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.#ctor(System.Byte[])">
            <summary>
            Initialise a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString"/> using a string in its binary 'raw' form.
            </summary>
            <param name="rawString"></param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.Reset">
            <summary>
            Reset the comment to its initial state.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.op_Implicit(Orbita.Utiles.Compresion.Zip.ZipFile.ZipString)~System.String">
            <summary>
            Implicit conversion of comment to a string.
            </summary>
            <param name="zipString">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString"/> to convert to a string.</param>
            <returns>The textual equivalent for the input value.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.IsSourceString">
            <summary>
            Get a value indicating the original source of data for this instance.
            True if the source was a string; false if the source was binary data.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.RawLength">
            <summary>
            Get the length of the comment when represented as raw bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.ZipString.RawComment">
            <summary>
            Get the comment in its 'raw' form as plain bytes.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.ZipEntryEnumerator">
            <summary>
            An <see cref="T:System.Collections.IEnumerator">enumerator</see> for <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">Zip entries</see>
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream">
            <summary>
            An <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream"/> is a stream that you can write uncompressed data
            to and flush, but cannot read, seek or do anything else to.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Close">
            <summary>
            Close this stream instance.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Flush">
            <summary>
            Write any buffered data to underlying storage.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Length">
            <summary>
            Get the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.UncompressedStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream">
            <summary>
            A <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream"/> is an <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream"/>
            whose data is only a part or subsection of a file.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.#ctor(Orbita.Utiles.Compresion.Zip.ZipFile,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream"/> class.
            </summary>
            <param name="zipFile">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> containing the underlying stream to use for IO.</param>
            <param name="start">The start of the partial data.</param>
            <param name="length">The length of the partial data.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream">partial input stream</see>.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, the buffer contains the specified byte array with the values between offset and (offset + count - 1) replaced by the bytes read from the current source.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin storing the data read from the current stream.</param>
            <param name="count">The maximum number of bytes to be read from the current stream.</param>
            <returns>
            The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
            </returns>
            <exception cref="T:System.ArgumentException">The sum of offset and count is larger than the buffer length. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support reading. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="count">The number of bytes to be written to the current stream.</param>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support writing. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
            <exception cref="T:System.ArgumentNullException">buffer is null. </exception>
            <exception cref="T:System.ArgumentException">The sum of offset and count is greater than the buffer length. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">offset or count is negative. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.SetLength(System.Int64)">
            <summary>
            When overridden in a derived class, sets the length of the current stream.
            </summary>
            <param name="value">The desired length of the current stream in bytes.</param>
            <exception cref="T:System.NotSupportedException">The stream does not support both writing and seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            When overridden in a derived class, sets the position within the current stream.
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"></see> indicating the reference point used to obtain the new position.</param>
            <returns>
            The new position within the current stream.
            </returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking, such as if the stream is constructed from a pipe or console output. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Flush">
            <summary>
            Clears all buffers for this stream and causes any buffered data to be written to the underlying device.
            </summary>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Position">
            <summary>
            Gets or sets the position within the current stream.
            </summary>
            <value></value>
            <returns>The current position within the stream.</returns>
            <exception cref="T:System.IO.IOException">An I/O error occurs. </exception>
            <exception cref="T:System.NotSupportedException">The stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
            <value></value>
            <returns>A long value representing the length of the stream in bytes.</returns>
            <exception cref="T:System.NotSupportedException">A class derived from Stream does not support seeking. </exception>
            <exception cref="T:System.ObjectDisposedException">Methods were called after the stream was closed. </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            </summary>
            <value>false</value>
            <returns>true if the stream supports writing; otherwise, false.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
            <value>true</value>
            <returns>true if the stream supports seeking; otherwise, false.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading.
            </summary>
            <value>true.</value>
            <returns>true if the stream supports reading; otherwise, false.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipFile.PartialInputStream.CanTimeout">
            <summary>
            Gets a value that determines whether the current stream can time out.
            </summary>
            <value></value>
            <returns>A value that determines whether the current stream can time out.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.IStaticDataSource">
            <summary>
            Provides a static way to obtain a source of data for an entry.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IStaticDataSource.GetSource">
            <summary>
            Get a source of data by creating a new stream.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.IDynamicDataSource">
            <summary>
            Represents a source of data that can dynamically provide
            multiple <see cref="T:System.IO.Stream">data sources</see> based on the parameters passed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IDynamicDataSource.GetSource(Orbita.Utiles.Compresion.Zip.ZipEntry,System.String)">
            <summary>
            Get a data source.
            </summary>
            <param name="entry">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> to get a source for.</param>
            <param name="name">The name for data if known.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> to use for compression input.</returns>
            <remarks>Ideally a new stream is created and opened to achieve this, to avoid locking problems.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.StaticDiskDataSource">
            <summary>
            Default implementation of a <see cref="T:Orbita.Utiles.Compresion.Zip.IStaticDataSource"/> for use with files stored on disk.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.StaticDiskDataSource.#ctor(System.String)">
            <summary>
            Initialise a new instnace of <see cref="T:Orbita.Utiles.Compresion.Zip.StaticDiskDataSource"/>
            </summary>
            <param name="fileName">The name of the file to obtain data from.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.StaticDiskDataSource.GetSource">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> provising data.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.DynamicDiskDataSource">
            <summary>
            Default implementation of <see cref="T:Orbita.Utiles.Compresion.Zip.IDynamicDataSource"/> for files stored on disk.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DynamicDiskDataSource.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Orbita.Utiles.Compresion.Zip.DynamicDiskDataSource"/>.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DynamicDiskDataSource.GetSource(Orbita.Utiles.Compresion.Zip.ZipEntry,System.String)">
            <summary>
            Get a <see cref="T:System.IO.Stream"/> providing data for an entry.
            </summary>
            <param name="entry">The entry to provide data for.</param>
            <param name="name">The file name for data if known.</param>
            <returns>Returns a stream providing data; or null if not available</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.IArchiveStorage">
            <summary>
            Defines facilities for data storage when updating Zip Archives.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.GetTemporaryOutput">
            <summary>
            Get an empty <see cref="T:System.IO.Stream"/> that can be used for temporary output.
            </summary>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Convert a temporary output stream to a final stream.
            </summary>
            <returns>The resulting final <see cref="T:System.IO.Stream"/></returns>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>This may be the current stream passed.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IArchiveStorage.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.IArchiveStorage.UpdateMode">
            <summary>
            Get the <see cref="T:Orbita.Utiles.Compresion.Zip.FileUpdateMode"/> to apply during updates.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage">
            <summary>
            An abstract <see cref="T:Orbita.Utiles.Compresion.Zip.IArchiveStorage"/> suitable for extension by inheritance.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.#ctor(Orbita.Utiles.Compresion.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.ConvertTemporaryToFinal"></seealso>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.GetTemporaryOutput"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to make a copy of.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to open for direct update.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.BaseArchiveStorage.UpdateMode">
            <summary>
            Gets the update mode applicable.
            </summary>
            <value>The update mode.</value>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage">
            <summary>
            An <see cref="T:Orbita.Utiles.Compresion.Zip.IArchiveStorage"/> implementation suitable for hard disks.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.#ctor(Orbita.Utiles.Compresion.Zip.ZipFile,Orbita.Utiles.Compresion.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
            <param name="updateMode">The update mode.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.#ctor(Orbita.Utiles.Compresion.Zip.ZipFile)">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage"/> class.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets a temporary output <see cref="T:System.IO.Stream"/> for performing updates on.
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts a temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of a stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The current stream.</param>
            <returns>Returns a stream suitable for direct updating.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.DiskArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage">
            <summary>
            An <see cref="T:Orbita.Utiles.Compresion.Zip.IArchiveStorage"/> implementation suitable for in memory streams.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage"/> class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.#ctor(Orbita.Utiles.Compresion.Zip.FileUpdateMode)">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage"/> class.
            </summary>
            <param name="updateMode">The <see cref="T:Orbita.Utiles.Compresion.Zip.FileUpdateMode"/> to use</param>
            <remarks>This constructor is for testing as memory streams dont really require safe mode.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.GetTemporaryOutput">
            <summary>
            Gets the temporary output <see cref="T:System.IO.Stream"/>
            </summary>
            <returns>Returns the temporary output stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal">
            <summary>
            Converts the temporary <see cref="T:System.IO.Stream"/> to its final form.
            </summary>
            <returns>Returns a <see cref="T:System.IO.Stream"/> that can be used to read
            the final storage for the archive.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.MakeTemporaryCopy(System.IO.Stream)">
            <summary>
            Make a temporary copy of the original stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to copy.</param>
            <returns>Returns a temporary output <see cref="T:System.IO.Stream"/> that is a copy of the input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.OpenForDirectUpdate(System.IO.Stream)">
            <summary>
            Return a stream suitable for performing direct updates on the original source.
            </summary>
            <param name="stream">The original source stream</param>
            <returns>Returns a stream suitable for direct updating.</returns>
            <remarks>If the <paramref name="stream"/> passed is not null this is used;
            otherwise a new <see cref="T:System.IO.MemoryStream"/> is returned.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.Dispose">
            <summary>
            Disposes this instance.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.FinalStream">
            <summary>
            Get the stream returned by <see cref="M:Orbita.Utiles.Compresion.Zip.MemoryArchiveStorage.ConvertTemporaryToFinal"/> if this was in fact called.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.LZW.LzwInputStream">
             <summary>
             This filter stream is used to decompress a LZW format stream.
             Specifically, a stream that uses the LZC compression method.
             This file format is usually associated with the .Z file extension.
            
             See http://en.wikipedia.org/wiki/Compress
             See http://wiki.wxwidgets.org/Development:_Z_File_Format
             
             The file header consists of 3 (or optionally 4) bytes. The first two bytes
             contain the magic marker "0x1f 0x9d", followed by a byte of flags.
            
             Based on Java code by Ronald Tschalar, which in turn was based on the unlzw.c
             code in the gzip package.
             </summary>
             <example> This sample shows how to unzip a compressed file
             <code>
             using System;
             using System.IO;
             
             using Orbita.Utiles.Compresion.Core;
             using Orbita.Utiles.Compresion.LZW;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
            			using (Stream inStream = new LzwInputStream(File.OpenRead(args[0])))
            			using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            				byte[] buffer = new byte[4096];
            				StreamUtils.Copy(inStream, outStream, buffer);
                                     // OR
                                     inStream.Read(buffer, 0, buffer.Length);
                                     // now do something with the buffer
             		}
             	}
             }	
             </code>
             </example>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a LzwInputStream
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream LZW format)
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.ReadByte">
            <summary>
            See <see cref="M:System.IO.Stream.ReadByte"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read. Zero signals the end of stream</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.ResetBuf(System.Int32)">
            <summary>
            Moves the unread data in the buffer to the beginning and resets
            the pointers.
            </summary>
            <param name="bitPosition"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.LZW.LzwInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.LZW.LzwInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
            <param name="seed">The seed value to initialise keys with.</param>
            <returns>A new key value.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicCryptoBase.SetKeys(System.Byte[])">
            <summary>
            Set the key schedule for encryption/decryption.
            </summary>
            <param name="keyData">The data use to set the keys from.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size in bits.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.WindowsPathUtils">
            <summary>
            WindowsPathUtils provides simple utilities for handling windows paths.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.WindowsPathUtils.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Orbita.Utiles.Compresion.Core.WindowsPathUtils"/> class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.WindowsPathUtils.DropPathRoot(System.String)">
            <summary>
            Remove any path root present in the path
            </summary>
            <param name="path">A <see cref="T:System.String"/> containing path information.</param>
            <returns>The path with the root removed if it was present; path otherwise.</returns>
            <remarks>Unlike the <see cref="T:System.IO.Path"/> class the path isnt otherwise checked for validity.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.StreamUtils">
            <summary>
            Provides simple <see cref="T:System.IO.Stream"/>" utilities.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[])">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/> ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read.</param>
            <param name="buffer">The buffer to fill.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.ReadFully(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from a <see cref="T:System.IO.Stream"/>" ensuring all the required data is read.
            </summary>
            <param name="stream">The stream to read data from.</param>
            <param name="buffer">The buffer to store data in.</param>
            <param name="offset">The offset at which to begin storing data.</param>
            <param name="count">The number of bytes of data to store.</param>
            <exception cref="T:System.ArgumentNullException">Required parameter is null</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> and or <paramref name="count"/> are invalid.</exception>
            <exception cref="T:System.IO.EndOfStreamException">End of stream is encountered before all the data has been read.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[])">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],Orbita.Utiles.Compresion.Core.ProgressHandler,System.TimeSpan,System.Object,System.String)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:Orbita.Utiles.Compresion.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.Copy(System.IO.Stream,System.IO.Stream,System.Byte[],Orbita.Utiles.Compresion.Core.ProgressHandler,System.TimeSpan,System.Object,System.String,System.Int64)">
            <summary>
            Copy the contents of one <see cref="T:System.IO.Stream"/> to another.
            </summary>
            <param name="source">The stream to source data from.</param>
            <param name="destination">The stream to write data to.</param>
            <param name="buffer">The buffer to use during copying.</param>
            <param name="progressHandler">The <see cref="T:Orbita.Utiles.Compresion.Core.ProgressHandler">progress handler delegate</see> to use.</param>
            <param name="updateInterval">The minimum <see cref="T:System.TimeSpan"/> between progress updates.</param>
            <param name="sender">The source for this event.</param>
            <param name="name">The name to use with the event.</param>
            <param name="fixedTarget">A predetermined fixed target value to use with progress updates.
            If the value is negative the target is calculated by looking at the stream.</param>
            <remarks>This form is specialised for use within #Zip to support events during archive operations.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.StreamUtils.#ctor">
            <summary>
            Initialise an instance of <see cref="T:Orbita.Utiles.Compresion.Core.StreamUtils"></see>
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHaspSN">
            <summary>
            Gestion de llaves
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.LocalScopeText">
            <summary>
            Acceso local
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.minutosAdvertencia">
            <summary>
            Minutos cuando empieza a advertir de que no hay llave
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.minutosError">
            <summary>
            Minutos cuando cierra la aplicacion si no hay llave
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.CheckRemoteDebuggerPresent(System.IntPtr,System.Boolean@)">
            <summary>
            CheckRemoteDebuggerPresent
            </summary>
            <param name="ProcessHandle"></param>
            <param name="DebuggerPresent"></param>
            <returns></returns>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.licencia">
            <summary>
            Tecnologías utilizada para licenciar
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.nombreAplicacion">
            <summary>
            Tecnologías utilizada para licenciar
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.vendorCodeString">
            <summary>
            Clave del producto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.productos">
            <summary>
            Coleccion de productos a licenciar
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.threadHasp">
            <summary>
            Hilo de comprobación de llaves
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.threadMensajes">
            <summary>
            Hilo de mensajes al usuario
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.FechaError">
            <summary>
            Fecha cuando no se detecta la llave
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.minutosSN">
            <summary>
            Minutos sin llave
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.esServicio">
            <summary>
            Indica si el control de llave se realiza sobre servicio
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.wrapper">
            <summary>
            Logger de la clase
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.swCodes">
            <summary>
            Códigos del sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.swCod">
            <summary>
            Licencia sw
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.mensajeLlaveInicial">
            <summary>
            Indica al hilo de mensajes que muestre el mensaje de que no encuentra llave inicial
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.segundosConsulta">
            <summary>
            Tiempo de consulta
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.#ctor">
            <summary>
            Constructor de clase para llaves HASP
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ImpedirDepurador">
            <summary>
            Impide la depuración del código
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ThreadImpedirDepurador">
            <summary>
            Impide la depuración del código
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.FinalizarTodo(System.Int32)">
            <summary>
            Finaliza el depurador
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.EsperarDepurador(System.Int32,System.Boolean)">
            <summary>
            Espera la ejecución del depurador
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.IniHaspSN(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Inicia el hilo para cualquier licenciamiento
            </summary>
            <param name="listaProductos">Productos sobre los que se realiza la inspeccion</param>
            <param name="esServicio">Indica si la aplicacion que realiza la llamada es un servicio</param>
            <param name="log">Log de la clase</param>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ComprobarTecnologia">
            <summary>
            Inicia el hilo de mensajes
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ComprobarProductoHASPUsb(Orbita.Utiles.OHaspSN.OProductos)">
            <summary>
            Comprueba si existe licencia HASP Usb
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ExisteSerial(System.String)">
            <summary>
            Comprueba si el producto esta en la llave
            </summary>
            <param name="cod">Producto a comprobar</param>
            <returns>Verdadero si está el producto y falso si no esta</returns>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ComprobarProductoHASPSL(Orbita.Utiles.OHaspSN.OProductos)">
            <summary>
            Comprueba si existe licencia HASP Sentinel
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.IniciarThreadMensajes">
            <summary>
            Inicia el hilo de mensajes
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.TareasMensaje">
            <summary>
            Muestra un mensaje si no encuentra licencia si los minutos superan a los minutos de advertencia
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ComprobarEstadoInicial">
            <summary>
            Realiza la inspeccion inicial y si no encuentra la llave cierra la aplicacion
            </summary>
            <returns>Verdadero si están los productos y falso si no están</returns>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.IniciarThreadHasp">
            <summary>
            Inicia el hilo de comprobacion
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.TareasHasp">
            <summary>
            Comprueba si estan las licencias y gestiona los tiempos sin licencia
            </summary>   
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.ProcesarXMLProd(Orbita.Utiles.OHaspSN.OProductos)">
            <summary>
            Comprueba si el producto esta en la llave
            </summary>
            <param name="producto">Producto a comprobar</param>
            <returns>Verdadero si está el producto y falso si no esta</returns>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.IncluirSerial">
            <summary>
            Introduce los códigos de los productos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHaspSN.CerrarAplicacion">
            <summary>
            Cierra la aplicación
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHaspSN.OrbitaCerrarAplicacion">
            <summary>
            Evento cierre aplicación
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHaspSN.OrbitaMensajeAplicacion">
            <summary>
            Evento mensaje de aplicación
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHaspSN.Asociado">
            <summary>
            Indica si hay alguien conectado
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHaspSN.Local">
            <summary>
            Indica si se ejecuta en local
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHaspSN.Remoto">
            <summary>
            Indica si se ejecuta en remoto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHaspSN.OrbitaCerrarAplicaciontHandler">
            <summary>
            Delegado cierre aplicación
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Orbita.Utiles.OHaspSN.OrbitaMensajeAplicaciontHandler">
            <summary>
            Delegado mensaje de aplicación
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:Orbita.Utiles.OHaspSN.OProductos">
            <summary>
            Descripción de los productos que se van a licenciar
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.Basico">
            <summary>
            Basico
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.LPR">
            <summary>
            LPR
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.OCR">
            <summary>
            OCR
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.ADR">
            <summary>
            ADR
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.AlarmasMails">
            <summary>
            Alarmas Mails
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.AlarmasSMS">
            <summary>
            Alarmas SMS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.CCEnvasado">
            <summary>
            Envasado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHaspSN.OProductos.LectorCarin">
            <summary>
            Lector carin
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHaspSN.OLicencias">
            <summary>
            Tecnologías para licencia sw
            </summary>
        </member>
        <member name="T:Orbita.Utiles.oMsgHasp">
            <summary>
            oOPCComms.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.oMsgHasp._producto">
            <summary>
            Producto.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.oMsgHasp._estado">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.oMsgHasp._mensaje">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.oMsgHasp.Dispose">
            <summary>
            Dispose.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.oMsgHasp.Estado">
            <summary>
            Estado.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.oMsgHasp.Producto">
            <summary>
            Producto.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.oMsgHasp.Mensaje">
            <summary>
            Mensaje.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OExcepcion">
            <summary>
            Clase OExcepcion.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
            <param name="mensaje">Mensaje que describe el error.</param>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.String,System.Exception)">
            <summary>
            Inicializar una nueva instancia de la clase OExcepcion.
            </summary>
            <param name="mensaje">Mensaje de error que explica la razón
            de la excepción.</param>
            <param name="inner">La excepción que es la causa de la excepción
            actual o una referencia nula si no se especifica ninguna excepción
            interna.</param>
        </member>
        <member name="M:Orbita.Utiles.OExcepcion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info">Clase System.Runtime.Serialization.SerializationInfo
            que contiene los datos serializados del objeto que hacen referencia a la
            excepción que se va a producir.</param>
            <param name="context">Enumeración System.Runtime.Serialization.StreamingContext
            que contiene información contextual sobre el origen o el destino.</param>
        </member>
        <member name="T:Orbita.Utiles.OObjeto">
            <summary>
            Clase estática destinada a alojar métodos genéricos para el manejo de objetos de forma segura
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.IsTypeOf(System.Object,System.Type[])">
            <summary>
            Función que devuelve si el objeto pertenece a alguno de los tipos listados
            </summary>
            <param name="o">Objeto que se quiere conocer el tipo</param>
            <param name="types">Vector de tipos con lo que se ha de comparar el tipo del objeto</param>
            <returns>Verdadero si el tipo del objeto está dentro de la lista de tipos pasados como parámetros</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.IsNumeric(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo numérico
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo numérico</param>
            <returns>Verdadero si el tipo del objeto es numérico</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.ToString(System.Object)">
            <summary>
            Convierte un objeto a string
            </summary>
            <param name="valor"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OObjeto.CompararObjetos(System.Object,System.Object)">
            <summary>
            Realiza una comparación entre dos objetos
            </summary>
            <param name="valor1">Primer objeto a comparar</param>
            <param name="valor2">Segundo objeto a comparar</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OObjetoBase`1">
            <summary>
            Clase base para el trabajo de forma robusta con variables
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1.LanzarExcepcionSiValorNoValido">
            <summary>
            Indica que se ha de lanzar una excepción de tipo InvalidValueException cuando el valor a establecer no sea el correcto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1.ValorPorDefecto">
            <summary>
            Valor por defecto del objeto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Valor">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OObjetoBase`1._Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OObjetoBase`1.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="valor">valor no permitido</param>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Valor">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Valido">
            <summary>
            Indica que el valor asignado es válido
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OObjetoBase`1.ValorGenerico">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.IObjetoBase.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.IObjetoBase.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="valor">valor no permitido</param>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Codigo">
            <summary>
            Código identificativo de la clase.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Valido">
            <summary>
            Indica que el valor asignado es válido
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.Estado">
            <summary>
            Estado del valor actual
            </summary>
        </member>
        <member name="P:Orbita.Utiles.IObjetoBase.ValorGenerico">
            <summary>
            Valor del objeto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoObjetoRobusto">
            <summary>
            Define el conjunto de módulos del sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoObjetoRobusto.ResultadoCorrecto">
            <summary>
            Módulo de funciones comunes del sistema. 
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoObjetoRobusto.ValorTipoIncorrecto">
            <summary>
            El valor a asignar no es del tipo correcto
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoRobusto">
            <summary>
            Clase que implementa el enumerado de los módulos del sistema
            </summary>
        </member>
        <member name="M:Orbita.Utiles.EnumEstadoRobusto.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constuctor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OTexto">
            <summary>
            Asignación de una variable a un campo de tipo texto
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.MaxLength">
            <summary>
            Máxima longitud del string
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.AdmiteVacio">
            <summary>
            Indica que es admitido como válido la cadena vacia
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTexto.LimitarLongitud">
            <summary>
            Corta el texto en caso de sobreparsar la longitud máxima
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.#ctor(System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTexto.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,System.Int32,System.Boolean,System.Boolean,System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTexto.Validar(System.Object,System.String,System.Int32,System.Boolean,System.Boolean,System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OTexto.StringReplace(System.String,System.String,System.String,System.StringComparison)">
            <summary>
            Case insensitive version of String.Replace().
            </summary>
            <param name="s">String that contains patterns to replace</param>
            <param name="oldValue">Pattern to find</param>
            <param name="newValue">New pattern to replaces old</param>
            <param name="comparisonType">String comparison type</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoTextoRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoTextoRobusto.LongitudSobrepasada">
            <summary>
            La longitud del texto es demasiado larga
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoTextoRobusto.CadenaVacia">
            <summary>
            El texto no contiene ningun caracter
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEnumeradoTexto">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEnumeradoTexto.ValoresPermitidos">
            <summary>
            Valores permitidos para el texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.#ctor(System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,System.String[],System.String)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumeradoTexto.Validar(System.Object,System.String,System.String[],System.String,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.OEnumerado`1">
            <summary>
            Asignación de una variable a un campo de tipo enumerado (aunque internamente trabaja como un string)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.#ctor(System.String,`0,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="resultado">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,`0)">
            <summary>
            Evalua si el parámetro es texto
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.Validar(System.Object,System.String,`0,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.EnumContains(System.Int32,System.Int32[])">
            <summary>
            Se utiliza con enumerados y devuelve verdadero si el enumerado está contenido en el valor
            </summary>
            <param name="valor">Valor del cual se quiere saber si contiene cieto enumerado</param>
            <param name="enumerate">Enumerado que deseamos comparar con el valor</param>
            <returns>Devuelve verdadero si el enumerado está contenido en el valor</returns>
        </member>
        <member name="M:Orbita.Utiles.OEnumerado`1.EnumParse(System.Type,System.String,System.Object)">
            <summary>
            Se utiliza con enumerados para convertir un valor de texto en un enumerado del tipo indicado
            </summary>
            <param name="enumType">Tipo del enumerado al que deseamos convertir</param>
            <param name="valor">Texto que queremos convertir a enumerado</param>
            <param name="defecto">Valor por defecto en el caso que el texto no coincida con ningun elemento del enumerado</param>
            <returns>Devuelve el enumerado correspondiente con el texto</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoEnumRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnumRobusto.ValorNoPermitido">
            <summary>
            El valor a asignar no está permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEntero">
            <summary>
            Asignación de una variable a un campo de tipo entero
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEntero.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEntero.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.Validar(System.Object,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.IsNumericInt(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo entero
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo entero</param>
            <returns>Verdadero si el tipo del objeto es entero</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OEntero.EnsureRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoEnteroRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnteroRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoEnteroRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.ODecimal">
            <summary>
            Asignación de una variable a un campo de tipo decimal
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ODecimal.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.ODecimal.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.#ctor(System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="value">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Validar(System.Object,System.String,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="value">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.IsNumericFloat(System.Object)">
            <summary>
            Indica si el objeto pasado es de tipo decimal
            </summary>
            <param name="o">Objeto que se quiere conocer si es de tipo decimal</param>
            <returns>Verdadero si el tipo del objeto es decimal</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.InRange(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.EnsureRange(System.Double,System.Double,System.Double)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODecimal.Similar(System.Double,System.Double,System.Double)">
            <summary>
            Compara dos valores decimales para definir si son similares, con una diferencia menor que sigma
            </summary>
            <param name="valor1">Primer valor a comparar</param>
            <param name="valor2">Segundo valor a comparar</param>
            <param name="sigma">Diferencia máxima entre ambos valores</param>
            <returns>Verdadero si los valores son menores que sigma</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoDecimalRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoDecimalRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoDecimalRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OBooleano">
            <summary>
            Asignación de una variable a un campo de tipo booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.#ctor(System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.Boolean)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,System.Boolean)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OBooleano.Validar(System.Object,System.String,System.Boolean,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoBoolRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OIntervaloTiempo">
            <summary>
            Asignación de una variable a un campo de tipo intervalo de tiempo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OIntervaloTiempo.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OIntervaloTiempo.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.#ctor(System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
            <param name="value">valor no permitido</param>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.Validar(System.Object,System.String,System.TimeSpan,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.InRange(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OIntervaloTiempo.EnsureRange(System.TimeSpan,System.TimeSpan,System.TimeSpan)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoIntervaloTiempoRobusto.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OFechaHora">
            <summary>
            Asignación de una variable a un campo de tipo fecha
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFechaHora.MinValor">
            <summary>
            Valor mínimo
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OFechaHora.MaxValor">
            <summary>
            Valor máximo
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.#ctor(System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object@)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.LanzarExcepcion">
            <summary>
            Lanza una exepción por no estár permitido el valor especificado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,Orbita.Utiles.EnumEstadoRobusto@,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro es booleano
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.Validar(System.Object,System.String,System.DateTime,System.DateTime,System.DateTime,System.Boolean)">
            <summary>
            Comprueba que el valor del objeto es correcto
            </summary>
            <param name="valor">Valor del objeto a comprobar</param>
            <returns>Verdadero si el valor es correcto</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.GregorianoAJuliano(System.Int32,System.Int32,System.Int32)">
            <summary>
            Conversión de día gregocriano a juliano
            </summary>
            <param name="dia">Día</param>
            <param name="mes">Mes</param>
            <param name="anno">Año</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.JulianoAGregoriano(System.Int64)">
            <summary>
            Conversión de dia juliano a gregoriano
            </summary>
            <param name="jdia">Día juliano</param>
            <returns>Fecha gregoriana</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.DateString(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del día actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.DateTimeString(System.DateTime)">
            <summary>
            Devuelve una cadena de texto identificativa del momento actual (utilizada para indexar ficheros)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.InRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado
            </summary>
            <returns>Devuelve verdadero si el parámetro está dentro del rango determinado</returns>
        </member>
        <member name="M:Orbita.Utiles.OFechaHora.EnsureRange(System.DateTime,System.DateTime,System.DateTime)">
            <summary>
            Evalúa si el parámetro está dentro del rango determinado y en caso contrario lo modifica para que cumpla la condición
            </summary>
            <returns>Devuelve el número obligando a que esté dentro del rango determinado</returns>
        </member>
        <member name="T:Orbita.Utiles.EnumEstadoFechaHoraRobusta">
            <summary>
            Resultado de la validación del SafeBool
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoFechaHoraRobusta.ValorSuperiorMaximo">
            <summary>
            El valor a asignar es sueprior al máximo permitido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EnumEstadoFechaHoraRobusta.ValorInferiorMinimo">
            <summary>
            El valor a asignar es inferior al mínimo permitido
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OBinario">
            <summary>
            Trabajo con números binarios
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.Byte,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.UInt16,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.GetBit(System.UInt32,System.Int32)">
            <summary>
            Extrae un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos extraer el bit</param>
            <param name="posicion">Posición del bit a extraer</param>
            <returns>Booleano con el valor del bit extraido</returns>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.Byte@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt16@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="M:Orbita.Utiles.OBinario.SetBit(System.UInt32@,System.Int32,System.Boolean)">
            <summary>
            Establece un bit en la posición indicada
            </summary>
            <param name="numero">Valor al cual queremos establecer el bit</param>
            <param name="posicion">Posición del bit a establecer</param>
            <param name="valor">Booleano con el valor del bit a establecer</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionBase">
            <summary>
            OCompresionFicherosExcepcionBase is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
            <remarks>NOTE: Not all exceptions thrown will be derived from this class.
            A variety of other exceptions are possible for example <see cref="T:System.ArgumentNullException"></see></remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionBase.#ctor">
            <summary>
            Initializes a new instance of the OCompresionFicherosExcepcionBase class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionBase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OCompresionFicherosExcepcionBase class with a specified error message.
            </summary>
            <param name="message">A message describing the exception.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionBase.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the OCompresionFicherosExcepcionBase class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">A message describing the exception.</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.buffer_">
            <summary>
            Internal work buffer
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufferSize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            Write a byte to buffer
            </summary>
            <param name="value">
            The value to write
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="value">
            The value to write.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="length">number of bytes to write</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">The output array.</param>
            <param name="offset">The offset into output array.</param>
            <param name="length">The maximum number of bytes to store.</param>
            <returns>The number of bytes flushed.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            The internal buffer contents converted to a byte array.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.InflaterHuffmanTree.GetSymbol(Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.LZW.LzwException">
            <summary>
            LzwException represents a LZW specific exception
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwException.#ctor">
            <summary>
            Initialise a new instance of LzwException
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwException.#ctor(System.String)">
            <summary>
            Initialise a new instance of LzwException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.LZW.LzwException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.LZW.LzwException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="T:Orbita.Utiles.OHilos">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilos._lista">
            <summary>
            Colección de hilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHilos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Add(System.Threading.ThreadStart,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Adicionar el hilo a la colección.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo tras su creación.</param>
            <returns>Hilo creado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Iniciar">
            <summary>
            Recorrer la colección e iniciar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Suspender">
            <summary>
            Recorrer la colección y suspender todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Reanudar">
            <summary>
            Recorrer la colección y reanudar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Destruir">
            <summary>
            Recorrer la colección y abortar todos los hilos que contenga.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilos.Contar">
            <summary>
            Contar el número de hilos de la colección.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHilos.OnDespuesAdicionar">
            <summary>
            Evento del método adición.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory">
            <summary>
            Basic implementation of <see cref="T:Orbita.Utiles.Compresion.Zip.IEntryFactory"></see>
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.IEntryFactory">
            <summary>
            Defines factory methods for creating new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"></see> values.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for a file given its name
            </summary>
            <param name="fileName">The name of the file to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system if the file exists.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">file entry</see> based on the <paramref name="fileName"/> passed.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.IEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for a directory given its name
            </summary>
            <param name="directoryName">The name of the directory to create an entry for.</param>
            <param name="useFileSystem">If true get details from the file system for this directory if it exists.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">directory entry</see> based on the <paramref name="directoryName"/> passed.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.IEntryFactory.NameTransform">
            <summary>
            Get/set the <see cref="T:Orbita.Utiles.Compresion.Core.INameTransform"></see> applicable.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.#ctor">
            <summary>
            Initialise a new instance of the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory"/> class.
            </summary>
            <remarks>A default <see cref="T:Orbita.Utiles.Compresion.Core.INameTransform"/>, and the LastWriteTime for files is used.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.#ctor(Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory"/> using the specified <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting"/>
            </summary>
            <param name="timeSetting">The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting">time setting</see> to use when creating <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">Zip entries</see>.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.#ctor(System.DateTime)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory"/> using the specified <see cref="T:System.DateTime"/>
            </summary>
            <param name="time">The time to set all <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.DateTime"/> values to.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.MakeFileEntry(System.String)">
            <summary>
            Make a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> for a file.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <returns>Returns a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.MakeFileEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> from a name.
            </summary>
            <param name="fileName">The name of the file to create a new entry for.</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> based on the <paramref name="fileName"/>.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String)">
            <summary>
            Make a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <returns>Returns a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.MakeDirectoryEntry(System.String,System.Boolean)">
            <summary>
            Make a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"></see> for a directory.
            </summary>
            <param name="directoryName">The raw untransformed name for the new directory</param>
            <param name="useFileSystem">If true entry detail is retrieved from the file system if the file exists.</param>
            <returns>Returns a new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"></see> representing a directory.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.NameTransform">
            <summary>
            Get / set the <see cref="T:Orbita.Utiles.Compresion.Core.INameTransform"/> to be used when creating new <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> values.
            </summary>
            <remarks>
            Setting this property to null will cause a default <see cref="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform">name transform</see> to be used.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.Setting">
            <summary>
            Get / set the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting"/> in use.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.FixedDateTime">
            <summary>
            Get / set the <see cref="T:System.DateTime"/> value to use when <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.Setting"/> is set to <see cref="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.Fixed"/>
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.GetAttributes">
            <summary>
            A bitmask defining the attributes to be retrieved from the actual file.
            </summary>
            <remarks>The default is to get all possible attributes from the actual file.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.SetAttributes">
            <summary>
            A bitmask defining which attributes are to be set on.
            </summary>
            <remarks>By default no attributes are set on.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.IsUnicodeText">
            <summary>
            Get set a value indicating wether unidoce text should be set on.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting">
            <summary>
            Defines the possible values to be used for the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.DateTime"/>.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.LastWriteTime">
            <summary>
            Use the recorded LastWriteTime value for the file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.LastWriteTimeUtc">
            <summary>
            Use the recorded LastWriteTimeUtc value for the file
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.CreateTime">
            <summary>
            Use the recorded CreateTime value for the file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.CreateTimeUtc">
            <summary>
            Use the recorded CreateTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.LastAccessTime">
            <summary>
            Use the recorded LastAccessTime value for the file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.LastAccessTimeUtc">
            <summary>
            Use the recorded LastAccessTimeUtc value for the file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.Fixed">
            <summary>
            Use a fixed value.
            </summary>
            <remarks>The actual <see cref="T:System.DateTime"/> value used can be
            specified via the <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.#ctor(System.DateTime)"/> constructor or 
            using the <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.#ctor(Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting)"/> with the setting set
            to <see cref="F:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.TimeSetting.Fixed"/> which will use the <see cref="T:System.DateTime"/> when this class was constructed.
            The <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntryFactory.FixedDateTime"/> property can also be used to set this value.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer"/> with a default buffer size
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
            <param name="bufferSize">The size to use for the buffer</param>
            <remarks>A minimum buffer size of 1KB is permitted.  Lower sizes are treated as 1KB.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(Orbita.Utiles.Compresion.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a <see cref="T:System.Byte"/> from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an <see cref="T:System.Int16"/> in little endian byte order.
            </summary>
            <returns>The short value read case to an int.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an <see cref="T:System.Int32"/> in little endian byte order.
            </summary>
            <returns>The int value read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read a <see cref="T:System.Int64"/> in little endian byte order.
            </summary>
            <returns>The long value read.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:Orbita.Utiles.Compresion.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Orbita.Utiles.Compresion.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,Orbita.Utiles.Compresion.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="count">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="count">The number of bytes</paramref> to skip is less than or equal to zero.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="offset">The relative offset to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> defining where to seek from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <param name="value">The new length value for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <param name="buffer">Thew buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <param name="value">The byte to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads decompressed data into the provided buffer byte array
            </summary>
            <param name ="buffer">
            The array to read and decompress data into
            </param>
            <param name ="offset">
            The offset indicating where the data should be placed
            </param>
            <param name ="count">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.isStreamOwner">
            <summary>
            Flag indicating wether this instance is designated the stream owner.
            When closing if this flag is true the underlying stream is closed.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ScanEventArgs.Name">
            <summary>
            The file or directory name for this event.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ProgressEventArgs">
            <summary>
            Event arguments during processing of a single file or directory.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ProgressEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.ScanEventArgs"/>
            </summary>
            <param name="name">The file or directory name if known.</param>
            <param name="processed">The number of bytes processed so far</param>
            <param name="target">The total number of bytes to process, 0 if not known</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.Name">
            <summary>
            The name for this event if known.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating wether scanning should continue or not.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.PercentComplete">
            <summary>
            Get a percentage representing how much of the <see cref="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.Target"></see> has been processed
            </summary>
            <value>0.0 to 100.0 percent; 0 if target is not known.</value>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.Processed">
            <summary>
            The number of bytes processed so far
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ProgressEventArgs.Target">
            <summary>
            The number of bytes to process.
            </summary>
            <remarks>Target may be 0 or negative if the value isnt known.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:Orbita.Utiles.Compresion.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ProcessDirectoryHandler">
            <summary>
            Delegate invoked before starting to process a directory.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ProcessFileHandler">
            <summary>
            Delegate invoked before starting to process a file.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ProgressHandler">
            <summary>
            Delegate invoked during processing of a file or directory
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.CompletedFileHandler">
            <summary>
            Delegate invoked when a file has been completely processed.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.DirectoryFailureHandler">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.FileFailureHandler">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
            <param name="sender">The source of the event</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">file filter</see> to apply when scanning.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter"> directory filter</see> to apply.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.#ctor(Orbita.Utiles.Compresion.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Orbita.Utiles.Compresion.Core.IScanFilter">filter</see> to apply.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.#ctor(Orbita.Utiles.Compresion.Core.IScanFilter,Orbita.Utiles.Compresion.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:Orbita.Utiles.Compresion.Core.IScanFilter">filter</see>  to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:Orbita.Utiles.Compresion.Core.IScanFilter">filter</see>  to apply.</param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has finished.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.OnCompleteFile(System.String)">
            <summary>
            Raise the complete file event
            </summary>
            <param name="file">The file name</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to scan a single directory.</param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.fileFilter_">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.directoryFilter_">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Core.FileSystemScanner.alive_">
            <summary>
            Flag indicating if scanning should continue running.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OResetManual">
            <summary>
            Notifica que se ha producido un evento a uno o varios subprocesos en espera.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OResetManual._eventoResetManual">
            <summary>
            Atributo que marca la sincronización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OResetManual.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.#ctor(System.Int16)">
            <summary>
            Inicializar una nueva instancia de la clase OResetManual.
            </summary>
            <param name="contador">Número de eventos ManualResetEvent
            que van a ser creados.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.GetEvento">
            <summary>
            Método que devuelve la colección.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir">
            <summary>
            Dormir el hilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.TimeSpan)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="tiempo">Tiempo en TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16)">
            <summary>
            Dormir el hilo.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16,System.Int16)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="indice">Indice de reset.</param>
            <param name="tiempo">Tiempo en segundos.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Dormir(System.Int16,System.TimeSpan)">
            <summary>
            Dormir el hilo el tiempo establecido en segundos.
            Dicho hilo se va a despertar, o bien, por 
            trascurrido Tiempo, o por la pulsación del
            botón Parar (Set).
            </summary>
            <param name="indice">Indice de reset.</param>
            <param name="tiempo">Tiempo en TimeSpan.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Despertar">
            <summary>
            Indicar al escritor que escribimos en la cola
            de resultados para que salga de su letargo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Despertar(System.Int16)">
            <summary>
            Indicar al escritor que escribimos en la cola
            de resultados para que salga de su letargo.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Resetear">
            <summary>
            Reset para la siguiente vez que se mande un Set.
            Es necesario invocarlo por haber utilizado 
            ManualResetEvent.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Resetear(System.Int16)">
            <summary>
            Reset para la siguiente vez que se mande un Set.
            Es necesario invocarlo por haber utilizado 
            ManualResetEvent.
            </summary>
            <param name="indice">Indice de reset.</param>
        </member>
        <member name="M:Orbita.Utiles.OResetManual.Inicializar(System.Int16)">
            <summary>
            Inicializar el array de ManualResetEvent
            en función del contador de eventos.
            </summary>
            <param name="contador">Contador de eventos.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.WindowsNameTransform">
            <summary>
            WindowsNameTransform transforms <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> names to windows compatible ones.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.MaxPath">
            <summary>
             The maximum windows path name permitted.
            </summary>
            <remarks>This may not valid for all windows systems - CE?, etc but I cant find the equivalent in the CLR.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.#ctor(System.String)">
            <summary>
            Initialises a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.WindowsNameTransform"/>
            </summary>
            <param name="baseDirectory"></param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Orbita.Utiles.Compresion.Zip.WindowsNameTransform"/>
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a Zip directory name to a windows directory name.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.TransformFile(System.String)">
            <summary>
            Transform a Zip format file name to a windows style one.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.IsValidName(System.String)">
            <summary>
            Test a name to see if it is a valid name for a windows filename as extracted from a Zip archive.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name is a valid zip name; false otherwise.</returns>
            <remarks>The filename isnt a true windows path in some fundamental ways like no absolute paths, no rooted paths etc.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.#cctor">
            <summary>
            Initialise static class information.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.MakeValidName(System.String,System.Char)">
            <summary>
            Force a name to be valid by replacing invalid characters with a fixed value
            </summary>
            <param name="name">The name to make valid</param>
            <param name="replacement">The replacement character to use for any invalid characters.</param>
            <returns>Returns a valid name</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.BaseDirectory">
            <summary>
            Gets or sets a value containing the target directory to prefix values with.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.TrimIncomingPaths">
            <summary>
            Gets or sets a value indicating wether paths on incoming values should be removed.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.WindowsNameTransform.Replacement">
            <summary>
            Gets or set the character to replace invalid characters during transformations.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="value">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="length">length of pattern to copy</param>
            <param name="distance">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.CopyStored(Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="length">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dictionary">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="length">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.#ctor(Orbita.Utiles.Compresion.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
            <param name="flush">True to flush input buffers</param>
            <param name="finish">Finish deflation with the current input.</param>
            <returns>Returns true if progress has been made.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buffer">The buffer containing input data.</param>
            <param name="offset">The offset of the first byte of data.</param>
            <param name="count">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Determines if more <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">input</see> is needed.
            </summary>		
            <returns>Return true if input is needed via <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">SetInput</see></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
            <param name="buffer">The buffer containing the dictionary data</param>
            <param name="offset">The offset in the buffer for the first byte of data</param>
            <param name="length">The length of the dictionary data.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
            <param name="level">The value to set the level to.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.compressionFunction">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:Orbita.Utiles.Compresion.ReturnInfo">
            <summary>
            Contiene información acerca del estado de retorno de una función
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.ReturnInfo.EjecucionCorrecta">
            <summary>
            Indica si la ejecución ha sido correcta
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.ReturnInfo.Excepcion">
            <summary>
            En caso de que la ejecución haya sido incorrecta, se pasa la excepción para que la pueda tratar el código invocante de la función
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.ReturnInfo.#ctor">
            <summary>
            Constructor de la clase por defecto. Crea el objeto adecuado cuando la ejecución es correcta
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.ReturnInfo.#ctor(System.Boolean,System.Exception)">
            <summary>
            Constructor de la clase con parámetros. Creado especialmente para los casos en los que la ejecución es incorrecta, y pasarle la excpción. Si la ejecución es correcta no se hace caso al argumento de la excepción, siendo éste siempre nulo
            </summary>
            <param name="ejecucionCorrecta">Indica si la ejecución ha sido correcta o no</param>
            <param name="excepcion">La excepción producida en caso que no haya sido correcta la ejecución del método. Si la ejecución es correcta no se hace caso al argumento de la excepción, siendo éste siempre nulo.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.LZW.LzwConstants">
            <summary>
            This class contains constants used for LZW
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.MAGIC">
            <summary>
            Magic number found at start of LZW header: 0x1f 0x9d
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.MAX_BITS">
            <summary>
            Maximum number of bits per code
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.BIT_MASK">
            <summary>
            Mask for 'number of compression bits'
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.EXTENDED_MASK">
            <summary>
            Indicates the presence of a fourth header byte
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.RESERVED_MASK">
            <summary>
            Reserved bits
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.BLOCK_MODE_MASK">
            <summary>
            Block compression: if table is full and compression rate is dropping,
            clear the dictionary.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.HDR_SIZE">
            <summary>
            LZW file header size (in bytes)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.LZW.LzwConstants.INIT_BITS">
            <summary>
            Initial number of bits per code
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see> separated by semi-colons ';'.
            To include a semi-colon it may be quoted as in \;. Each expression can be prefixed by a plus '+' sign or
            a minus '-' sign to denote the expression is intended to include or exclude names.
            If neither a plus or minus sign is found include is the default.
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
            <example>The following expression includes all name ending in '.dat' with the exception of 'dummy.dat'
            "+\.dat$;-^dummy\.dat$"
            </example>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="expression">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.SplitQuoted(System.String)">
            <summary>
            Split a string into its component pieces
            </summary>
            <param name="original">The original string</param>
            <returns>Returns an array of <see cref="T:System.String"/> values containing the individual filter elements.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="name">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OAlmacenXML">
            <summary>
            Clase OAlmacenXML
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OAlmacenXML._rutaFichero">
            <summary>
            Ruta del fichero xml.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OAlmacenXML.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.#ctor(System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OAlmacenXML.
            </summary>
            <param name="rutaFichero">Ruta del fichero de configuracion xml.</param>
        </member>
        <member name="F:Orbita.Utiles.OAlmacenXML.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.CargarDatos">
            <summary>
            Cargamos los datos del XML
            </summary>
            <returns>Objeto OAlmacenXML</returns>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.Guardar">
            <summary>
            Guardamos los datos en el XML
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OAlmacenXML.Clone">
            <summary>
            Clona el objeto OAlmacenXML.
            </summary>
            <returns>Objeto OAlmacenXML clonado.</returns>
        </member>
        <member name="T:Orbita.Utiles.OServicioWindows">
            <summary>
            OServicioWindows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.Nombre">
            <summary>
            Nombre del servicio
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.Ruta">
            <summary>
            Ruta del ejecutable
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.Maquina">
            <summary>
            Máquina donde se encuentra el servicio Windows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.TimeOutMilisegundos">
            <summary>
            TimeOut de espera hasta el inicio/paro
            del servicio Windows.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.Controlador">
            <summary>
            Controlador del servicio instalado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Constructor de la clase
            </summary>
            <param name="nombre">Nombre del servicio</param>
        </member>
        <member name="F:Orbita.Utiles.OServicioWindows.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Instalar">
            <summary>
            Instala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Desinstalar">
            <summary>
            Desinstala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Iniciar">
            <summary>
            Inicia el servicio
            </summary>
            <returns>Verdadero si se ha iniciado con éxtio</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Detener">
            <summary>
            Inicia el servicio
            </summary>
            <returns>Verdadero si se ha iniciado con éxtio</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.Instalar(System.Boolean)">
            <summary>
            Instala o desinstala el servicio
            </summary>
            <returns>Verdadero si el proceso ha finalizado con éxito</returns>
        </member>
        <member name="M:Orbita.Utiles.OServicioWindows.IsInstalled">
            <summary>
            Consulta si el servicio está instalado
            </summary>
            <returns></returns>
        </member>
        <member name="P:Orbita.Utiles.OServicioWindows.Instalado">
            <summary>
            Informa si existe algún servicio con el nombre especificado, en caso contrario se supone que el servicio no está instalado
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OServicioWindows.Estado">
            <summary>
            Estado del servicio
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OStringEnumerado">
            <summary>
            Clases para dotar de atributos a los tipos enumerados.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OStringEnumerado._tipo">
            <summary>
            Tipo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OStringEnumerado._valores">
            <summary>
            Valores.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.#ctor(System.Type)">
            <summary>
            Creates a new <see cref="T:Orbita.Utiles.OStringEnumerado"/> instance.
            </summary>
            <param name="tipo">Enum type.</param>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValorString(System.String)">
            <summary>
            Gets the string value associated with the given enum value.
            </summary>
            <param name="valor">Name of the enum value.</param>
            <returns>String Value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValoresString">
            <summary>
            Gets the string values associated with the enum.
            </summary>
            <returns>String value array</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetListaValores">
            <summary>
            Gets the values as a 'bindable' list datasource.
            </summary>
            <returns>IList for data binding</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.GetValorString(System.Enum)">
            <summary>
            Gets a string value for a particular enum value.
            </summary>
            <param name="valor">Value.</param>
            <returns>String Value associated via a <see cref="T:Orbita.Utiles.OAtributoEnumerado"/> attribute, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.Parse(System.Type,System.String)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value (case sensitive).
            </summary>
            <param name="tipo">Type.</param>
            <param name="valor">String value.</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.Parse(System.Type,System.String,System.Boolean)">
            <summary>
            Parses the supplied enum and string value to find an associated enum value.
            </summary>
            <param name="tipo">Type.</param>
            <param name="valor">String value.</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Enum value associated with the string value, or null if not found.</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.Type,System.String)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="tipo">Type of enum</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="M:Orbita.Utiles.OStringEnumerado.StringDefinido(System.Type,System.String,System.Boolean)">
            <summary>
            Return the existence of the given string value within the enum.
            </summary>
            <param name="valor">String value.</param>
            <param name="tipo">Type of enum</param>
            <param name="ignoreCase">Denotes whether to conduct a case-insensitive match on the supplied string value</param>
            <returns>Existence of the string value</returns>
        </member>
        <member name="P:Orbita.Utiles.OStringEnumerado.TipoEnumerado">
            <summary>
            Gets the underlying enum type for this instance.
            </summary>
            <value></value>
        </member>
        <member name="T:Orbita.Utiles.Tiempo">
            <summary>
            Enumeración que representa la sobrecarga del
            método de tiempo restante de la clase OTimer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Hora">
            <summary>
            Hora.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Minuto">
            <summary>
            Minuto.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Segundo">
            <summary>
            Segundo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Tiempo.Milisegundo">
            <summary>
            Milisegundo.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Extension">
            <summary>
            Enumeración que representa las posibles 
            extensiones que puede tener un fichero.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Extension.Xml">
            <summary>
            Extensión .XML.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Extension.Jpg">
            <summary>
            Extensión .JPG.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Accion">
            <summary>
            Enumeración que representa las acciones
            propias correspondientes a hilos.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Inicializado">
            <summary>
            Hilo inicializado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Iniciado">
            <summary>
            Hilo iniciado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Suspendido">
            <summary>
            Hilo suspendido.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Reanudado">
            <summary>
            Hilo reanudado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.Terminado">
            <summary>
            Hilo terminado.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Accion.EnEspera">
            <summary>
            Join.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OEventArgs">
            <summary>
            Clase que representa eventos con argumentos
            adicionales tipados (EventArgs).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OEventArgs._arg">
            <summary>
            Argumento adicional desarrollado en el evento.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEventArgs.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgs.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEventArgs.#ctor(System.Object)">
            <summary>
            Inicializar una nueva instancia de la clase OEventArgs.
            </summary>
            <param name="arg">Argumento adicional.</param>
        </member>
        <member name="P:Orbita.Utiles.OEventArgs.Argumento">
            <summary>
            Argumento adicional desarrollado en el evento.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OComm">
            <summary>
            Gestión de comunicaciones
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OComm.GetDisponibilidadPuerto(System.Int32)">
            <summary>
            Obtener la disponibilidad de un puerto.
            </summary>
            <param name="puerto">Número de puerto.</param>
            <returns>Si es no disponible.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.Clone">
            <summary>
            Create a new <see cref="T:Orbita.Utiles.Compresion.Tar.TarHeader"/> that is a copy of the current instance.
            </summary>
            <returns>A new <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:Orbita.Utiles.Compresion.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outBuffer">output buffer for header information</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buffer">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buffer"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buffer">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buffer">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">
            the value to be converted to octal
            </param>
            <param name = "buffer">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "value">Value to be convert to octal</param>
            <param name = "buffer">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "value"></param>
            <param name = "buffer">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buffer">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.InvalidHeaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="information"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
            <param name="message">Message describing the exception cause.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.InvalidHeaderException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of InvalidHeaderException
            </summary>
            <param name="message">Message describing the problem.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">A byte offset relative to the <paramref name="origin"/> parameter.</param>
            <param name="origin">A value of type <see cref="T:System.IO.SeekOrigin"/> indicating the reference point used to obtain the new position.</param>
            <returns>The new position of the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <param name="value">The new length for the stream.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer to source data from.</param>
            <param name="offset">The offset to start obtaining data from.</param>
            <param name="count">The number of bytes of data to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="buffer">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:Orbita.Utiles.OSeguridad">
            <summary>
            Clase OSeguridad.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad._servidor">
            <summary>
            Nombre del servidor.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad._usuario">
            <summary>
            Usuario del servidor.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad._password">
            <summary>
            Contraseña del servidor.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad._impersonalizacionWindows">
            <summary>
            Contexto de impersonalización.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad._identidadWindows">
            <summary>
            Identidad Windows.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.LogonUser(System.String,System.String,System.String,System.Int32,System.Int32,System.IntPtr@)">
            <summary>
            Métodos externos de login.
            </summary>
            <param name="lpszUsuario">Usuario.</param>
            <param name="lpszDominio">Dominio.</param>
            <param name="lpszPassword">Contraseña.</param>
            <param name="dwLogonType">Tipo de login.</param>
            <param name="dwLogonProvider">Proveedor.</param>
            <param name="phToken"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OSeguridad.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.#ctor(System.String,System.String,System.String)">
            <summary>
            Inicializar una nueva instancia de la clase OSeguridad.
            </summary>
            <param name="servidor">Nombre del servidor.</param>
            <param name="usuario">Usuario de autenticación.</param>
            <param name="password">Password de autenticación.</param>
        </member>
        <member name="F:Orbita.Utiles.OSeguridad.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Abrir">
            <summary>
            Establecer la apertura de la impersonalización.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Cerrar">
            <summary>
            Cerrar la impersonalización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OSeguridad.Impersonalizar">
            <summary>
            Impersonalizar el acceso al host.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OEncriptacion">
            <summary>
            Clase que permite la encriptación y desencriptación de textos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, no initialization vector, electronic codebook
            (ECB) mode, SHA-1 hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <remarks>
            This constructor is not recommended because it does not use
            initialization vector and uses the ECB cipher mode, which is less
            secure than the CBC mode.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm, and 4-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1 
            hashing algorithm, and 0-to-8 byte long salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with 256-bit key, derived using 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, SHA-1
            hashing algorithm. Use the minSaltLen and maxSaltLen parameters to
            specify the size of randomly generated salt.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration,
            hashing without salt, cipher block chaining (CBC) mode, and
            SHA-1 hashing algorithm.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be 
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, hashing 
            without salt, and cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption using the key derived from 1 password iteration, and
            cipher block chaining (CBC) mode.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key.
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.#ctor(System.String,System.String,System.Int32,System.Int32,System.Int32,System.String,System.String,System.Int32)">
            <summary>
            Use this constructor if you are planning to perform encryption/
            decryption with the key derived from the explicitly specified
            parameters.
            </summary>
            <param name="passPhrase">
            Passphrase from which a pseudo-random password will be derived.
            The derived password will be used to generate the encryption key
            Passphrase can be any string. In this example we assume that the
            passphrase is an ASCII string. Passphrase value must be kept in
            secret.
            </param>
            <param name="initVector">
            Initialization vector (IV). This value is required to encrypt the
            first block of plaintext data. For RijndaelManaged class IV must be
            exactly 16 ASCII characters long. IV value does not have to be kept
            in secret.
            </param>
            <param name="minSaltLen">
            Min size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is less than 4, the default min value will be used (currently 4
            bytes).
            </param>
            <param name="maxSaltLen">
            Max size (in bytes) of randomly generated salt which will be added at
            the beginning of plain text before encryption is performed. When this
            value is negative or greater than 255, the default max value will be
            used (currently 8 bytes). If max value is 0 (zero) or if it is smaller
            than the specified min value (which can be adjusted to default value),
            salt will not be used and plain text value will be encrypted as is.
            In this case, salt will not be processed during decryption either.
            </param>
            <param name="keySize">
            Size of symmetric key (in bits): 128, 192, or 256.
            </param>
            <param name="hashAlgorithm">
            Hashing algorithm: "MD5" or "SHA1". SHA1 is recommended.
            </param>
            <param name="saltValue">
            Salt value used for password hashing during key generation. This is
            not the same as the salt we will use during encryption. This parameter
            can be any string.
            </param>
            <param name="passwordIterations">
            Number of iterations used to hash password. More iterations are
            considered more secure but may take longer.
            </param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Encrypt(System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Encrypt(System.Byte[])">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptToBytes(System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptToBytes(System.Byte[])">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptFile(System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Encrypt(System.String,System.String)">
            <summary>
            Encrypts a string value generating a base64-encoded string.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Encrypt(System.Byte[],System.String)">
            <summary>
            Encrypts a byte array generating a base64-encoded string.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a base64-encoded string.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptToBytes(System.String,System.String)">
            <summary>
            Encrypts a string value generating a byte array of cipher text.
            </summary>
            <param name="plainText">
            Plain text string to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptToBytes(System.Byte[],System.String)">
            <summary>
            Encrypts a byte array generating a byte array of cipher text.
            </summary>
            <param name="plainTextBytes">
            Plain text bytes to be encrypted.
            </param>
            <returns>
            Cipher text formatted as a byte array.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.EncryptFile(System.String,System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Decrypt(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Decrypt(System.Byte[])">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptToBytes(System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptToBytes(System.Byte[])">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptFile(System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptFileToBytes(System.String)">
            <summary>
            Desencripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Decrypt(System.String,System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value generating a string result.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.Decrypt(System.Byte[],System.String)">
            <summary>
            Decrypts a byte array containing cipher text value and generates a
            string result.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Decrypted string value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptToBytes(System.String,System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherText">
            Base64-encoded cipher text string to be decrypted.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptToBytes(System.Byte[],System.String)">
            <summary>
            Decrypts a base64-encoded cipher text value and generates a byte array
            of plain text data.
            </summary>
            <param name="cipherTextBytes">
            Byte array containing encrypted data.
            </param>
            <returns>
            Byte array containing decrypted value.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptFile(System.String,System.String,System.String)">
            <summary>
            Encripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.DecryptFileToBytes(System.String,System.String)">
            <summary>
            Desencripta el fichero pasado
            </summary>
            <param name="inputFile"></param>
            <param name="outputFile"></param>
            <param name="key"></param>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.AddSalt(System.Byte[])">
            <summary>
            Adds an array of randomly generated bytes at the beginning of the
            array holding original plain text value.
            </summary>
            <param name="plainTextBytes">
            Byte array containing original plain text value.
            </param>
            <returns>
            Either original array of plain text bytes (if salt is not used) or a
            modified array containing a randomly generated salt added at the 
            beginning of the plain text bytes. 
            </returns>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.GenerateSalt">
            <summary>
            Generates an array holding cryptographically strong bytes.
            </summary>
            <returns>
            Array of randomly generated bytes.
            </returns>
            <remarks>
            Salt size will be defined at random or exactly as specified by the
            minSlatLen and maxSaltLen parameters passed to the object constructor.
            The first four bytes of the salt array will contain the salt length
            split into four two-bit pieces.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.OEncriptacion.GenerateRandomNumber(System.Int32,System.Int32)">
            <summary>
            Generates random integer.
            </summary>
            <param name="minValue">
            Min value (inclusive).
            </param>
            <param name="maxValue">
            Max value (inclusive).
            </param>
            <returns>
            Random integer value between the min and max values (inclusive).
            </returns>
            <remarks>
            This methods overcomes the limitations of .NET Framework's Random
            class, which - when initialized multiple times within a very short
            period of time - can generate the same "random" number.
            </remarks>
        </member>
        <member name="T:Orbita.Utiles.OCifrado">
            <summary>
            Clase estática para encriptar y desencriptar textos con la clave y el vector de incio de la librería.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.ObtenerContraseñaLibreria">
            <summary>
            Clave de la librería para encriptar y desencriptar.
            Está puesto como método porque si se pone como atributo o propiedad, a pesar de estar ofuscado, se desemambla y se obtiene su valor.
            Además, si se devuelve directamente el string, también se desensambla y se obtiene su valor
            ¡No se debe modificar nunca!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.ObtenerVectorInicioLibreria">
            <summary>
            Vector de inicio de la librería para encriptar y desencriptar.
            Está puesto como método porque si se pone como atributo o propiedad, a pesar de estar ofuscado, se desemambla y se obtiene su valor.
            Además, si se devuelve directamente el string, también se desensambla y se obtiene su valor
            ¡No se debe modificar nunca!
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.EncriptarTexto(System.String)">
            <summary>
            Encripta un texto con la contraseña y el vector de incio de la librería
            </summary>
            <param name="textoPlano">Texto a encriptar</param>
            <returns>Texto encriptado</returns>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.EncriptarTexto(System.String,System.String,System.String)">
            <summary>
            Realiza una encriptación personalizada con la contraseña y el vector de incio pasados por argumento
            </summary>
            <param name="textoPlano">Texto a encriptar</param>
            <param name="clave">Clave para la encriptación</param>
            <param name="vectorInicio">Vector de incio para la encriptación. Debe ser una cadena ASCII de 16 bytes de longitud</param>
            <returns>El texto encriptado</returns>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.DesencriptarTexto(System.String)">
            <summary>
            Desencripta un texto con la contraseña y el vector de incio de la librería
            </summary>
            <param name="plainText">Texto a desencriptar</param>
            <returns>Texto desencriptado</returns>
        </member>
        <member name="M:Orbita.Utiles.OCifrado.DesencriptarTexto(System.String,System.String,System.String)">
            <summary>
            Realiza una desencriptación personalizada con la contraseña y el vector de incio pasados por argumento
            </summary>
            <param name="textoCifrado">Texto a desencriptar</param>
            <param name="clave">Clave para la desencriptación</param>
            <param name="vectorInicio">Vector de incio para la desencriptación. Debe ser una cadena ASCII de 16 bytes de longitud</param>
            <returns>El texto desencriptado</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next sequence of bits but don't increase input pointer.  bitCount must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <param name="bitCount">The number of bits to peek.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
            <param name="bitCount">The number of bits to drop.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)"/> followed by <see cref="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)"/>, except for correct error handling.
            </summary>
            <param name="bitCount">The number of bits to retrieve.</param>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            Resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buffer">data to be input</param>
            <param name="offset">offset of first byte of input</param>
            <param name="count">number of bytes of input to add.</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 blocks per record.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
            <returns>The record size in bytes.
            This is equal to the <see cref="P:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockSize"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
            <returns>The block factor; the number of blocks per record.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarBuffer"/> suitable for input.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarBuffer"/> suitable for output.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.IsEndOfArchiveBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates the End of an Archive has been reached.
            End of archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
            <returns>Returns true if the block is an EOF block; false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buffer">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buffer.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.WriteFinalRecord">
            <summary>
            WriteFinalRecord writes the current record buffer to output any unwritten data is present.
            </summary>
            <remarks>Any trailing bytes are set to zero which is by definition correct behaviour
            for the end of a tar stream.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
            <value>The record size in bytes.
            This is equal to the <see cref="P:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockFactor"/> multiplied by the <see cref="F:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockSize"/></value>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
            <value>This is the number of blocks in each record.</value>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarBuffer.CurrentBlock">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <remarks>Block numbers are zero based values</remarks>
            <seealso cref="P:Orbita.Utiles.Compresion.Tar.TarBuffer.RecordSize"/>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarBuffer.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.Tar.TarBuffer.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarBuffer.CurrentRecord">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="T:Orbita.Utiles.OPriorityQueue`1">
            <summary>
            Implementación de una cola con prioridad de encolamiento.
            La prioridad está definida mediante un número entero.
            Cuanto más bajo sea el valor más prioridad tendrá.
            </summary>
            <typeparam name="TValue">Tipos de valores a almacenar en la cola</typeparam>
        </member>
        <member name="T:Orbita.Utiles.OPriorityQueue`2">
            <summary>
            Implementación de una cola con prioridad de encolamiento.
            Cuanto más bajo sea el valor de prioridad más prioridad tendrá.
            </summary>
            <typeparam name="TValue">Tipos de valores a almacenar en la cola</typeparam>
            <typeparam name="TPriority">Tipo de dato de la prioridad</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OPriorityQueue`2.storage">
            <summary>
            Diccionario ordenado de colas interno
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Dequeue">
            <summary>
            Desencolar
            </summary>
            <returns>Valor desencolado</returns>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Peek">
            <summary>
            Obtener el primer valor de la cola sin desencolar
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Enqueue(`0)">
            <summary>
            Encolar con prioridad
            </summary>
            <param name="item">Valor a encolar</param>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Enqueue(`0,`1)">
            <summary>
            Encolar con prioridad
            </summary>
            <param name="item">Valor a encolar</param>
            <param name="priority">prioridad de encolamiento</param>
        </member>
        <member name="M:Orbita.Utiles.OPriorityQueue`2.Clear">
            <summary>
            Quita todos los objetos de la colección.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OPriorityQueue`2.Count">
            <summary>
            Número de elementos de la cola
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OPriorityQueue`2.Empty">
            <summary>
            Indica que la cola está vacía
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OMath">
            <summary>
            Clase estática con métodos matemáticos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMath.DegreeToRadian(System.Double)">
            <summary>
            Convierte un ángulo de grados a radianes
            </summary>
            <param name="angle">Ángulo en grados</param>
            <returns>Ángulo en radianes</returns>
        </member>
        <member name="M:Orbita.Utiles.OMath.RadianToDegree(System.Double)">
            <summary>
            Convierte un ángulo de radianes a grados
            </summary>
            <param name="angle">Ángulo en radianes</param>
            <returns>Ángulo en grados</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ITaggedData">
            <summary>
            ExtraData tagged value interface.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ITaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the contents of this instance from the data passed.
            </summary>
            <param name="data">The data to extract contents from.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ITaggedData.GetData">
            <summary>
            Get the data representing this instance.
            </summary>
            <returns>Returns the data for this instance.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ITaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.RawTaggedData">
            <summary>
            A raw binary tagged value
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.RawTaggedData.#ctor(System.Int16)">
            <summary>
            Initialise a new instance.
            </summary>
            <param name="tag">The tag ID.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.RawTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="offset">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.RawTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.RawTaggedData._tag">
            <summary>
            The tag ID for this instance.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.RawTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.RawTaggedData.Data">
            <summary>
            Get /set the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ExtendedUnixData">
            <summary>
            Class representing extended unix date time values.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> value to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>The standard Unix time is a signed integer data type, directly encoding the Unix time number,
            which is the number of seconds since 1970-01-01.
            Being 32 bits means the values here cover a range of about 136 years.
            The minimum representable time is 1901-12-13 20:45:52,
            and the maximum representable time is 2038-01-19 03:14:07.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.TagID">
            <summary>
            Get the ID
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.ModificationTime">
            <summary>
            Get /set the Modification Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.AccessTime">
            <summary>
            Get / set the Access Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.CreateTime">
            <summary>
            Get / Set the Create Time
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.IsValidValue(System.DateTime)"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Include">
            <summary>
            Get/set the <see cref="T:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Flags">values</see> to include.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Flags">
            <summary>
            Flags indicate which values are included in this instance.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Flags.ModificationTime">
            <summary>
            The modification time is included
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Flags.AccessTime">
            <summary>
            The access time is included
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ExtendedUnixData.Flags.CreateTime">
            <summary>
            The create time is included.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.NTTaggedData">
            <summary>
            Class handling NT date time values.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.NTTaggedData.SetData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set the data from the raw values provided.
            </summary>
            <param name="data">The raw data to extract values from.</param>
            <param name="index">The index to start extracting values from.</param>
            <param name="count">The number of bytes available.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.NTTaggedData.GetData">
            <summary>
            Get the binary data representing this instance.
            </summary>
            <returns>The raw binary data representing this instance.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.NTTaggedData.IsValidValue(System.DateTime)">
            <summary>
            Test a <see cref="T:System.DateTime"> valuie to see if is valid and can be represented here.</see>
            </summary>
            <param name="value">The <see cref="T:System.DateTime">value</see> to test.</param>
            <returns>Returns true if the value is valid and can be represented; false if not.</returns>
            <remarks>
            NTFS filetimes are 64-bit unsigned integers, stored in Intel
            (least significant byte first) byte order. They determine the
            number of 1.0E-07 seconds (1/10th microseconds!) past WinNT "epoch",
            which is "01-Jan-1601 00:00:00 UTC". 28 May 60056 is the upper limit
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.NTTaggedData.TagID">
            <summary>
            Get the ID for this tagged data value.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.NTTaggedData.LastModificationTime">
            <summary>
            Get/set the <see cref="T:System.DateTime">last modification time</see>.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.NTTaggedData.CreateTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">create time</see>
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.NTTaggedData.LastAccessTime">
            <summary>
            Get /set the <see cref="T:System.DateTime">last access time</see>.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ITaggedDataFactory">
            <summary>
            A factory that creates <see cref="T:Orbita.Utiles.Compresion.Zip.ITaggedData">tagged data</see> instances.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ITaggedDataFactory.Create(System.Int16,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Get data for a specific tag value.
            </summary>
            <param name="tag">The tag ID to find.</param>
            <param name="data">The data to search.</param>
            <param name="offset">The offset to begin extracting data from.</param>
            <param name="count">The number of bytes to extract.</param>
            <returns>The located <see cref="T:Orbita.Utiles.Compresion.Zip.ITaggedData">value found</see>, or null if not found.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipExtraData">
            
            <summary>
            A class to handle the extra data field for Zip entries
            </summary>
            <remarks>
            Extra data contains 0 or more values each prefixed by a header tag and length.
            They contain zero or more bytes of actual data.
            The data is held internally using a copy on write strategy.  This is more efficient but
            means that for extra data created by passing in data can have the values modified by the caller
            in some circumstances.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.#ctor">
            <summary>
            Initialise a default instance.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.#ctor(System.Byte[])">
            <summary>
            Initialise with known extra data.
            </summary>
            <param name="data">The extra data.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.GetEntryData">
            <summary>
            Get the raw extra data value
            </summary>
            <returns>Returns the raw byte[] extra data this instance represents.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Clear">
            <summary>
            Clear the stored data.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.GetStreamForTag(System.Int32)">
            <summary>
            Get a read-only <see cref="T:System.IO.Stream"/> for the associated tag.
            </summary>
            <param name="tag">The tag to locate data for.</param>
            <returns>Returns a <see cref="T:System.IO.Stream"/> containing tag data or null if no tag was found.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.GetData(System.Int16)">
            <summary>
            Get the <see cref="T:Orbita.Utiles.Compresion.Zip.ITaggedData">tagged data</see> for a tag.
            </summary>
            <param name="tag">The tag to search for.</param>
            <returns>Returns a <see cref="T:Orbita.Utiles.Compresion.Zip.ITaggedData">tagged value</see> or null if none found.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)">
            <summary>
            Find an extra data value
            </summary>
            <param name="headerID">The identifier for the value to find.</param>
            <returns>Returns true if the value was found; false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddEntry(Orbita.Utiles.Compresion.Zip.ITaggedData)">
            <summary>
            Add a new entry to extra data.
            </summary>
            <param name="taggedData">The <see cref="T:Orbita.Utiles.Compresion.Zip.ITaggedData"/> value to add.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddEntry(System.Int32,System.Byte[])">
            <summary>
            Add a new entry to extra data
            </summary>
            <param name="headerID">The ID for this entry.</param>
            <param name="fieldData">The data to add.</param>
            <remarks>If the ID already exists its contents are replaced.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry">
            <summary>
            Start adding a new entry.
            </summary>
            <remarks>Add data using <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddData(System.Byte[])"/>, <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeShort(System.Int32)"/>, <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeInt(System.Int32)"/>, or <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeLong(System.Int64)"/>.
            The new entry is completed and actually added by calling <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddNewEntry(System.Int32)"/></remarks>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddEntry(Orbita.Utiles.Compresion.Zip.ITaggedData)"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddNewEntry(System.Int32)">
            <summary>
            Add entry data added since <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/> using the ID passed.
            </summary>
            <param name="headerID">The identifier to use for this entry.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddData(System.Byte)">
            <summary>
            Add a byte of data to the pending new entry.
            </summary>
            <param name="data">The byte to add.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddData(System.Byte[])">
            <summary>
            Add data to a pending new entry.
            </summary>
            <param name="data">The data to add.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeShort(System.Int32)">
            <summary>
            Add a short value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeInt(System.Int32)">
            <summary>
            Add an integer value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.AddLeLong(System.Int64)">
            <summary>
            Add a long value in little endian order to the pending new entry.
            </summary>
            <param name="toAdd">The data to add.</param>
            <seealso cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.StartNewEntry"/>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Delete(System.Int32)">
            <summary>
            Delete an extra data field.
            </summary>
            <param name="headerID">The identifier of the field to delete.</param>
            <returns>Returns true if the field was found and deleted.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadLong">
            <summary>
            Read a long in little endian form from the last <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)">found</see> data value
            </summary>
            <returns>Returns the long value read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadInt">
            <summary>
            Read an integer in little endian form from the last <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the integer read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadShort">
            <summary>
            Read a short value in little endian form from the last <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)">found</see> data value.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadByte">
            <summary>
            Read a byte from an extra data
            </summary>
            <returns>The byte value read or -1 if the end of data has been reached.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Skip(System.Int32)">
            <summary>
            Skip data during reading.
            </summary>
            <param name="amount">The number of bytes to skip.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadShortInternal">
            <summary>
            Internal form of <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadShort"/> that reads data at any location.
            </summary>
            <returns>Returns the short value read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Dispose">
            <summary>
            Dispose of this instance.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipExtraData.Length">
            <summary>
            Gets the current extra data length.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipExtraData.ValueLength">
            <summary>
            Get the length of the last value found by <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)"/>
            </summary>
            <remarks>This is only valid if <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipExtraData.CurrentReadIndex">
            <summary>
            Get the index for the current read value.
            </summary>
            <remarks>This is only valid if <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.Find(System.Int32)"/> has previously returned true.
            Initially the result will be the index of the first byte of actual data.  The value is updated after calls to
            <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadInt"/>, <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadShort"/> and <see cref="M:Orbita.Utiles.Compresion.Zip.ZipExtraData.ReadLong"/>. </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipExtraData.UnreadCount">
            <summary>
            Get the number of bytes remaining to be read for the current value;
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of Deflate and SetInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.#ctor(Orbita.Utiles.Compresion.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>
            <param name="blTreeCodes">The number/rank of treecodes to send.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="literal">Literal value to add to buffer.</param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="distance">Distance code</param>
            <param name="length">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that all frequencies are zero
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="staticCodes">new codes</param>
            <param name="staticLengths">length for new codes</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Scan a literal or distance tree to determine the frequencies of the codes
            in the bit length tree.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree.WriteTree(Orbita.Utiles.Compresion.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            <see cref="P:Orbita.Utiles.Compresion.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/>.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuffer">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.#ctor(Orbita.Utiles.Compresion.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name">name</paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>Returns the newly created <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name="fileName">The file name that the entry represents.</param>
            <returns>Returns the newly created <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current Object.</param>
            <returns>
            True if the entries are equal; false if not.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.GetHashCode">
            <summary>
            Derive a Hash value for the current <see cref="T:System.Object"/>
            </summary>
            <returns>A Hash code for the current <see cref="T:System.Object"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.IsDescendent(Orbita.Utiles.Compresion.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "toTest">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.GetFileTarHeader(Orbita.Utiles.Compresion.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outBuffer">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="buffer">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarEntry.NameTarHeader(Orbita.Utiles.Compresion.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="header">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.GZip.GZipException"></see>.
            </summary>
            <param name="message">A <see cref="T:System.String"/> that describes the error.</param>
            <param name="innerException">The <see cref="T:System.Exception"/> that caused this exception.</param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.InflaterDynHeader.mode">
            <summary>
            The current decode mode
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipConstants.#ctor">
            <summary>
            Initialise default instance.
            </summary>
            <remarks>Constructor is private to prevent instances being created.</remarks>
        </member>
        <member name="T:Orbita.Utiles.OCola">
            <summary>
            Queue .NET.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCola._cola">
            <summary>
            Colección definida, cola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OCola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objecto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.OCola.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Limpiar">
            <summary>
            Método de borrado total de la cola.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCola.Existe(System.Object)">
            <summary>
            Método de comprobación de aparición del objeto en la cola.
            </summary>
            <param name="identificador">Idenficador del objeto encolado.</param>
            <returns>La existencia o no del objeto.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Contar">
            <summary>
            Método contador de elementos de la cola.
            </summary>
            <returns>Número de elementos de la cola.</returns>
        </member>
        <member name="M:Orbita.Utiles.OCola.Primero">
            <summary>
            Método que obtiene sin borrarlo el primer
            elemento de la cola.
            </summary>
            <returns>El primer elemento de la cola.</returns>
        </member>
        <member name="P:Orbita.Utiles.OCola.Cola">
            <summary>
            Colección definida, cola.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OXml">
            <summary>
            Clase Xml de Orbita.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OXml.m_swXml">
            <summary>
            Variable escrita en el Xml.
            NOTA: EL SIGUIENTE COMENTARIO SE HA MOVIDO DE OTRA UBICACIÓN, PERO CREO QUE SE REFIERE A ESTE ATRIBUTO (Vnicolau, 07/02/2011)
            Este atributo indica 'QUE VARIABLES' se van a escribir en Base de datos,
            es decir, contiene cada uno de los registros que se van a insertar.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OXml.m_escritorXml">
            <summary>
            Variable para escribir el XML
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OXml.#ctor">
            <summary>
            Constructor de la clase.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OXml.AbrirEtiqueta(System.String)">
            <summary>
            Para abrir una nueva etiqueta del Xml
            </summary>
            <param name="etiqueta"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String)">
            <summary>
            Funcion para añadir una propiedad tipo string.
            </summary>
            <param name="etiqueta"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Object)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo object.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Int32)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo int.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Boolean)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo bool.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.DBNull)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo null.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.DateTime)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo datetime.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.AddFechaUniversal(System.String,System.DateTime)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo datetime.
            En el SQLServer se ha de utilizar la instrucción "convert(fecha, 126)"
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Int16)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo short.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Double)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo double.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.Decimal)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo decimal.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.String)">
            <summary>
            Funcion para añadir un campo tipo pasandole un balor tipo string.
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.Add(System.String,System.TimeSpan)">
            <summary>
            Funcion para añadir un campo tipo pasandole un valor tipo timespan.
            En el SQLServer se ha de utilizar un float puesto que se indica en milisegundos
            </summary>
            <param name="etiqueta"></param>
            <param name="valor"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.AddNull(System.String)">
            <summary>
            Funcion para añadir un campo tipo pasandole un valor tipo string
            </summary>
            <param name="etiqueta"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.CerrarEtiqueta">
            <summary>
            Función para cerrar la etiqueta abierta.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OXml.AbrirDocumento">
            <summary>
            Función para abrir el documento.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OXml.AbrirDocumento(System.String)">
            <summary>
            Función para abrir el documento incluyendole una etiqueta inicial.
            </summary>
            <param name="etiqueta"></param>
        </member>
        <member name="M:Orbita.Utiles.OXml.CerrarDocumento">
            <summary>
            Función para cerrar el documento abierto.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OXml.LeerXml">
            <summary>
            Función para leer el documento almacenado. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OXml.Dispose">
            <summary>
            Elimina los recursos utilizados
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OXml.SWXml">
            <summary>
            Propiedad para acceder al Stringwriter.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OXml.EscritorXml">
            <summary>
            Propiedad para acceder al XmlTextWriter.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.EncontrarProceso(System.String,System.String)">
            <summary>
            Mata determinado proceso
            </summary>
            <param name="nombre">Nombre del proceso</param>
            <returns>Verdadero si el proceso ha sido matado</returns>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.MatarProceso(System.String,System.String)">
            <summary>
            Mata determinado proceso
            </summary>
            <param name="nombre">Nombre del proceso</param>
            <returns>Verdadero si el proceso ha sido matado</returns>
        </member>
        <member name="M:Orbita.Utiles.OProcesos.IniciarProceso(System.String)">
            <summary>
            Inicia una aplicación
            </summary>
            <param name="ruta">Ruta del ejecutable</param>
            <returns>Verdadero si la aplicación se ha ejecutado con éxito</returns>
        </member>
        <member name="T:Orbita.Utiles.OMensajes">
            <summary>
            Clase OMensajes.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OMensajes.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.ObtenerDetalle(System.Exception)">
            <summary>
            Obtiene el detalle del error en la clase OMensajesDetalle.
            </summary>
            <param name="ex">Excepción.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.String)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.Exception)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="ex">Excepción.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarError(System.String,System.Exception)">
            <summary>
            Muestra mensaje de error.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="ex">Excepción</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAviso(System.String)">
            <summary>
            Muestra mensaje de aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarInfo(System.String)">
            <summary>
            Mostrar mensaje informativo.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.Mostrar(System.String,Orbita.Utiles.OTipoMensaje)">
            <summary>
            Mostrar mensaje genérico
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="tipoMensaje">Tipo de mensaje a mostrar.</param>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNo(System.String)">
            <summary>
            Mostrar pregunta.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNo(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar pregunta.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNoCancelar(System.String)">
            <summary>
            Mostrar pregunta con cancelar.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarPreguntaSiNoCancelar(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar pregunta con cancelar.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAvisoSiNo(System.String)">
            <summary>
            Mostrar aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OMensajes.MostrarAvisoSiNo(System.String,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Mostrar aviso.
            </summary>
            <param name="mensaje">Texto del mensaje.</param>
            <param name="botonDefecto">Botón por defecto.</param>
            <returns></returns>
        </member>
        <member name="T:Orbita.Utiles.OTipoMensaje">
            <summary>
            Enumerado que describe el tipo de mensaje a mostrar
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipException">
            <summary>
            Represents exception conditions specific to Zip archive handling
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipException.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of ZipException.
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
            <param name="offset">The offset relative to the <paramref name="origin"/> to seek to</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to seek from.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <param name="buffer">The buffer to store read bytes in.</param>
            <param name="offset">The index into the buffer to being storing bytes at.</param>
            <param name="count">The desired number of bytes to read.</param>
            <returns>The total number of bytes read, or zero if at the end of the stream.
            The number of bytes may be less than the <paramref name="count">count</paramref>
            requested if data is not avialable.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF block of nulls is written.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            </summary>
            <remarks>This means that Finish() is called followed by calling the
            TarBuffer's Close().</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.PutNextEntry(Orbita.Utiles.Compresion.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="value">
            The byte to be written.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "buffer">
            The buffer to write to the archive.
            </param>
            <param name = "offset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "count">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.WriteEofBlock">
            <summary>
            Write an EOF (end of archive) block to the tar archive.
            An EOF block consists of all zeros.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.assemblyBufferLength">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.isClosed">
            <summary>
            Flag indicating wether this instance has been closed or not.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.blockBuffer">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.assemblyBuffer">
            <summary>
            'Assembly' buffer used to assemble data before writing
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.Tar.TarOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarOutputStream.IsEntryOpen">
            <summary>
            Get a value indicating wether an entry is open, requiring more data to be written.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.PathFilter">
            <summary>
            PathFilter filters directories and files using a form of <see cref="T:System.Text.RegularExpressions.Regex">regular expressions</see>
            by full path name.
            See <see cref="T:Orbita.Utiles.Compresion.Core.NameFilter">NameFilter</see> for more detail on filtering.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:Orbita.Utiles.Compresion.Core.NameFilter">filter</see> expression to apply.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
            <remarks><see cref="M:System.IO.Path.GetFullPath(System.String)"/> is used to get the full path before matching.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.ExtendedPathFilter">
            <summary>
            ExtendedPathFilter filters based on name, file size, and the last write time of the file.
            </summary>
            <remarks>Provides an example of how to customise filtering.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.#ctor(System.String,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.#ctor(System.String,System.Int64,System.Int64,System.DateTime,System.DateTime)">
            <summary>
            Initialise a new instance of ExtendedPathFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
            <param name="minDate">The minimum <see cref="T:System.DateTime"/> to include.</param>
            <param name="maxDate">The maximum <see cref="T:System.DateTime"/> to include.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
            <exception cref="T:System.IO.FileNotFoundException">The <see paramref="fileName"/> doesnt exist</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MinSize">
            <summary>
            Get/set the minimum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is zero.</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero; greater than <see cref="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MaxSize"/></exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MaxSize">
            <summary>
            Get/set the maximum size/length for a file that will match this filter.
            </summary>
            <remarks>The default value is <see cref="F:System.Int64.MaxValue"/></remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">value is less than zero or less than <see cref="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MinSize"/></exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MinDate">
            <summary>
            Get/set the minimum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time less than this value are excluded by the filter.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.ExtendedPathFilter.MaxDate">
            <summary>
            Get/set the maximum <see cref="T:System.DateTime"/> value that will match for this filter.
            </summary>
            <remarks>Files with a LastWrite time greater than this value are excluded by the filter.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.NameAndSizeFilter">
            <summary>
            NameAndSizeFilter filters based on name and file size.
            </summary>
            <remarks>A sample showing how filters might be extended.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="name">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.NameAndSizeFilter.MinSize">
            <summary>
            Get/set the minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Core.NameAndSizeFilter.MaxSize">
            <summary>
            Get/set the maximum size for a file that will match this filter.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipInputStream">
             <summary>
             This is an InflaterInputStream that reads the files baseInputStream an zip archive
             one after another.  It has a special method to get the zip entry of
             the next file.  The zip entry contains information about the file name
             size, compressed size, Crc, etc.
             It includes support for Stored and Deflated entries.
             <br/>
             <br/>Author of the original java version : Jochen Hoenicke
             </summary>
             
             <example> This sample shows how to read a zip file
             <code lang="C#">
             using System;
             using System.Text;
             using System.IO;
             
             using Orbita.Utiles.Compresion.Zip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		using ( ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]))) {
            
             			ZipEntry theEntry;
             			const int size = 2048;
             			byte[] data = new byte[2048];
             			
             			while ((theEntry = s.GetNextEntry()) != null) {
                             if ( entry.IsFile ) {
             				    Console.Write("Show contents (y/n) ?");
             				    if (Console.ReadLine() == "y") {
             				    	while (true) {
             				    		size = s.Read(data, 0, data.Length);
             				    		if (size > 0) {
             				    			Console.Write(new ASCIIEncoding().GetString(data, 0, size));
             				    		} else {
             				    			break;
             				    		}
             				    	}
             				    }
             				}
             			}
             		}
             	}
             }
             </code>
             </example>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
            <param name="baseInputStream">The underlying <see cref="T:System.IO.Stream"/> providing data.</param>
            <param name="bufferSize">Size of the buffer.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid,
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.ReadDataDescriptor">
            <summary>
            Read data descriptor at the end of compressed data. 
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.CompleteCloseEntry(System.Boolean)">
            <summary>
            Complete cleanup as the final part of closing.
            </summary>
            <param name="testCrc">True if the crc value should be tested</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.ReadingNotAvailable(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read by throwing an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="destination">The destination array to store data in.</param>
            <param name="offset">The offset at which data read should be stored.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.ReadingNotSupported(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Handle attempts to read from this entry by throwing an exception
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.InitialRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Perform the initial read on an entry which may include 
            reading encryption headers and setting up inflation.
            </summary>
            <param name="destination">The destination to fill with data read.</param>
            <param name="offset">The offset to start reading at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="buffer">The destination for the bytes.</param>
            <param name="offset">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
            <value>A password for all encrypted <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry">entries </see> in this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipInputStream"/></value>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if there is a current entry and it can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipInputStream.Length">
            <summary>
            Returns the current size that can be read from the current entry if available
            </summary>
            <exception cref="T:Orbita.Utiles.Compresion.Zip.ZipException">Thrown if the entry size is not known.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if no entry is currently available.</exception>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipInputStream.ReadDataHandler">
            <summary>
            Delegate for reading bytes from a stream. 
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip">
            <summary>
            FastZipEvents supports all events applicable to operations.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.Progress">
            <summary>
            Delegate to invoke during processing of files.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.CompletedFile">
            <summary>
            Delegate to invoke when processing for a file has been completed.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.DirectoryFailure">directory failure</see> event.
            </summary>
            <param name="directory">The directory causing the failure.</param>
            <param name="e">The exception for this event.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.OnFileFailure(System.String,System.Exception)">
            <summary>
            Fires the <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.FileFailure"> file failure handler delegate</see>.
            </summary>
            <param name="file">The file causing the failure.</param>
            <param name="e">The exception for this failure.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.OnProcessFile(System.String)">
            <summary>
            Fires the <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.ProcessFile">ProcessFile delegate</see>.
            </summary>
            <param name="file">The file being processed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.OnCompletedFile(System.String)">
            <summary>
            Fires the <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.CompletedFile"/> delegate
            </summary>
            <param name="file">The file whose processing has been completed.</param>
            <returns>A boolean indicating if execution should continue or not.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Fires the <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.ProcessDirectory">process directory</see> delegate.
            </summary>
            <param name="directory">The directory being processed.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files as determined by the current filter.</param>
            <returns>A <see cref="T:System.Boolean"/> of true if the operation should continue; false otherwise.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.ProgressInterval">
            <summary>
            The minimum timespan between <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.Progress"/> events.
            </summary>
            <value>The minimum period of time between <see cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.Progress"/> events.</value>
            <seealso cref="F:Orbita.Utiles.Compresion.Zip.EventosOrbitaZip.Progress"/>
            <remarks>The default interval is three seconds.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.OrbitaZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.#ctor">
            <summary>
            Initialise a default instance
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.#ctor(Orbita.Utiles.Compresion.Zip.EventosOrbitaZip)">
            <summary>
            Initialise a new instance
            </summary>
            <param name="events">The  to use during operations.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">directory filter</see> to apply.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.CreateZip(System.IO.Stream,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip archive sending output to the <paramref name="outputStream"/> passed.
            </summary>
            <param name="outputStream">The stream to write archive data to.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">file filter</see> to apply.</param>
            <param name="directoryFilter">The <see cref="T:Orbita.Utiles.Compresion.Core.PathFilter">directory filter</see> to apply.</param>
            <remarks>The <paramref name="outputStream"/> is closed after creation.</remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.ExtractZip(System.String,System.String,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.ExtractZip(System.IO.Stream,System.String,Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura,Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Extract the contents of a zip file held in a stream.
            </summary>
            <param name="inputStream">The seekable input stream containing the zip to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
            <param name="restoreDateTime">Flag indicating whether to restore the date and time for extracted files.</param>
            <param name="isStreamOwner">Flag indicating whether the inputStream will be closed by this method.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.OrbitaZip.Dispose">
            <summary>
            Libera los recursos utilizados
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.Password">
            <summary>
            Get / set the password value.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.NameTransform">
            <summary>
            Get or set the <see cref="T:Orbita.Utiles.Compresion.Core.INameTransform"></see> active when creating Zip files.
            </summary>
            <seealso cref="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.EntryFactory"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.EntryFactory">
            <summary>
            Get or set the <see cref="T:Orbita.Utiles.Compresion.Zip.IEntryFactory"></see> active when creating Zip files.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.UseZip64">
            <summary>
            Gets or sets the setting for <see cref="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.UseZip64">Zip64 handling when writing.</see>
            </summary>
            <remarks>
            The default value is dynamic which is not backwards compatible with old
            programs and can cause problems with XP's built in compression which cant
            read Zip64 archives. However it does avoid the situation were a large file
            is added and cannot be completed correctly.
            NOTE: Setting the size for entries before they are added is the best solution!
            By default the EntryFactory used by FastZip will set fhe file size.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.RestoreDateTimeOnExtract">
            <summary>
            Get/set a value indicating wether file dates and times should 
            be restored when extracting files from an archive.
            </summary>
            <remarks>The default value is false.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.OrbitaZip.RestoreAttributesOnExtract">
            <summary>
            Get/set a value indicating wether file attributes should
            be restored during extract operations
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura">
            <summary>
            Defines the desired handling when overwriting files during extraction.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura.Preguntar">
            <summary>
            Se pregunta para que el usuario confirme la sobreescritura de ficheros
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura.Nunca">
            <summary>
            Nunca se sobreescriben los ficheros
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.OrbitaZip.Sobreescritura.Siempre">
            <summary>
            Siempre se sobreescriben los ficheros
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.OrbitaZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.ZipAESStream">
            <summary>
            Encrypts and decrypts AES ZIP
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESStream.#ctor(System.IO.Stream,Orbita.Utiles.Compresion.Encryption.ZipAESTransform,System.Security.Cryptography.CryptoStreamMode)">
            <summary>
            Constructor
            </summary>
            <param name="stream">The stream on which to perform the cryptographic transformation.</param>
            <param name="transform">Instance of ZipAESTransform</param>
            <param name="mode">Read or Write</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current CryptoStream into buffer,
            and advances the position within the stream by the number of bytes read.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream. </param>
            <param name="offset">The byte offset in buffer at which to begin copying bytes to the current stream. </param>
            <param name="count">The number of bytes to be written to the current stream. </param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionContraseñaInválida">
            <summary>
            Excepción que se lanza cuando la contraseña proporcionada no coincide con la contraseña del fichero comprimido
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionContraseñaInválida.#ctor">
            <summary>
            Initializes a new instance of the OCompresionFicherosExcepcionContraseñaInválida class
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionContraseñaNoProporcionada">
            <summary>
            Excepción que se lanza cuando no se ha proporcionado una contraseña para extraer un fichero comprimido con contraseña
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Core.OCompresionFicherosExcepcionContraseñaNoProporcionada.#ctor">
            <summary>
            Initializes a new instance of the OCompresionFicherosExcepcionContraseñaNoProporcionada class
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "value">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            the number of data bytes to add.
            </param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations 
            are performed when the garbage collector reclaims the BZip2OutputStream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
            <param name="offset">The point relative to the offset from which to being seeking.</param>
            <param name="origin">The reference point from which to begin seeking.</param>
            <returns>The new position in the stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
            <param name="value">The new stream length.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
            <returns>The byte read cast to an int; -1 if end of stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
            <param name="buffer">The buffer to read into.</param>
            <param name="offset">The offset in the buffer to start storing data at.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read. This might be less than the number of bytes
            requested if that number of bytes are not currently available, or zero 
            if the end of the stream is reached.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
            <param name="buffer">The buffer containing data to write.</param>
            <param name="offset">The offset of the first byte to write.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
            <param name="value">The byte to write to the stream.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.WriteRun">
            <summary>
            Get the number of bytes written to output.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.BZip2.BZip2OutputStream.BytesWritten">
            <summary>
            Get the number of bytes written to the output.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2Exception.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserialization constructor 
            </summary>
            <param name="info"><see cref="T:System.Runtime.Serialization.SerializationInfo"/> for this constructor</param>
            <param name="context"><see cref="T:System.Runtime.Serialization.StreamingContext"/> for this constructor</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2Exception.#ctor(System.String,System.Exception)">
            <summary>
            Initialise an instance of BZip2Exception
            </summary>
            <param name="message">A message describing the error.</param>
            <param name="exception">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Orbita.Utiles.ODataTableEnumerado">
            <summary>
            Clase para obtener datatables con los valores de un enumerado
            </summary>
        </member>
        <member name="M:Orbita.Utiles.ODataTableEnumerado.GetValoresDataTable(System.Type)">
            <summary>
            Obtiene un datatable con los diferentes valores que puede tomar un enumerado.
            Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: el ToString() de cada enumerado
            </summary>
            <param name="enumerado">Enumerado del cual se quiere extraer la información.</param>
            <returns>Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: el ToString() de cada enumerado</returns>
        </member>
        <member name="M:Orbita.Utiles.ODataTableEnumerado.GetValoresDataTable(System.Type,System.Boolean)">
            <summary>
            Obtiene un datatable con los diferentes valores que puede tomar un enumerado.
            Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: en función del segundo parámetro, devuelve el ToString() de cada enumerado o bien el atributo OAtributoEnumerado de cada enumerado
            </summary>
            <param name="enumerado">Enumerado del cual se quiere extraer la información.</param>
            <param name="obtenerValoresDelOAtributoEnumerado">True si se quiere obtener como Valor el atributo OAtributoEnumerado de cada enumerado; false si se quiere obteenr el ToString() de cada enumerado</param>
            <returns>Devuelve la información en dos columnas:
             - Identificador: corresponde al valor entero que el compilador o el programador le asigna a cada enumerado
             - Valor: en función del segundo parámetro, devuelve el ToString() de cada enumerado o bien el atributo OAtributoEnumerado de cada enumerado</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.DescriptorData">
            <summary>
            Holds data pertinent to a data descriptor.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.DescriptorData.CompressedSize">
            <summary>
            Get /set the compressed size of data.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.DescriptorData.Size">
            <summary>
            Get / set the uncompressed size of data
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.DescriptorData.Crc">
            <summary>
            Get /set the crc value.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipHelperStream">
            <summary>
            This class assists with writing/reading from Zip files.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.#ctor(System.String)">
            <summary>
            Initialise an instance of this class.
            </summary>
            <param name="name">The name of the file to open.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipHelperStream"/>.
            </summary>
            <param name="stream">The stream to use.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.Close">
            <summary>
            Close the stream.
            </summary>
            <remarks>
            The underlying stream is closed only if <see cref="P:Orbita.Utiles.Compresion.Zip.ZipHelperStream.IsStreamOwner"/> is true.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.LocateBlockWithSignature(System.Int32,System.Int64,System.Int32,System.Int32)">
            <summary>
            Locates a block with the desired <paramref name="signature"/>.
            </summary>
            <param name="signature">The signature to find.</param>
            <param name="endLocation">Location, marking the end of block.</param>
            <param name="minimumBlockSize">Minimum size of the block.</param>
            <param name="maximumVariableData">The maximum variable data.</param>
            <returns>Eeturns the offset of the first byte after the signature; -1 if not found</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteZip64EndOfCentralDirectory(System.Int64,System.Int64,System.Int64)">
            <summary>
            Write Zip64 end of central directory records (File header and locator).
            </summary>
            <param name="noOfEntries">The number of entries in the central directory.</param>
            <param name="sizeEntries">The size of entries in the central directory.</param>
            <param name="centralDirOffset">The offset of the dentral directory.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteEndOfCentralDirectory(System.Int64,System.Int64,System.Int64,System.Byte[])">
            <summary>
            Write the required records to end the central directory.
            </summary>
            <param name="noOfEntries">The number of entries in the directory.</param>
            <param name="sizeEntries">The size of the entries in the directory.</param>
            <param name="startOfCentralDirectory">The start of the central directory.</param>
            <param name="comment">The archive comment.  (This can be null).</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.ReadLEShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.ReadLEInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.ReadLELong">
            <summary>
            Read a long in little endian byte order.
            </summary>
            <returns>The value read.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLEShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLEUshort(System.UInt16)">
            <summary>
            Write a ushort in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLEInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLEUint(System.UInt32)">
            <summary>
            Write a uint in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLELong(System.Int64)">
            <summary>
            Write a long in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteLEUlong(System.UInt64)">
            <summary>
            Write a ulong in little endian byte order.
            </summary>
            <param name="value">The value to write.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.WriteDataDescriptor(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Write a data descriptor.
            </summary>
            <param name="entry">The entry to write a descriptor for.</param>
            <returns>Returns the number of descriptor bytes written.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipHelperStream.ReadDataDescriptor(System.Boolean,Orbita.Utiles.Compresion.Zip.DescriptorData)">
            <summary>
            Read data descriptor at the end of compressed data.
            </summary>
            <param name="zip64">if set to <c>true</c> [zip64].</param>
            <param name="data">The data to fill in.</param>
            <returns>Returns the number of bytes read in the descriptor.</returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipHelperStream.IsStreamOwner">
            <summary>
            Get / set a value indicating wether the the underlying stream is owned or not.
            </summary>
            <remarks>If the stream is owned it is closed when this instance is closed.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.UseZip64">
            <summary>
            Determines how entries are tested to see if they should use Zip64 extensions or not.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.UseZip64.Off">
            <summary>
            Zip64 will not be forced on entries during processing.
            </summary>
            <remarks>An entry can have this overridden if required <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntry.ForceZip64"></see></remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.UseZip64.On">
            <summary>
            Zip64 should always be used.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.UseZip64.Dynamic">
            <summary>
            #ZipLib will determine use based on entry values when added to archive.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip currently
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.BZip2">
            <summary>
            BZip2 compression. Not supported by #Zip.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Now supported by #Zip.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm">
            <summary>
            Identifies the encryption algorithm used for an entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.None">
            <summary>
            No encryption has been used.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.PkzipClassic">
            <summary>
            Encrypted using PKZIP 2.0 or 'classic' encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Des">
            <summary>
            DES encryption has been used.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.RC2">
            <summary>
            RCS encryption has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.TripleDes168">
            <summary>
            Triple DES encryption with 168 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.TripleDes112">
            <summary>
            Triple DES with 112 bit keys has been used for this entry.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Aes128">
            <summary>
            AES 128 has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Aes192">
            <summary>
            AES 192 has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Aes256">
            <summary>
            AES 256 has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.RC2Corrected">
            <summary>
            RC2 corrected has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Blowfish">
            <summary>
            Blowfish has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Twofish">
            <summary>
            Twofish has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.RC4">
            <summary>
            RC4 has been used for encryption.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.EncryptionAlgorithm.Unknown">
            <summary>
            An unknown algorithm has been used for encryption.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Encrypted">
            <summary>
            Bit 0 if set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Method">
            <summary>
            Bits 1 and 2 - Two bits defining the compression method (only for Method 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Descriptor">
            <summary>
            Bit 3 if set indicates a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.ReservedPKware4">
            <summary>
            Bit 4 is reserved for use with method 8 for enhanced deflation
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Patched">
            <summary>
            Bit 5 if set indicates the file contains Pkzip compressed patched data.
            Requires version 2.7 or greater.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            Bit 6 if set indicates strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Unused7">
            <summary>
            Bit 7 is currently unused
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Unused8">
            <summary>
            Bit 8 is currently unused
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Unused9">
            <summary>
            Bit 9 is currently unused
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.Unused10">
            <summary>
            Bit 10 is currently unused
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.UnicodeText">
            <summary>
            Bit 11 if set indicates the filename and 
            comment fields for this file must be encoded using UTF-8.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Bit 12 is documented as being reserved by PKware for enhanced compression.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            Bit 13 if set indicates that values in the local header are masked to hide
            their actual values, and the central directory is encrypted.
            </summary>
            <remarks>
            Used when encrypting the central directory contents.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.ReservedPkware14">
            <summary>
            Bit 14 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.GeneralBitFlags.ReservedPkware15">
            <summary>
            Bit 15 is documented as being reserved for use by PKware
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VersionMadeBy">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CanDecompress"/>.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:Orbita.Utiles.Compresion.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VersionStrongEncryption">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VERSION_AES">
            <summary>
            Version indicating AES encryption
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.VersionZip64">
            <summary>
            The version required for Zip64 extensions (4.5 or higher)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.LocalHeaderBaseSize">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.Zip64DataDescriptorSize">
            <summary>
            Size of Zip64 data descriptor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.DataDescriptorSize">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CentralHeaderBaseSize">
            <summary>
            Size of central header entry (excluding variable fields)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.EndOfCentralRecordBaseSize">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CryptoHeaderSize">
            <summary>
            Size of 'classic' cryptographic header stored before any entry data
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.LocalHeaderSignature">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.SpanningSignature">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.SpanningTempSignature">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.DataDescriptorSignature">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CentralHeaderSignature">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.Zip64CentralFileHeaderSignature">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.Zip64CentralDirLocatorSignature">
            <summary>
            Signature for Zip64 central directory locator
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.ArchiveExtraDataSignature">
            <summary>
            Signature for archive extra data signature (were headers are encrypted).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CentralHeaderDigitalSignature">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.EndOfCentralDirectorySignature">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="count">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="flags">The applicable general purpose bits flags</param>
            <param name="data">
            Byte array to convert
            </param>
            <param name="count">The number of bytes to convert.</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToStringExt(System.Int32,System.Byte[])">
            <summary>
            Convert a byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <param name="flags">The applicable general purpose bits flags</param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.ConvertToArray(System.Int32,System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="flags">The applicable <see cref="T:Orbita.Utiles.Compresion.Zip.GeneralBitFlags">general purpose bits flags</see></param>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipConstants.#ctor">
            <summary>
            Initialise default instance of <see cref="T:Orbita.Utiles.Compresion.Zip.ZipConstants">ZipConstants</see>
            </summary>
            <remarks>
            Private to prevent instances being created.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system OEM code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "value">
            the byte is taken as the lower 8 bits of value
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buffer">
            The buffer which contains the data
            </param>
            <param name = "offset">
            The offset in the buffer where the data starts
            </param>
            <param name = "count">
            The number of data bytes to update the CRC with.
            </param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Sobreescribir">
            <summary>
            Enumerado para indicar si se quiere sobreescribir o no los ficheros.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Sobreescribir.Siempre">
            <summary>
            Siempre
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Sobreescribir.Nunca">
            <summary>
            Nunca
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Sobreescribir.Preguntar">
            <summary>
            Preguntar
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.OCompresionFlujos">
            <summary>
            Ofrece métodos para comprimir y descomprimir flujos en distintos formatos.
            Clase no implementada. Se tiene capacidad para comprimir y descomprimir flujos, pero por falta de necesidad (y de tiempo), se deja la posibilidad de hacerlo en un futuro
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.BaseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compression but uses the most memory.
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.MaximumAlphaSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.MaximumCodeLength">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.RunA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.RunB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.GroupCount">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.GroupSize">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.NumberOfIterations">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.MaximumSelectors">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.OvershootBytes">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.BZip2.BZip2Constants.RandomNumbers">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OPair`2">
            <summary>
            Clase utilizada para almacenar un par de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OPair`2.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OPair`2.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPair`2.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OPair`2.#ctor(`0,`1)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OTriplet`3">
            <summary>
            Clase utilizada para almacenar un trío de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OTriplet`3.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTriplet`3.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OTriplet`3.#ctor(`0,`1,`2)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OQuartet`4">
            <summary>
            Clase utilizada para almacenar un trío de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuartet`4.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuartet`4.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuartet`4.#ctor(`0,`1,`2,`3)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OQuintet`5">
            <summary>
            Clase utilizada para almacenar un trío de valores
            </summary>
            <typeparam name="TFirst">Tipo del primer valor</typeparam>
            <typeparam name="TSecond">Tipo del segundo valor</typeparam>
            <typeparam name="TThird">Tipo del tercer valor</typeparam>
            <typeparam name="TFourth">Tipo del cuarto valor</typeparam>
            <typeparam name="TFifth">Tipo del quinto valor</typeparam>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.First">
            <summary>
            Primer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Second">
            <summary>
            Segundo valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Third">
            <summary>
            Tercer valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Fourth">
            <summary>
            Cuarto valor
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OQuintet`5.Fifth">
            <summary>
            Quinto valor
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuintet`5.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OQuintet`5.#ctor(`0,`1,`2,`3,`4)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHilo">
            <summary>
            Clase que representa hilos de ejecución (Threads).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._thread">
            <summary>
            Hilo (Thread).
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._duermeThread">
            <summary>
            Tiempo de letargo del hilo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._descripcion">
            <summary>
            Descripción del hilo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OHilo._iniciar">
            <summary>
            Iniciar hilo en el evento
            de inicialización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.#ctor(System.Threading.ThreadStart,System.String,System.String,System.Threading.ThreadPriority,System.Boolean,System.Boolean)">
            <summary>
            Inicializar una nueva instancia de la clase OHilo.
            </summary>
            <param name="metodo">Proceso de ejecución del hilo.</param>
            <param name="nombre">Nombre del hilo.</param>
            <param name="descripcion">Descripción del hilo.</param>
            <param name="prioridad">Prioridad de hilo.</param>
            <param name="segundoPlano">Indica si se ejecuta el hilo en segundo plano.</param>
            <param name="iniciar">Indica si se inicia el hilo en el evento de inicialización.</param>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Iniciar">
            <summary>
            Iniciar el hilo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Suspender">
            <summary>
            Suspender el hilo activo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Reanudar">
            <summary>
            Reanudar el hilo suspendido.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Terminar">
            <summary>
            Terminar el hilo activo.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join(System.Int32)">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
            <param name="timeout">Número de milisegundos en los que se va a esperar a que el subproceso finalice.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OHilo.Join(System.TimeSpan)">
            <summary>
            Bloquea el subproceso de la llamada hasta que un subproceso finaliza, pero
            continúa realizando suministro de SendMessage y COM estándar.
            </summary>
            <param name="timeout">Número de milisegundos en los que se va a esperar a que el subproceso finalice.</param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OHilo.EstaVivo">
            <summary>
            Comprobar la vitalidad de un hilo.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHilo.OnDespuesAccion">
            <summary>
            Evento de los métodos: 
            Iniciar(), Suspender(), Reanudar(), Terminar().
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Thread">
            <summary>
            Hilo (Thread).
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Letargo">
            <summary>
            Tiempo de letargo del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Nombre">
            <summary>
            Nombre del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Descripcion">
            <summary>
            Descripción del hilo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OHilo.Iniciarlo">
            <summary>
            Iniciación del hilo.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OCronometrosManager">
            <summary>
            Clase estática para el acceso a los cronómetros que se están ejecutandose en el sistema
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometrosManager.ListaCronometros">
            <summary>
            Listado de todos los cronómetros necesarios para el cómputo de tiempos de proceso
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Constructor">
            <summary>
            Constructor de los campos de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Destructor">
            <summary>
            Destruye los campos de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Inicializar">
            <summary>
            Inicializa las variables necesarias para el funcionamiento de los cronómetros
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Finalizar">
            <summary>
            Finaliza la ejecución
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.NuevoCronometro(System.String,System.String,System.String)">
            <summary>
            Añade un nuevo cronómetro al sistema
            </summary>
            <param name="codigo">Código identificador del cronómetro</param>
            <param name="nombre">Nombre del cronómetro</param>
            <param name="descripcion">Texto descriptivo del cronómetro</param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.EliminaCronometro(System.String)">
            <summary>
            Elimina el cronometro de la lista
            </summary>
            <param name="codigo"></param>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.ExisteCronometro(System.String)">
            <summary>
            Informa de la existencia eel cronometro en la lista
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.BuscaCronometro(System.String)">
            <summary>
            Búsca el cronometro en la lista
            </summary>
            <param name="codigo"></param>
            <returns></returns>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Start(System.String)">
            <summary>
            Inicia la cuenta de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.StartPaused(System.String)">
            <summary>
            Inicia la cuenta de forma pausada de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Stop(System.String)">
            <summary>
            Detiene la cuenta de determinado cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Pause(System.String)">
            <summary>
            Pausa el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Resume(System.String)">
            <summary>
            Reanuda el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.ContadorEjecuciones(System.String)">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionPromedioEjecucion(System.String)">
            <summary>
            Duración promedio del tiempo que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionTotalEjecucion(System.String)">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.MomentoUltimaEjecucion(System.String)">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.DuracionUltimaEjecucion(System.String)">
            <summary>
            Duración de la última ejecución
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometrosManager.Ejecutando(System.String)">
            <summary>
            Indica si el contador está ejecutandose
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OCronometro">
            <summary>
            Clase que implementa un cronómetro para la medición de tiempos
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro.CronometroEjecucion">
            <summary>
            Cronómetro de la ejecución del estado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro.EstadoCronometro">
            <summary>
            Estado del cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Codigo">
            <summary>
            Código identificativo del cronómetro.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Nombre">
            <summary>
            Nombre del cronómetro.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._Descripcion">
            <summary>
            Texto descriptivo.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._ContadorEjecuciones">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._DuracionTotalEjecucion">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OCronometro._MomentoUltimaEjecucion">
            <summary>
            Momento en el que se ejecutó por última vez
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.#ctor">
            <summary>
            Constructor de la clase
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Start">
            <summary>
            Inicia el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.StartPaused">
            <summary>
            Inicia el cronometro de forma pausada
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Stop">
            <summary>
            Detiene el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Pause">
            <summary>
            Pausa el cronometro
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OCronometro.Resume">
            <summary>
            Reanuda el cronometro
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Codigo">
            <summary>
            Código identificativo del cronómetro.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Nombre">
            <summary>
            Nombre del cronómetro.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Descripcion">
            <summary>
            Texto descriptivo.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.ContadorEjecuciones">
            <summary>
            Contador del número de veces que se ha realizado una medición de tiempos
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionPromedioEjecucion">
            <summary>
            Duración promedio del tiempo que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionTotalEjecucion">
            <summary>
            Duración del tiempo acumulado que ha contabilizado el cronómetro
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.MomentoUltimaEjecucion">
            <summary>
            Momento en el que se ejecutó por última vez
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.DuracionUltimaEjecucion">
            <summary>
            Duración de la última ejecución
            </summary>
        </member>
        <member name="P:Orbita.Utiles.OCronometro.Ejecutando">
            <summary>
            Indica si el contador está ejecutandose
            </summary>
        </member>
        <member name="T:Orbita.Utiles.EstadoCronometro">
            <summary>
            Enumerado que describe el esatado de un cronómetro
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Detenido">
            <summary>
            Detenido
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Pausado">
            <summary>
            Pausado
            </summary>
        </member>
        <member name="F:Orbita.Utiles.EstadoCronometro.Iniciado">
            <summary>
            Iniciado
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="offset">
            the start of the data.
            </param>
            <param name="count">
            the number of data bytes of input.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was Finish()ed or if previous input is still pending.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="level">
            the new compression level.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetStrategy(Orbita.Utiles.Compresion.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            SetLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            IsNeedingInput() or IsFinished returns true or length is zero.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If Finish() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset or length don't match the array length.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dictionary">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if SetInput () or Deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dictionary">
            The dictionary data
            </param>
            <param name="index">
            The index where dictionary information commences.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            If SetInput () or Deflate() were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using Orbita.Utiles.Compresion.Core;
            using Orbita.Utiles.Compresion.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		using (Stream inStream = new GZipInputStream(File.OpenRead(args[0])))
            		using (FileStream outStream = File.Create(Path.GetFileNameWithoutExtension(args[0]))) {
            			byte[] buffer = new byte[4096];
            			StreamUtils.Copy(inStream, outStream, buffer);
            		}
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.GZip.GZipInputStream.readGZIPHeader">
            <summary>
            Flag to indicate if we've read the GZIP header yet for the current member (block of compressed data).
            This is tracked per-block as the file is parsed.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GZipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buffer">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="count">
            The number of uncompressed bytes to be read
            </param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.BZip2.BZip2">
            <summary>
            An example class to demonstrate compression and decompression of BZip2 streams.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream,System.Boolean)">
            <summary>
            Decompress the <paramref name="inStream">input</paramref> writing 
            uncompressed data to the <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream containing data to decompress.</param>
            <param name="outStream">The output stream to receive the decompressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Boolean,System.Int32)">
            <summary>
            Compress the <paramref name="inStream">input stream</paramref> sending 
            result data to <paramref name="outStream">output stream</paramref>
            </summary>
            <param name="inStream">The readable stream to compress.</param>
            <param name="outStream">The output stream to receive the compressed data.</param>
            <param name="isStreamOwner">Both streams are closed on completion if true.</param>
            <param name="level">Block size acts as compression level (1 to 9) with 1 giving 
            the lowest compression and 9 the highest.</param>
        </member>
        <member name="T:Orbita.Utiles.ManejadorEvento">
            <summary>
            Delegado asociado al evento.
            </summary>
            <param name="sender">Objeto que lanza el evento.</param>
            <param name="e">Dato que puede ser usado en el manejador de evento.</param>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.HostSystemID">
            <summary>
            Defines known values for the <see cref="T:Orbita.Utiles.Compresion.Zip.HostSystemID"/> property.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Msdos">
            <summary>
            Host system = MSDOS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Amiga">
            <summary>
            Host system = Amiga
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.OpenVms">
            <summary>
            Host system = Open VMS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Unix">
            <summary>
            Host system = Unix
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.VMCms">
            <summary>
            Host system = VMCms
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.AtariST">
            <summary>
            Host system = Atari ST
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.OS2">
            <summary>
            Host system = OS2
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Macintosh">
            <summary>
            Host system = Macintosh
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.ZSystem">
            <summary>
            Host system = ZSystem
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Cpm">
            <summary>
            Host system = Cpm
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.WindowsNT">
            <summary>
            Host system = Windows NT
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.MVS">
            <summary>
            Host system = MVS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Vse">
            <summary>
            Host system = VSE
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.AcornRisc">
            <summary>
            Host system = Acorn RISC
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Vfat">
            <summary>
            Host system = VFAT
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.AlternateMvs">
            <summary>
            Host system = Alternate MVS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.BeOS">
            <summary>
            Host system = BEOS
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.Tandem">
            <summary>
            Host system = Tandem
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.OS400">
            <summary>
            Host system = OS400
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.OSX">
            <summary>
            Host system = OSX
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.HostSystemID.WinZipAES">
            <summary>
            Host system = WinZIP AES
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix' style paths with relative names only.
            There are with no device names and path elements are separated by '/' characters.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntry.CleanName(System.String)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32,Orbita.Utiles.Compresion.Zip.CompressionMethod)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <param name="method">Compression method for this entry.</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.#ctor(Orbita.Utiles.Compresion.Zip.ZipEntry)">
            <summary>
            Creates a deep copy of the given zip entry.
            </summary>
            <param name="entry">
            The entry to copy.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.HasDosAttributes(System.Int32)">
            <summary>
            Test the external attributes for this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/> to
            see if the external attributes are Dos based (including WINNT and variants)
            and match the values
            </summary>
            <param name="attributes">The attributes to test.</param>
            <returns>Returns true if the external attributes are known to be DOS/Windows 
            based and have the same attributes set as the value passed.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.ForceZip64">
            <summary>
            Force this entry to be recorded using Zip64 extensions.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.IsZip64Forced">
            <summary>
            Get a value indicating wether Zip64 extensions were forced.
            </summary>
            <returns>A <see cref="T:System.Boolean"/> value of true if Zip64 extensions have been forced on; false if not.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.ProcessExtraData(System.Boolean)">
            <summary>
            Process extra data fields updating the entry based on the contents.
            </summary>
            <param name="localHeader">True if the extra data fields should be handled
            for a local header, rather than for a central header.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.IsCompressionMethodSupported">
            <summary>
            Test entry to see if data can be extracted.
            </summary>
            <returns>Returns true if data can be extracted for this entry; false otherwise.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
            <returns>An <see cref="T:System.Object"/> that is a copy of the current instance.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.ToString">
            <summary>
            Gets a string representation of this ZipEntry.
            </summary>
            <returns>A readable textual representation of this <see cref="T:Orbita.Utiles.Compresion.Zip.ZipEntry"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.IsCompressionMethodSupported(Orbita.Utiles.Compresion.Zip.CompressionMethod)">
            <summary>
            Test a <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CompressionMethod">compression method</see> to see if this library
            supports extracting data compressed with that method
            </summary>
            <param name="method">The compression method to test.</param>
            <returns>Returns true if the compression method is supported; false otherwise</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with the ZIP naming convention.
            </summary>
            <param name="name">The name to clean</param>
            <returns>The 'cleaned' name.</returns>
            <remarks>
            The <seealso cref="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform">Zip name transform</seealso> class is more flexible.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.HasCrc">
            <summary>
            Get a value indicating wether the entry has a CRC value available.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Flags">flags</see>
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsUnicodeText">
            <summary>
            Get / set a flag indicating wether entry name and comment text are
            encoded in <a href="http://www.unicode.org">unicode UTF8</a>.
            </summary>
            <remarks>This is an assistant that interprets the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Flags">flags</see> property.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CryptoCheckValue">
            <summary>
            Value used during password checking for PKZIP 2.0 / 'classic' encryption.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            <br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-10: Unused or reserved<br/>
            Bit 11: If set the name and comments for this entry are in <a href="http://www.unicode.org">unicode</a>.<br/>
            Bit 12-15: Unused or reserved<br/>
            </remarks>
            <seealso cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsUnicodeText"></seealso>
            <seealso cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsCrypted"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
            <remarks>This is only valid when the entry is part of a <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"></see></remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsDOSEntry">
            <summary>
            Get a value indicating this entry is for a DOS/Windows system.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            6.3 - File is compressed using LZMA<br/>
            6.3 - File is compressed using PPMD+<br/>
            6.3 - File is encrypted using Blowfish<br/>
            6.3 - File is encrypted using Twofish<br/>
            </remarks>
            <seealso cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CanDecompress"></seealso>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CanDecompress">
            <summary>
            Get a value indicating whether this entry can be decompressed by the library.
            </summary>
            <remarks>This is based on the <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Version"></see> and 
            wether the <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntry.IsCompressionMethodSupported">compression method</see> is supported.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.LocalHeaderRequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions 
            to store the full entry values.
            </summary>
            <value>A <see cref="T:System.Boolean"/> value of true if a local header requires Zip64 extensions; false if not.</value>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CentralHeaderRequiresZip64">
            <summary>
            Get a value indicating wether the central directory entry requires Zip64 extensions to be stored.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime value.
            </summary>
            <remarks>
            The MS-DOS date format can only represent dates between 1/1/1980 and 12/31/2107.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
            <remarks>
            The <see cref="P:Orbita.Utiles.Compresion.Zip.ZipEntry.DosTime"></see> property is updated to match this as far as possible.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Name">
             <summary>
             Returns the entry name.
             </summary>
             <remarks>
             The unix naming convention is followed.
             Path components in the entry should always separated by forward slashes ('/').
             Dos device names like C: should also be removed.
             See the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipNameTransform"/> class, or <see cref="M:Orbita.Utiles.Compresion.Zip.ZipEntry.CleanName(System.String)"/>
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <returns>
            The size or -1 if unknown.
            </returns>
            <remarks>Setting the size before adding an entry to an archive can help
            avoid compatability problems with some archivers which dont understand Zip64 extensions.</remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <returns>
            The compressed entry size or -1 if unknown.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.Deflated"/>
            <see cref="F:Orbita.Utiles.Compresion.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.CompressionMethodForHeader">
            <summary>
            Gets the compression method for outputting to the local or central header.
            Returns same value as CompressionMethod except when AES encrypting, which
            places 99 in the method and places the real method in the extra data.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 64KB (0xffff) bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.AESKeySize">
            <summary>
            For AES encrypted files returns or sets the number of bits of encryption (128, 192 or 256).
            When setting, only 0 (off), 128 or 256 is supported.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.AESEncryptionStrength">
            <summary>
            AES Encryption strength for storage in extra data in entry header.
            1 is 128 bit, 2 is 192 bit, 3 is 256 bit.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.AESSaltLen">
            <summary>
            Returns the length of the salt, in bytes 
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.AESOverheadSize">
            <summary>
            Number of extra bytes required to hold the AES Header fields (Salt, Pwd verify, AuthCode)
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
            <remarks>
            A comment is only available for entries when read via the <see cref="T:Orbita.Utiles.Compresion.Zip.ZipFile"/> class.
            The <see cref="T:Orbita.Utiles.Compresion.Zip.ZipInputStream"/> class doesnt have the comment data available.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating if the entry is a directory.
            however.
            </summary>
            <remarks>
            A directory is determined by an entry name with a trailing slash '/'.
            The external file attributes can also indicate an entry is for a directory.
            Currently only dos/windows attributes are tested in this manner.
            The trailing slash convention should always be followed.
            </remarks>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account of DOS/Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>SetInput()</code>, then Inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>IsNeedingInput() returns true because the input buffer is empty.
             You have to provide more input with <code>SetInput()</code>.
             NOTE: IsNeedingInput() also returns true when, the stream is finished.
             </li>
             <li>IsNeedingDictionary() returns true, you have to provide a preset
                dictionary with <code>SetDictionary()</code>.</li>
             <li>IsFinished returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="index">
            The index into buffer where the dictionary starts.
            </param>
            <param name="count">
            The number of bytes in the dictionary.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            the input.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="index">
            The index into buffer where the input starts.
            </param>
            <param name="count">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The index and/or count are wrong.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether IsNeedingDictionary(),
            IsNeedingInput() or IsFinished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <returns>
            The number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buffer has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buffer">
            the output buffer.
            </param>
            <param name="offset">
            the offset in buffer where storing starts.
            </param>
            <param name="count">
            the maximum number of bytes to output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if count is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the index and / or count are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by Inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="offset">The offset relative to the origin to seek to.</param>
            <param name="origin">The <see cref="T:System.IO.SeekOrigin"/> to start seeking from.</param>
            <returns>The new position in the stream.</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The new stream length.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="buffer">The buffer containing bytes to write.</param>
            <param name="offset">The offset in the buffer of the frist byte to write.</param>
            <param name="count">The number of bytes to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <param name="value">The byte value to write.</param>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            </summary>
            <returns>A byte cast to an int; -1 if the at the end of the stream.</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="buffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.SetEntryFactory(Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="skipCount">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.readBuffer">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.tarBuffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.currentEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.entryFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Tar.TarInputStream.inputStream">
            <summary>
            Stream used as the source of input data.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of the underlying stream.
            When the flag is true <see cref="M:Orbita.Utiles.Compresion.Tar.TarInputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.RecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Return a value of true if marking is supported; false otherwise.
            </summary>
            <remarks>Currently marking is not supported, the return value is always false.</remarks>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method <see cref="M:Orbita.Utiles.Compresion.Tar.TarInputStream.SetEntryFactory(Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory)"/>, to allow
            the programmer to have their own <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/> subclass instantiated for the
            entries return from <see cref="M:Orbita.Utiles.Compresion.Tar.TarInputStream.GetNextEntry"/>.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuffer">
            Buffer containing header information to create an an entry from.
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/> based on named
            </summary>
            <param name="name">The name to use for the entry</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
            <param name="fileName">The name of the file to retrieve details from.</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/></returns>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create an entry based on details in <paramref name="headerBuffer">header</paramref>
            </summary>			
            <param name="headerBuffer">The buffer containing entry details.</param>
            <returns>A new <see cref="T:Orbita.Utiles.Compresion.Tar.TarEntry"/></returns>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Encryption.ZipAESTransform">
            <summary>
            Transforms stream using AES in CTR mode
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.#ctor(System.String,System.Byte[],System.Int32,System.Boolean)">
             <summary>
             Constructor.
             </summary>
             <param name="key">Password string</param>
             <param name="saltBytes">Random bytes, length depends on encryption strength.
             128 bits = 8 bytes, 192 bits = 12 bytes, 256 bits = 16 bytes.</param>
             <param name="blockSize">The encryption strength, in bytes eg 16 for 128 bits.</param>
             <param name="writeMode">True when creating a zip, false when reading. For the AuthCode.</param>
            
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Implement the ICryptoTransform method.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.GetAuthCode">
            <summary>
            Returns the 10 byte AUTH CODE to be checked or appended immediately following the AES data stream.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.PwdVerifier">
            <summary>
            Returns the 2 byte password verifier
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Encryption.ZipAESTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:Orbita.Utiles.Compresion.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="value">data update is based on</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>
            <param name="buffer">The buffer containing data to update the crc with.</param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buffer">block of data</param>
            <param name="offset">index of first byte to use</param>
            <param name="count">number of bytes to use</param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.Compresion.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:Orbita.Utiles.Compresion.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="F:Orbita.Utiles.Compresion.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with a byte value.
            </summary>
            <param name="value">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:Orbita.Utiles.Compresion.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            an array of bytes
            </param>
            <param name="offset">
            the start of the data used for this update
            </param>
            <param name="count">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:Orbita.Utiles.Compresion.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OHashtable">
            <summary>
            Colección de que representa una tabla de dispersión (Hash).
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
            <param name="info">Objeto System.Runtime.Serialization.SerializationInfo 
            que contiene la información que se requiere para serializar el objeto
            System.Collections.Hashtable.</param>
            <param name="context">Objeto System.Runtime.Serialization.StreamingContext
            que contiene el origen y el destino de la secuencia serializada asociada a 
            System.Collections.Hashtable.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.#ctor(System.Collections.Hashtable)">
            <summary>
            Inicializar una nueva instancia de la clase OHashtable.
            </summary>
            <param name="table">Colección hashtable.</param>
        </member>
        <member name="F:Orbita.Utiles.OHashtable.disposed">
            <summary>
            Indica si ya se llamo al método Dispose. (default = false)
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Dispose">
            <summary>
            Implementa IDisposable.
            No  hacer  este  método  virtual.
            Una clase derivada no debería ser
            capaz de  reemplazar este método.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Dispose(System.Boolean)">
            <summary>
            Método  sobrecargado de  Dispose que será  el que
            libera los recursos. Controla que solo se ejecute
            dicha lógica una  vez y evita que el GC tenga que
            llamar al destructor de clase.
            </summary>
            <param name="disposing">Indica si llama al método Dispose.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Finalize">
            <summary>
            Destructor(es) de clase.
            En caso de que se nos olvide “desechar” la clase,
            el GC llamará al destructor, que tambén ejecuta 
            la lógica anterior para liberar los recursos.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Add(System.Object,System.Object)">
            <summary>
            Agrega un elemento con  la clave y el  valor 
            especificados a System.Collections.Hashtable.
            </summary>
            <param name="key">Clave del elemento que se va a agregar.</param>
            <param name="value">Valor del elemento que se va a agregar. 
            El valor puede ser null.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Eliminar(System.Object)">
            <summary>
            Método de borrado del elemento en la colección.
            </summary>
            <param name="clave">Clave.</param>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Contar">
            <summary>
            Método contador de elementos de la colección.
            </summary>
            <returns>Número de elementos de la colección.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Existe(System.Object)">
            <summary>
            Método de comprobación de aparición del objeto en la colección.
            </summary>
            <param name="clave">Identificar de key en object.</param>
            <returns>La existencia o no del objeto.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Limpiar">
            <summary>
            Método de borrado total de la colección.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.Clonar">
            <summary>
            Clonar una copia superficial del objeto.
            </summary>
            <returns>Una nueva colección clonada.</returns>
        </member>
        <member name="M:Orbita.Utiles.OHashtable.CopiarA(System.Exception[],System.Int32)">
            <summary>
            Copia los elementos de la interfaz System.Collections.ICollection en un objeto
             System.Array, a partir de un índice determinado de la clase System.Array.
            </summary>
            <param name="array">Objeto System.Array unidimensional que constituye el destino 
            de los elementos copiados de la interfaz System.Collections.ICollection. 
            System.Array debe tener una indización de base cero.</param>
            <param name="indice">Índice de base cero de array donde comienza la copia.</param>
        </member>
        <!-- El comentario XML con formato incorrecto se omite para el miembro "M:Orbita.Utiles.OHashtable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" -->
        <member name="M:Orbita.Utiles.OHashtable.CopyTo(System.Exception[],System.Int32)">
            <summary>
            Copia los elementos de la interfaz System.Collections.ICollection en un objeto
             System.Array, a partir de un índice determinado de la clase System.Array.
            </summary>
            <param name="array">Objeto System.Array unidimensional que constituye el destino 
            de los elementos copiados de la interfaz System.Collections.ICollection. 
            System.Array debe tener una indización de base cero.</param>
            <param name="indice">Índice de base cero de array donde comienza la copia.</param>
        </member>
        <member name="E:Orbita.Utiles.OHashtable.OnDespuesAdicionar">
            <summary>
            Evento que se ejecuta tras añadir un objeto a la colección.
            </summary>
        </member>
        <member name="E:Orbita.Utiles.OHashtable.OnDespuesEliminar">
            <summary>
            Evento que se ejecuta tras eliminar un objeto de la colección.
            </summary>
        </member>
        <member name="T:Orbita.Utiles.OColaSincronizada">
            <summary>
            Queue sincronized .NET.
            </summary>
        </member>
        <member name="F:Orbita.Utiles.OColaSincronizada.sResetManual">
            <summary>
            Atributo estático de sincronización.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.#ctor">
            <summary>
            Inicializar una nueva instancia de la clase OColaSincronizada.
            </summary>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.#ctor(Orbita.Utiles.OResetManual)">
            <summary>
            Inicializar una nueva instancia de la clase OColaSincronizada.
            </summary>
            <param name="resetManual">Atributo de sincronización.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Encolar(System.Object)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Encolar(System.Object,System.Int16)">
            <summary>
            Método que encola un objeto.
            </summary>
            <param name="sender">Objeto a encolar.</param>
            <param name="indice">Identificador de evento
            reset manual de sincroniazación.</param>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Desencolar">
            <summary>
            Método que desencola un objeto.
            </summary>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="M:Orbita.Utiles.OColaSincronizada.Desencolar(System.Int16)">
            <summary>
            Método que desencola un objeto.
            </summary>
            <param name="indice">Indice de evento
            reset manual de sincroniazación.</param>
            <returns>Objeto encolado.</returns>
        </member>
        <member name="P:Orbita.Utiles.OColaSincronizada.ResetManual">
            <summary>
            Atributo de sincronización.
            </summary>
        </member>
    </members>
</doc>
